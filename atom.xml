<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>残局</title>
  
  <subtitle>没有故事，不会喝酒。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-26T09:39:30.632Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>某卑微社畜</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的大学</title>
    <link href="http://example.com/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/"/>
    <id>http://example.com/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6/</id>
    <published>2023-06-26T07:44:31.000Z</published>
    <updated>2023-06-26T09:39:30.632Z</updated>
    
    <content type="html"><![CDATA[<p>谨以此文纪念我的大学时光</p><span id="more"></span><h2 id="生涯规划"><a href="#生涯规划" class="headerlink" title="生涯规划"></a>生涯规划</h2><p>步入大学没有了之前那种固定的长远目标，似乎未来充满着无限可能，却又无从下手。刚入学的时候，对自己的未来还没有任何规划，但学校里的人、事都在烘托着一种「读研是大学的最好出路」的氛围：保研名校的学长学姐系列讲座；升学率宣传；同学、家长的学历崇拜……似乎大学和之前的阶段一样，目的是拿到下一阶段的入场券。刚入学时，每天都能听到学长学姐的保研、考研、求职的光辉事迹，但其实只是当个故事听，也并没有考虑过将来自己想做什么。刚摆脱高中那种压抑的环境（每天12点睡5点起，还因为午休时间午睡被请过家长），每天都在报复性的玩乐。教务处排课会避开周三下午，每周三下午我都能狂睡3、4个小时。</p><p>开学不久认识了两个学长，也是整个大一关系比较好的唯一的两个。A学长当时大四，他从大二开始就以实验室为家，寒暑假也要泡在实验室里做实验（甚至有一年过年都没回），最终成功保研；B学长当时研一，大学吃喝玩乐三年多，最后考研上岸。我每天接受的熏陶也都是要好好学习，准备考研。这时我的大学目标是<strong>保研</strong>。为了这个目标，大一上学期非常刻苦的学习了一学期。秋季学期结束后，排名大概在20%左右，基本上这样持续下去的话，也能够达到保研的要求。大一下学期疫情爆发，在家里上了一学期的网课，也是这个信念支撑这我每天认真学习。快期末的时候，学校的老师似乎清楚线上教学的问题，许多课程的考核标准降低了很多，这让基础相对比较扎实的我许多课程都取得了相对不错的成绩，排名一路冲到了前5%。大一结束学院进行专业分流，当时学的是机械，唯一的一门专业课是工图（我四年分最低的几门课之一），学不会工图的我对这个学院的专业产生畏惧，觉得自己学不会这个方向。于是，选择了转专业。当时互联网行业很热门，于是选择了软件学院，但是我的排名只是刚触碰到转专业的底线，又怕自己被刷下去被迫留在原学院。于是选择了软件学院的一个冷门的专业——信息安全。</p><p>刚转过去的时候，看到了新的排名：50%。此时的我每天都很焦虑，因为我很难再触碰到那个保研的最低排名要求（本身并没有相关基础，而且和要求存在较大差距）。虽然很焦虑但生活还要继续，学习时间更长了，每天都憋在图书馆里学习。这样持续了一年后，排名也并没有提高多少。而且这期间目睹了很多同学混分的事（因为更多的考核是实验，很多排名靠前的实验直接用学长学姐的，然后写一篇特别优质的实验报告），我付出的比他们要多很多，得到的却无法与之比拟。</p><p>大三上学期，虽然大二发生的事动摇了我保研的决心，但我的目标还是读研。因为目标变成了<strong>考研</strong>，不必再在意那些课程的成绩。这也使得我的生活丰富了许多，每天读书、看电影、打游戏（因为疫情封校只能在校园里活动）非常快乐。那段时光是我勉强能算得上真正意义上的大学时光的几个月。</p><p>大三上学期末的时候，开始真正的审视自己的未来问题（以前只是一个思想的萌芽并不清楚为什么要读研，只是大家都在做这件事），这次是真正的思考这个问题：我为什么要读研？思考了好久，发现我只是个俗人，我的目标只有金钱。像什么学术追求、职业方向、技术追求统统没有，<strong>我只在乎钱</strong>，给我一万五的月薪让我扫垃圾我都能干一辈子。想了一下，就算读研出来刚入职时月薪高3k，这三年的差价也很难在三五年内持平，更何况我三年也未必没有涨薪。这时就正式的放弃了读研的想法。此时只想着「打工不仅能致富，还能交友娶媳妇」。调研了一下网络安全行业，发现网安的待遇比起开发要低很多，于是目标就定为了开发岗。这一年半来接触过的也就只有C++，觉得这个还略微有点基础就开始准备C++相关的知识。</p><p>在大三下学期开学前以及大三下前两个月这段时间里都在准备C++后端所需要的知识：C++2.0、算法、网络、操作系统。当时的我觉得自己也就算半个科班（只学过计算机基础课），基础还不是很扎实，能进互联网大厂的唯一机会也就是实习转正。因而在3、4月份开始投实习时就没有投过非互联网行业的开发岗和互联网小厂。可惜心比天高，命比纸薄。最终并没有找到一份互联网大厂C++开发相关的实习，选择了去网安行业一探究竟。实习了一段时间，网安行业也成功的让我觉得当初选择走开发岗是正确的。</p><p>实习结束之后，8月份开始秋招。秋招了大概3个月，结果还算满意。（最近看到了学院的就业数据，对自己更加满意了。）</p><p>现阶段的生涯规划——活过试用期。</p><h2 id="情感"><a href="#情感" class="headerlink" title="情感"></a><del>情感</del></h2><p>下次一定</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;谨以此文纪念我的大学时光&lt;/p&gt;</summary>
    
    
    
    
    <category term="关于我" scheme="http://example.com/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>悖论13</title>
    <link href="http://example.com/%E6%82%96%E8%AE%BA13/"/>
    <id>http://example.com/%E6%82%96%E8%AE%BA13/</id>
    <published>2023-03-17T12:47:23.000Z</published>
    <updated>2023-03-17T13:03:27.201Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是源于前两天在图书馆借的一本小说「悖论13」相关的故事。</p><span id="more"></span><p>大四下学期除了毕设基本没啥事了，每天闲着就去图书馆借几本书读一读。前天晚上看完书，临走的时候在图书馆又借了这本「悖论13」，刚借的时候发现书中有一张折起来的六级成绩单，本来也不是什么大事，毕竟一张没过的六级成绩单随手丢在某本书里也挺常见的。</p><p><img src="/%E6%82%96%E8%AE%BA13/%E5%85%AD%E7%BA%A7.jpg" alt="六级成绩单"></p><p>今天下午在读这本书的时候，在书中发现了张小纸条让我感受到了来自读书人的浪漫。</p><p><img src="/%E6%82%96%E8%AE%BA13/%E6%A0%87%E7%AD%BE.jpg" alt="标签"></p><p>关于书中的细节，在此就不透露了。说起来，大二的时候闲着没事买了一套（大概30张）关于电影台词的明信片，每次都是夹在书里当书签使用，然后在读完这本书时就直接夹在书里还了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是源于前两天在图书馆借的一本小说「悖论13」相关的故事。&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常瞎写" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>人在梦里死掉的话现实中还会醒过来吗</title>
    <link href="http://example.com/%E4%BA%BA%E5%9C%A8%E6%A2%A6%E9%87%8C%E6%AD%BB%E6%8E%89%E7%9A%84%E8%AF%9D%E7%8E%B0%E5%AE%9E%E4%B8%AD%E8%BF%98%E4%BC%9A%E9%86%92%E8%BF%87%E6%9D%A5%E5%90%97/"/>
    <id>http://example.com/%E4%BA%BA%E5%9C%A8%E6%A2%A6%E9%87%8C%E6%AD%BB%E6%8E%89%E7%9A%84%E8%AF%9D%E7%8E%B0%E5%AE%9E%E4%B8%AD%E8%BF%98%E4%BC%9A%E9%86%92%E8%BF%87%E6%9D%A5%E5%90%97/</id>
    <published>2023-03-10T06:52:08.000Z</published>
    <updated>2023-03-17T12:47:57.127Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚做了个噩梦，每次做噩梦都是逃杀类型的，濒死之际醒来，心跳不止。不禁在想，如果有天我在梦里被杀死了，那现实中的我会醒过来吗。</p><span id="more"></span><h2 id="梦"><a href="#梦" class="headerlink" title="梦"></a>梦</h2><p>昨晚的梦大概是这样的：</p><p>一天晚上突然家里停电了。本来打算睡了，这时候家里来了个老妇人询问一些事。就在我为她解答的时候，她突然掏出了刀想要捅我，我跑到了另一个房间里反锁了门。</p><p>过了一段时间，爷爷来了说他的老年机上的时间不太对，让我给他校对一下。校对完之后送爷爷出去的时候，他突然转身向我丢了一些东西（好像是飞镖之类的暗器）。在我躲的同时，他提着斧子砍了过来，我在地上滚了几圈之后捡起了一根木棍和他打斗在一起，没几个回合我就败下阵来。他骑在我身上掐着我的脖子，在我拼命挣扎的时候，他突然停止了动作，倒在了地上。原来是门口那里有个人丢东西把他杀了。救我的人说，他几年前被我父亲救过一命，因为是在逃命，不知道能去哪就一直在我家后面不远处的一个废弃房屋里住着。他说这里不安全了，等天亮了让我赶紧走他还能拖一点时间。</p><p>他走了，但是我心中充满了疑惑。我决心今晚就要出去寻找一下真相。走着走着，在火车道下面的承重柱旁边有几个邻居。其中一个我称呼他为大伯的人要给其他几个人表演一个魔术，他用了两张贴纸（贴纸上画着箭头）紧挨着贴在了承重柱上（箭头方向这样←→），然后又用导线围着承重柱把箭头的两个指针连接在一起。之后，承重柱疯狂的响（类似于变压器附近那种电流的声音），响了一会儿柱子上开始冒烟，然后他们来追我。我拉起一个愣在原地的人疯狂的跑。（在火车道下面，沿着火车道的方向）跑着跑着，火车道两侧开始往下掉落石头。我以为只要沿着火车道跑就可以，反正石头也砸不到我。这时那个被我拉着的人告诉我不能这么做，用不了多久火车道就会塌掉，我们会被砸死在下面。然后我拉着她跑离火车道，跑着跑着到了一个山坡上，虽然没有悬崖那么陡，但大概也接近七八十度，一脚踩不稳也就滚下去了。这时我俩躺在悬崖的那一侧休息，她像是开玩笑的说，不能被他们抓到，是选择跑回去让石头砸死还是滚下去摔死。我没说话，微微抬头看着来的时候那条路（怕他们追上来），然后她就自言自语的讲着这几天的经历（和我类似，但似乎知道的比我要多很多）。她说着的时候，我看到追我们的那群人要追过来了，然后我就吻了上去想让她闭嘴。她挣扎了一下，似乎听到了那群人的脚步声就停止了反抗。大概是因为我没这方面的经验，大脑想象不出亲吻啥感觉就突然醒了。醒的时候心跳特别特别快，缓了好久才平静下来。</p><h2 id="想"><a href="#想" class="headerlink" title="想"></a>想</h2><p>记得之前看过一篇科幻小说「克莱因瓶」，讲的是一个VR设备可以让人玩游戏时不仅有身临其境般的画面，还有着和游戏角色一样的触觉、嗅觉、疼痛等感觉。（如果换做一个基于现实世界建模的地图的话，很难分清虚拟和现实）小说里面的设定是如果在游戏地图里死亡的话，那种真实的疼痛感会让玩家的大脑觉得玩家真的死亡，将醒不过来。</p><p>其实这个问题挺蠢的，即使在梦里死掉真的醒不过来了，那些人也没办法给我答案。真怕有一天，我在梦里濒死的时候没醒过来，而是死在了梦里。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨晚做了个噩梦，每次做噩梦都是逃杀类型的，濒死之际醒来，心跳不止。不禁在想，如果有天我在梦里被杀死了，那现实中的我会醒过来吗。&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常瞎写" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>人不能至少不应该在同一个坑里连续跌倒两次</title>
    <link href="http://example.com/%E4%BA%BA%E4%B8%8D%E8%83%BD%E8%87%B3%E5%B0%91%E4%B8%8D%E5%BA%94%E8%AF%A5%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%9D%91%E9%87%8C%E8%B7%8C%E5%80%92%E4%B8%A4%E6%AC%A1/"/>
    <id>http://example.com/%E4%BA%BA%E4%B8%8D%E8%83%BD%E8%87%B3%E5%B0%91%E4%B8%8D%E5%BA%94%E8%AF%A5%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%9D%91%E9%87%8C%E8%B7%8C%E5%80%92%E4%B8%A4%E6%AC%A1/</id>
    <published>2022-12-05T06:43:06.000Z</published>
    <updated>2023-03-17T12:48:04.993Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>二〇二二年十二月四日，这天对你来说可能是平平无奇的一天，而这天却给我留下了深刻的记忆。</p></blockquote><p>人不能至少不应该在同一个坑里跌倒两次，而我跌倒了三次。</p><span id="more"></span><p>故事是这样的：</p><p>昨天上午，我骑着我家的1号电动车出去，骑到半路上发现车胎破了无法继续前进，多大点事，推回家换了家里的2号电动车继续出门。</p><p>骑着2号电动车去完超市回到家里发现2号电动车车胎也破了。对比了一下，1号电动车漏气速度较慢，勉强给1号电动车打上气，去村里修补车胎的地方去补胎。发现前面有人换三轮车的电瓶，需要等好一会儿。和老板商量了一下，先骑着老板家的电动车回家，晚上回去换自家的。老板同意了，老板家电动车骑回家了。过了两个小时，骑着老板电动车出门，想去换回自家电动车的时候，老板家的自行车车胎也破了。再次对比了一下，2号电动车漏气速度比老板家的慢，骑着2号电动车去老板家换回了补好胎的1号电动车，并告诉老板有空去我家去补老板家电动车胎。</p><p>车胎破了，很常见的一件事。而我一天见证了三次。</p><p><img src="/%E4%BA%BA%E4%B8%8D%E8%83%BD%E8%87%B3%E5%B0%91%E4%B8%8D%E5%BA%94%E8%AF%A5%E5%9C%A8%E5%90%8C%E4%B8%80%E4%B8%AA%E5%9D%91%E9%87%8C%E8%B7%8C%E5%80%92%E4%B8%A4%E6%AC%A1/000.png" alt="000"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;二〇二二年十二月四日，这天对你来说可能是平平无奇的一天，而这天却给我留下了深刻的记忆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人不能至少不应该在同一个坑里跌倒两次，而我跌倒了三次。&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常瞎写" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8%E7%9E%8E%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>校招之路</title>
    <link href="http://example.com/%E6%B1%82%E8%81%8C/"/>
    <id>http://example.com/%E6%B1%82%E8%81%8C/</id>
    <published>2022-11-28T07:28:42.000Z</published>
    <updated>2023-03-20T10:59:12.843Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了整个校招过程中走过的路及一些经验</p><span id="more"></span><h2 id="求职之路"><a href="#求职之路" class="headerlink" title="求职之路"></a>求职之路</h2><h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>实习岗位的投递是在三月底，四月初开始的，主要的方向是<strong>CPP软开</strong>和<strong>CPP后端</strong>。选择这个方向主要是因为自己了解到有网络安全方向岗位的互联网大厂比较少，大多是去一些安全厂商做安服、技服等岗位（不太喜欢专业相关岗位），结合自身学过的编程语言只有<code>C/CPP</code>，课程的实验、课设也大多是用<code>C/CPP</code>写的，就选择了<code>CPP</code>这个赛道。再加上当时了解的比较少，没听过一些其他的赛道（测开、嵌入式、客户端都没接触过，也没听说过），就基本上投递的都是后端岗位。</p><p>说来惭愧，刚开始的时候傲气比天高，实习就只投递大厂。当初的我傻傻的以为去一些中小厂实习用处不太大，却没有撒泡尿照照自己几斤几两。当初了解到的企业也不是很多，只投了大概20+的大厂。果然没出意外，没几个面试机会，有也一面凉了。</p><p>当初可能也是脑子有点病，妄想进大厂实习然后转正。投递的全都是暑期实习，一个日常实习也没投。最终秋招落得一个没有相关开发岗位实习经验的下场。</p><p>找实习的结束是在<code>5.15</code>，这一天是学校的实习相关课程提交材料的最后一天。当初也像个憨批一样，没有考虑到七月中旬结束了这两个月的课程再去实习。还有另一个原因，也想去安全厂商看看做安全究竟如何。</p><p>当时学校给的实习单位有3个，选择安恒的原因是只有安恒有和cpp有点关系的实习岗位。（虽然实际上并没有关系）</p><p>整个学校的实习大概分为教学和实战两个阶段。教学阶段就是相关知识的学习；实战阶段是打靶场。然后中间给出了一个<code>重保项目</code>（其实就是HVV），参加了相关的护网，从出发到回家大概一个月的时间，相关的体验可以看另一篇文章。这期间也接触到了一些做安服、技服的人，了解到一些相关的消息，这个时候确定了：除了一些大厂的安全开发相关的岗位，大概是不会考虑网络安全相关的赛道了。</p><h3 id="秋招"><a href="#秋招" class="headerlink" title="秋招"></a>秋招</h3><p>六月底，学校实习课程的教学阶段结束。这个时候开始的投递一些cpp相关的岗位。刚开始的时候眼界还是有点高的，投递的是后端、软开之类的一些岗位，也都是一些比较大的厂。随着时间的推进逐渐的认清现实。又投递了一些<strong>QT客户端</strong>、<strong>嵌入式开发</strong>相关的岗位，关于企业的规模也没有那么多的要求了。（毕竟要没饭吃了）</p><p>7月参加护网，由于工作性质，时间比较阴间，没有办法在白天进行一些面试（要补觉），秋招基本就搁置了。</p><p>整个秋招大批量的笔面试集中在8、9月份，基本上每天都有1+笔面试。10月一共面试了不到10次，其中有一天就面试了4家，身心俱疲。整个秋招过程中有失望，有欣喜。一路摸爬滚打来到了11月底，整个秋招阶段基本接近尾声了，预期的薪资、预期的岗位、预期的企业降了一次又一次，最终也没有选择妥协。截止至写文的今日（十一月底），拿到的offer大概有：东软睿驰、经纬恒润、亚控科技。面试流程已结束，泡池子的大概有：比亚迪(9月底提交了资料审核就没开过奖)、中兴（9月底面完没等来所谓的offer签约会）、同花顺（国庆后一两天面完的HR面也还未开到奖）、华为（京津东北赛道9月底才开始笔试，十月底点亮完六盏灯入池）。想了想，我这一个下棋S6天天赏金，S7天天赌变形重组器的人，不赌一把有点不甘心。（还是已有的offer，薪资不符合预期）今天，拒了最后的保底offer，开启了漫长的泡池子之路，泡不出来就大概要春招了。</p><h3 id="春招"><a href="#春招" class="headerlink" title="春招"></a><del>春招</del></h3><p><del>赌狗一般是不会有好下场的，这个模块迟早要开，先占个坑。</del></p><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><ul><li>实习 — 一些较大的厂会有<code>3/6</code>个月的试用期用来培训及做一些简单的任务。对于一些愿意培训的大厂来说，可能实习经历不是那么重要。但是对很多中小厂来说，他们更希望要一个契合度高的、能直接上手的人。如果可以的话，尽早找实习，多找几段日常实习来丰富简历。（虽然很多实习工作并没做一些有意义的工作，但是<del>我猜</del>能让你理解到工程和学习、科研的一些区别）</li><li>八股  —  其实我觉得这是最无聊的部分，他并不能区分出一个应聘者的能力好坏（就看谁背书能力强），但是好多厂的面试会有很多的八股问题，回答不上来还不是很好。（关于八股问题的回答，我的建议是尽量的说的结巴一些，别说那么全。让他觉得是你的知识储备量大，而不是面试前背的面经）</li><li>反问环节  —  很多企业规定，这个阶段不能问面评的。但是我觉得这个阶段可能是我接触一些大厂一线开发人员的不多的机会之一，这个阶段我一般会问对相关岗位的理解及看法、面试官期望的应届生应该具有哪些素质、对职业生涯的建议（基本都会给你讲一些他当年的故事）</li><li>笔试  —  这东西是蛮恶心人的一个环节，因为笔试的结果并没有什么卵用，说这话您可能不信。笔试仅仅是因为HR忙不过来晒选那么多简历，做一个简单的初筛。（当然，雷火那个难度的笔试肯定是有参考价值的）这两个月接触了太多大厂笔试题不太难，九十多分进不了后续环节；一些中厂笔试交白卷照样捞面试（经历了这些让我觉得笔试真就是一个摆设）。</li><li>KPI面  —  这个东西是最恶心人的，而且很多演都不带演的，根据面试官的表现基本上能判断出来。比如某信服的主管面问完问题没有反问直接光速下播反手终止流程、某滴的面试反问环节问基础问题（这个岗位从事什么工作，在企业中属于什么地位）直接不告诉你。</li><li>学历不重要  —  换你是HR，个位数的hc、上万个候选人，你怎么快速的晒选简历。不否认学历证明不了一切，但那些高学历的也不是只有学历。</li></ul><p>最后，</p><blockquote><p>To you and your path, wherever it leads.</p></blockquote><p><img src="/%E6%B1%82%E8%81%8C/000.png" alt="000"></p><hr><h3 id="1224更新"><a href="#1224更新" class="headerlink" title="1224更新"></a>1224更新</h3><p>赌来了华子Offer，准备给华子卖命去了。</p><p>关于我的秋招的时间线及面经，需要自提。</p><table><thead><tr><th align="center">[<a href="https://www.aliyundrive.com/s/GoEqx5J8dGF">下载自解压文件</a>]</th><th align="center">[<a href="https://github.com/ikun7355608/AutumnRecruitment">github在线阅读</a>]</th></tr></thead></table><h3 id="0317更新"><a href="#0317更新" class="headerlink" title="0317更新"></a>0317更新</h3><p>本来20块到付的校招礼盒让我快变成黑粉了，今天突然收到了入职预约附带的机票报销邮件（经济舱、高铁动车一等座、火车软卧 和 市内交通），让我一下子又粉了起来。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了整个校招过程中走过的路及一些经验&lt;/p&gt;</summary>
    
    
    
    
    <category term="关于我" scheme="http://example.com/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
    <category term="社畜养成计划" scheme="http://example.com/tags/%E7%A4%BE%E7%95%9C%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>2022-09月度总结</title>
    <link href="http://example.com/2022-09%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022-09%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-28T09:03:41.000Z</published>
    <updated>2022-09-30T08:59:54.655Z</updated>
    
    <content type="html"><![CDATA[<p>这个模块已经很久没有更新了，秋招两个月<code>0offer</code>，笔试测评做到吐，面试没几个，面完就泡着。无聊之际，更新一下秋招两个月的历程。</p><blockquote><p>「可以说脏话吗，不可以吗？那我没什么好说的了。」</p></blockquote><span id="more"></span><blockquote><p>山高处看得远，风大雨也大。山脚下条条小路却满目鲜花<br>没有那么多轰轰烈烈与庸庸绿碌，来这世上走上一遭活的其实就是一个好心态。</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>整个秋招之旅大概开始于六月底，主要进行着C++基础语法、STL相关内容的深入学习。期间在七月初投了一部分简历，然后去参加护网，八月初回来之后开始疯狂投简历。截止至写这篇文章的时候，投了大概100份简历（80+19），感谢信以及官网流程终止的有36家，offer、意向仍然是0。</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>落得如此下场，是环境问题吗？显然，技不如人是真的。本身学安全出身，课程什么的也不会有大型开发的项目，实习也是偏向安全的。虽然有竞赛，但也和互联网没任何关系。在这个hc骤减的环境下，高契合度且有大厂实习的候选人都比hc要多，谁会去考虑一个<strong>没竞赛、没实习、没项目</strong>的<strong>半个科班</strong>的人？</p><p>是眼高手低吗？「<strong>北京</strong>、<strong>千人以上</strong>、<strong>税前20W</strong>」，问了些往届的学长学姐还有一些一起秋招的朋友，「北京、研发」月薪<code>15K</code>上下，虽然不是特别的低，但不至于「<code>100</code>份简历，<code>0offer</code>」吧。我觉得，一个酒吧舞应届生，就算非互联网、不加班的岗位，月薪也有八九千吧。不至于每天被自愿加班的厂都嫌多吧。再者，至今面试了大概二十次左右？好像除了明显的岗位不匹、KPI面外，基本上是没有挂过面试，大多面完疯狂排序泡池子。感觉，也不是能力不行、过不了面试。</p><p>感觉，似乎一路走来，似乎并没有错：认真对待每一门课，哪怕他再水也认真完成作业、准备考试，却落得这<code>0offer</code>的结果；似乎每一步都错了，也许大二结束开始每个寒暑假就该找实习去丰富简历，才会有些竞争力。第一次上大学、一切都靠自己摸索，从机械转安全再转开发，能走到这里感觉已经很不容易了。难道应该收到录取通知书时，就开始了转码之旅？</p><h3 id="心态"><a href="#心态" class="headerlink" title="心态"></a>心态</h3><blockquote><p>每天都在崩溃的边缘，又或者破防后再重建那并不明确的目标。</p></blockquote><p>刚开始的时候，觉得投递自动送测评、海笔的公司还不错，后来发现纯纯浪费时间。性格测评题都没变过，还不能点击过快。辛辛苦苦三四十分钟写完行测、性格测试的题，反手「简历初筛未通过」。</p><p>刚开始的时候确实眼高手低，看很多公司的风评后都觉得「狗都不去」，逐渐的演变为「狗不去，我去」</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>几个等待国庆节后的hr面的企业， 希望能有一个好结果。</p><p>累吗，累。想放弃吗，想。但有的选吗，没有。还能咋办，继续投继续面呗。</p><blockquote><p>我不后悔学、准备C++，只能怪技不如人。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个模块已经很久没有更新了，秋招两个月&lt;code&gt;0offer&lt;/code&gt;，笔试测评做到吐，面试没几个，面完就泡着。无聊之际，更新一下秋招两个月的历程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「可以说脏话吗，不可以吗？那我没什么好说的了。」&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="关于我" scheme="http://example.com/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>虚函数</title>
    <link href="http://example.com/%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/%E8%99%9A%E5%87%BD%E6%95%B0/</id>
    <published>2022-09-25T08:38:28.000Z</published>
    <updated>2022-09-30T08:54:19.722Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，动态多态是借助虚函数实现的，下面是关于虚函数的一些介绍。</p><span id="more"></span><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p>通俗来讲，虚函数是在编译时，并不能确定的类函数，而是在运行时确定的。<br>独特功能：<strong>基类对象访问派生类的函数</strong>。<br>步骤</p><ol><li>定义基类时，函数声明为虚（virtual）</li><li>派生类中，重写基类中定义为虚的函数。</li><li>声明基类指针指向派生类对象。调用虚函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          cout&lt;&lt;<span class="string">&quot;A::foo() is called&quot;</span>&lt;&lt;endl;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          cout&lt;&lt;<span class="string">&quot;B::foo() is called&quot;</span>&lt;&lt;endl;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A *a = <span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line">    a-&gt;<span class="built_in">foo</span>();   <span class="comment">// 在这里，a虽然是指向A的指针，但是被调用的函数(foo)却是B的!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>纯虚函数可使当前类变成<strong style="color:red;">抽象类</strong>，<mark>禁止该类被实例化</mark>，并要求其非抽象类的派生类<mark>必须重写</mark>该纯虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>定义纯虚函数时，不需要定义函数的实现部分。「= 0」 表明程序员将不定义该函数，函数声明是为派生类保留一个位置。「= 0」 的本质是将指向函数体的指针定为$nullptr$</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>类中一旦出现纯虚函数，就不可实例化了（抽象类）；</li><li>纯虚函数有函数体，但最终还是要被派生类重写，在派生类的函数中可以调用基类中有函数体的纯虚函数；</li><li>为使派生类能完全释放资源，基类析构函数必须声明为虚函数。否则，在用基类指针new一个派生类对象后，delete该指针就只能回收与基类相关的资源，造成内存泄漏；</li><li>纯虚析构函数必须要有函数体。</li></ol><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>存在纯虚函数的类，叫抽象类。</p><ol><li>抽象类不能用作参数类型、函数返回类型或显式转换的类型。</li><li>可以定义指向抽象类的指针和引用，此指针可以指向它的派生类，进而实现多态性。</li><li>抽象类只能用作其他类的基类，不能建立抽象类对象。</li></ol><h3 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h3><p>对象创建时,编译器对<code>vptr</code>进行初始化，只有当对象构造完全结束后<code>vptr</code>的指向才最终确定。<br>使用虚函数时，对象会多出4字节的虚指针，指针指向类的虚函数表。<strong>对象不包含虚函数表，只有虚指针，类才包含虚函数表。</strong><br>虚表中的指针顺序，取决于类中虚函数的<strong style="color:rgb(0, 191, 166);">声明顺序</strong>。<br>虚函数表在实例化对象创建时创建。</p><h3 id="虚指针-amp-虚表"><a href="#虚指针-amp-虚表" class="headerlink" title="虚指针&amp;虚表"></a>虚指针&amp;虚表</h3><p>vptr &amp; vtbl。只要类中有虚函数，类对象内部就会有出现<mark>一个</mark>指针。虚指针用来指向虚表中的<mark>函数指针</mark>指向虚函数的地址。未重写的虚函数，基类和派生类共用。重写了的，各自虚表中指向重写后的地址。<br>通过指针，向上转型，指向虚函数。<code>(*p-&gt;vptr[n])(p)</code></p><h3 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h3><blockquote><p>动态分配堆上内存的时候，析构函数必须是虚函数。</p></blockquote><p>动态的去分配堆区的空间时，无法在程序运行结束自动释放内存。若基类指针指向派生类，然后基类指针调用delete方法，只能释放基类的内存，进而导致内存泄露。<br>析构函数定义成虚函数，基类指针调用delete方法，会先调用派生类的析构函数，然后自动调用基类的析构函数。</p><blockquote><p>友元函数不能为虚函数</p></blockquote><p>友元函数，<mark>不属于</mark>这个类的成员函数。而且虚函数的目的是通过基类对象访问派生类实现的函数，友元函数不是不是成员函数，更无继承关系。</p><blockquote><p>多继承</p></blockquote><p>多继承下有多个虚表。多个基类之间（类内部按声明顺序）的虚函数，按照继承的顺序，存放虚函数指针。<br>虚函数表中，派生类<mark>重写</mark>的虚函数<strong style="color:orange;">替换了基类虚函数指针</strong>，并指向了派生类的函数实现。</p><blockquote><p>哪些函数不支持声明为虚函数</p></blockquote><p>非成员函数、静态成员函数、内联成员函数、构造函数、友元函数。</p><ul><li>非成员函数：非成员函数只能重载，不能重写。编译器会在编译时绑定函数。</li><li>构造函数：构造函数用来创建一个新的对象,而虚函数的运行是建立在对象的基础上,在构造函数执行时,对象尚未形成,所以不能将构造函数定义为虚函数。</li><li>内联函数：内联函数就是为了在代码中直接展开，减少函数调用花费的代价，虚函数是为了在继承后对象能够准确的执行自己的动作，这是不可能统一的。</li><li>静态成员函数： 静态成员函数对于每个类来说只有一份代码，所有的对象都共享这一份代码，他也没有要动态绑定的必要性。</li><li>友元函数： C++不支持友元函数的继承，对于没有继承特性的函数没有虚函数的说法。</li></ul><blockquote><p>为什么构造函数调用虚函数不能实现多态？</p></blockquote><p>子类构造函数要先调用父类构造函数，虚函数实现重载靠的是动态绑定。<br>如果构造函数中的虚函数为动态绑定(多态)，则子类在构造时，子类的构造函数先调用父类构造函数，而此时父类构造函数不能调用子类的重载函数（子类还未创建，没有虚表。）</p><blockquote><p>怎么通过虚函数实现的多态？(内存、寻址等)</p></blockquote><p>通过对象内存中的vptr找到虚函数表vtbl，接着通过vtbl找到对应虚函数的实现区域并进行调用。<br>类的成员函数存在于<code>.text segment</code>段，为类的所有对象公有。(不管创建多少个对象)成员变量存在于<code>.stack/.heap</code>中供类对象独有。<br>含有虚函数的类对象除了存储成员变量外，还存储一个虚指针<code>vptr</code>，这个虚指针指向一张虚表<code>vtbl</code>。<code>vtbl</code>中存的数据为<strong>函数指针</strong>，存储着虚函数调用的具体函数所在的地址。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们知道，动态多态是借助虚函数实现的，下面是关于虚函数的一些介绍。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CPP" scheme="http://example.com/tags/CPP/"/>
    
    <category term="八股" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>TCP连接的建立与断开</title>
    <link href="http://example.com/TCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E6%96%AD%E5%BC%80/"/>
    <id>http://example.com/TCP%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E4%B8%8E%E6%96%AD%E5%BC%80/</id>
    <published>2022-09-20T06:41:57.000Z</published>
    <updated>2022-09-20T06:46:29.566Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是「三次握手与四次挥手」相关的一些问题</p><span id="more"></span><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ul><li>初始，客户端处于<code>close</code>状态，服务器处于<code>listen</code>状态</li><li>第一次握手  —  客户端向服务器端发送一个<code>SYN</code>位，切换状态至<code>SYN_SENT</code>。</li><li>第二次握手  —  服务器收到<code>SYN</code>报文，向客户端回一个确认报文<code>ACK</code>，切换状态至<code>SYN_REVD</code>；同时，发送自己的<code>SYN</code>报文进行应答。</li><li>第三次握手  —  客户端收到<code>SYN</code>报文后，发送<code>ACK</code>报文给服务器。同时，自身状态切换至<code>established</code></li><li>服务器端收到<code>ACK</code>报文后，切换自身状态为<code>established</code></li></ul><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ul><li>客户端、服务器都处于<code>established</code>状态，进行数据传输。</li><li>第一次挥手  —  客户端发送一个<code>FIN</code>位，表示不再发送请求。同时，状态切换至<code>FIN_WAIT_1</code></li><li>第二次挥手  —  服务器收到客户端的结束请求，发送一个<code>ACK</code>位，表示已收到客户端报文。同时，服务器切换状态为<code>CLOSE_WAIT</code></li><li>客户端收到第二次挥手的报文后，切换自身状态为<code>FIN_WAIT_2</code></li><li>第三次挥手  —  服务器传完数据后，向客户端发送结束报文<code>FIN</code>位，进入<code>LAST_ACK</code>状态。</li><li>第四次挥手  —  客户端收到报文后，发送<code>ACK</code>进行应答。同时切换自身状态为<code>TIME_WAIT</code></li><li>服务器收到<code>ACK</code>报文后，关闭连接。切换为<code>CLOSE</code>状态</li><li>客户端在发送第四次握手后等待<code>2MSL</code>切换为<code>CLOSE</code>状态，关闭连接。</li></ul><h3 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h3><h4 id="为什么握手三次"><a href="#为什么握手三次" class="headerlink" title="为什么握手三次"></a>为什么握手三次</h4><blockquote><p>确认双方都能发送、接收数据。</p></blockquote><ul><li>第一次握手  —  服务器端知道客户端可以发送数据</li><li>第二次握手  —  客户端知道服务器端可以发送数据、可以接受数据。</li><li>第三次握手  — 服务器端知道客户端可以接收数据</li></ul><h4 id="FYN泛洪"><a href="#FYN泛洪" class="headerlink" title="FYN泛洪"></a>FYN泛洪</h4><p>利用三次握手的特性，攻击者疯狂发送第一次握手的数据包，收到服务器第二次握手数据包后，并<strong>不会回</strong>第三次握手数据包。服务器收不到相应的ACK位一直重发第二次握手的数据包，最终导致服务器资源耗尽。</p><h4 id="SYN-Cookie"><a href="#SYN-Cookie" class="headerlink" title="SYN Cookie"></a>SYN Cookie</h4><p>为了防止服务器拥有过多上述的半连接状态，在服务器收到第一次握手的数据后，并不会分配资源。而是利用客户端的<code>SYN</code>值计算一个<code>Cookie</code>保存在第二次握手的报文中，返回给客户端，等服务器收到第三次握手的数据包后，根据<code>Cookie</code>值检查报文的合法性。如果合法再分配资源</p><h4 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h4><blockquote><p>防止第四次挥手丢包。</p></blockquote><p>如果客户端发送完第四次挥手数据后，直接切换至<code>CLOSE</code>状态，第四次挥手数据包丢包时，服务器超时重传第三次挥手数据包。此时如果有新的TCP连接重启这个地址信息的话，处于三次握手阶段，客户端发起的是<code>SYN</code>请求，而服务器所等待的是<code>ACK</code>应答。此时会导致发送<code>RST</code>重建连接。</p><h4 id="2MSL"><a href="#2MSL" class="headerlink" title="2MSL"></a>2MSL</h4><p>在<code>TIME_WAIT</code>防止丢包时，客户端从<code>TIME_WAIT</code>切换至<code>CLOSE</code>需要等待<code>2MSL</code></p><blockquote><p>MSL  报文的最大生存时间</p></blockquote><p>如果第三次挥手的包丢包，则第三次挥手从发送到重发，经过<code>2MSL</code>，此时对于客户端来说，已经过去的时间小于等于<code>1MSL</code>（发送第四次挥手数据包，过程中丢包），而后接收到重发的第三次握手数据包的时间小于等于<code>1MSL</code>。即，客户端等待<code>2MSL</code>未收到<code>FIN</code>（第三次挥手）则能够确认服务器已经收到第四次挥手数据包。</p><p>此外，经过<code>2MSL</code>后，与该次连接相关的所有报文，都会超过生命周期。防止提前关闭客户端时，部分报文还存活，从而影响新的连接。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是「三次握手与四次挥手」相关的一些问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="八股" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1/"/>
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>图算法</title>
    <link href="http://example.com/%E5%9B%BE%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/%E5%9B%BE%E7%AE%97%E6%B3%95/</id>
    <published>2022-09-12T00:42:30.000Z</published>
    <updated>2022-11-09T02:02:08.073Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<code>Floyd、Dijkstra、Prim</code>等图算法的代码实现</p><span id="more"></span><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; graph[MAX];</span><br><span class="line"><span class="keyword">int</span> v, e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 顶点数，边数</span></span><br><span class="line">    cin &gt;&gt; v &gt;&gt; e;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; ++i ) &#123;</span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">int</span> from;</span><br><span class="line">        <span class="keyword">int</span> cost;</span><br><span class="line">        cin &gt;&gt; from &gt;&gt; to &gt;&gt; cost;</span><br><span class="line">        graph[from].<span class="built_in">push_back</span>(&#123;to, cost&#125;);</span><br><span class="line">        <span class="comment">// 有向图，则是单向 没有to--&gt;from链路</span></span><br><span class="line">        graph[to].<span class="built_in">push_back</span>(&#123;from, cost&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">graph</span>(MAX, vector&lt;<span class="keyword">int</span>&gt;(MAX, INF));</span><br><span class="line"><span class="keyword">int</span> v, e;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; v &gt;&gt; e;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e; ++i) &#123;</span><br><span class="line">        <span class="comment">// 对角线初始化</span></span><br><span class="line">        graph[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> to,</span><br><span class="line">            from,</span><br><span class="line">            cost;</span><br><span class="line">        cin &gt;&gt; from &gt;&gt; to &gt;&gt; cost;</span><br><span class="line">        graph[from][to] = cost;</span><br><span class="line">        <span class="comment">// 有向图 </span></span><br><span class="line">        graph[to][from] = cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h3><p>Floyd算法的核心在于</p><ul><li>想求<code>start ===&gt; finish</code>的最小距离</li><li>考虑借助中间节点<code>k</code>来实现<code>start ===&gt; k ===&gt; finish</code>间接抵达</li><li>此时<code>cost[start][finish] = cost[start][k] + cost[k][finish]</code>（<code>cost[i][j]</code>以表示<code>i ===&gt; j</code>的花费）</li><li>遍历所有节点，找出最小权值和</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//graph：邻接矩阵</span></span><br><span class="line"><span class="comment">// INF：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; v; ++k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v;++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v;++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(graph[i][k] &lt; INF &amp;&amp; graph[k][j] &lt; INF) &#123; <span class="comment">//节点均畅通</span></span><br><span class="line">                    graph[i][j] = <span class="built_in">min</span>(graph[i][j], graph[i][k] + graph[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><p>Dijkstra算法的核心是贪心</p><ul><li>想求<code>start ===&gt; finish</code>的最小距离</li><li>从<code>start</code>开始，考虑剩余（未到达）的可达节点中最小花费。</li><li>最小花费点作为下一个节点，更新花费表。</li><li>依次寻找最小花费，直至抵达目标点</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">      0     1     2     3</span><br><span class="line">   -------------------------</span><br><span class="line">  0|<span class="string">  0  </span>|<span class="string">  2  </span>|<span class="string">  6  </span>|<span class="string">  4  </span>|</span><br><span class="line">   |<span class="string">     </span>|<span class="string">     </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line">  1|<span class="string"> INF </span>|<span class="string">  0  </span>|<span class="string">  3  </span>|<span class="string"> INF </span>|</span><br><span class="line">   |<span class="string">     </span>|<span class="string">     </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line">  2|<span class="string">  7  </span>|<span class="string"> INF </span>|<span class="string">  0  </span>|<span class="string">  1  </span>|</span><br><span class="line">   |<span class="string">     </span>|<span class="string">     </span>|<span class="string">     </span>|<span class="string">     </span>|</span><br><span class="line">  3|<span class="string">  5  </span>|<span class="string"> INF </span>|<span class="string">  9  </span>|<span class="string">  0  </span>|</span><br><span class="line">   -------------------------</span><br><span class="line">从0号节点开始，此时达到其余各点的花费</span><br><span class="line">dist = [0, 2, 6, 4]</span><br><span class="line">此时1、2、3节点均未达，1节点花费最小 前往1节点</span><br><span class="line">dist = [0, 2, 5, 4]</span><br><span class="line">借助1节点到达2节点比直接到达2节点花费小，更新距离表</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//graph：邻接矩阵</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">Dijkstr_visited</span><span class="params">(MAX, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">Dijkstra_dist</span><span class="params">(MAX, INF)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start = val;</span><br><span class="line">    Dijkstr_visited[start] = <span class="literal">true</span>; <span class="comment">//到达过</span></span><br><span class="line">    Dijkstra_dist = graph[start];      <span class="comment">//初始化为初始行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = INF; <span class="comment">//最近点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Dijkstr_visited[j] &amp;&amp; Dijkstra_dist[j] &lt; tmp) &#123; <span class="comment">//未访问过，最小值</span></span><br><span class="line">                start = j;<span class="comment">//下次访问这个数组</span></span><br><span class="line">                tmp = Dijkstra_dist[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Dijkstr_visited[start] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v; ++j) &#123;</span><br><span class="line">            Dijkstra_dist[j] = <span class="built_in">min</span>(Dijkstra_dist[j], Dijkstra_dist[start] + graph[start][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><p>Prim算法的核心在于</p><ul><li>选择一个节点（生成树内部）开始，考虑到达其他节点的最小花费</li><li>寻找未抵达节点中最小花费（生成树外的节点），将该路径及点加入生成树内</li><li>遍历所有节点，直至全部节点加入生成树</li></ul><blockquote><p>在保证不成环的基础下，依次寻找抵达生成树外节点的最小花费</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * graph：邻接矩阵</span></span><br><span class="line"><span class="comment"> * visited：存放节点是否访问过（最小生成树内部，外部）</span></span><br><span class="line"><span class="comment"> * lowcost：用于寻找靠近角标点的最小权值（扩展）</span></span><br><span class="line"><span class="comment"> * closecost：保存最靠近角标点的元素</span></span><br><span class="line"><span class="comment"> * lowcost[i]：closecost[i]是一对。</span></span><br><span class="line"><span class="comment"> * ***/</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">bool</span>&gt; <span class="title">Prim_visited</span><span class="params">(MAX, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">Prim_lowcost</span><span class="params">(MAX, INF)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">Prim_closecost</span><span class="params">(MAX, INF)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 初始化为从0节点开始</span></span><br><span class="line">    Prim_visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    Prim_lowcost = graph[<span class="number">0</span>];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;0 ----&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v;++i) &#123;</span><br><span class="line">        <span class="comment">// 最小权值，对应的角标</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">-1</span>,</span><br><span class="line">            tmp = INF;</span><br><span class="line">        <span class="comment">// 寻找lowcost的最小值（下一个目标）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; v; ++j) &#123;   <span class="comment">//0已经访问过了 visited[0]一定不成立 故从1开始</span></span><br><span class="line">            <span class="keyword">if</span> (!Prim_visited[j] &amp;&amp; Prim_lowcost[j] &lt; tmp) &#123;</span><br><span class="line">                index = j;</span><br><span class="line">                tmp = Prim_lowcost[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不可达</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;cost:&quot;</span> &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//找不到节点 不可达</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; index &lt;&lt; <span class="string">&quot; ----&gt;&quot;</span>;</span><br><span class="line">        Prim_visited[index] = <span class="literal">true</span>;</span><br><span class="line">        res += Prim_lowcost[index];</span><br><span class="line">        <span class="comment">// 更新最小权值表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; v;++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Prim_visited[j] &amp;&amp; graph[index][j] != INF &amp;&amp; graph[index][j] &lt; Prim_lowcost[j]) &#123;</span><br><span class="line">                Prim_lowcost[j] = graph[index][j];</span><br><span class="line">                Prim_closecost[j] = index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;code&gt;Floyd、Dijkstra、Prim&lt;/code&gt;等图算法的代码实现&lt;/p&gt;</summary>
    
    
    
    
    <category term="代码" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>力扣二叉树</title>
    <link href="http://example.com/%E5%8A%9B%E6%89%A3%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/%E5%8A%9B%E6%89%A3%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2022-09-11T08:03:45.000Z</published>
    <updated>2022-09-11T08:18:16.176Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是介绍力扣二叉树的构造</p><p>即，从<code>[x, x, x, x, x]</code>为层序遍历的结果来构造一颗二叉树</p><span id="more"></span><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><p>树节点数据结构包括  —  值、左指针、右指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据结构定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> val) : <span class="built_in">val</span>(val), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> val, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(val), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right)&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="力扣输入形式构造数组"><a href="#力扣输入形式构造数组" class="headerlink" title="力扣输入形式构造数组"></a>力扣输入形式构造数组</h3><p>根据<code>[x, x, x, x, x]</code>的形式创建数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line"><span class="built_in">getline</span>(cin, str);</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ch:str) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        val = val * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;,&#x27;</span> || ch == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(val);</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用层序遍历结果建树"><a href="#用层序遍历结果建树" class="headerlink" title="用层序遍历结果建树"></a>用层序遍历结果建树</h3><p>根据树用数组表示的特点（根节点角标与左右子树角标的关系）来递归构造二叉树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建树</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">CreateTree</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= nums.<span class="built_in">size</span>() || nums[index] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[index]);</span><br><span class="line">    node-&gt;left = <span class="built_in">CreateTree</span>(nums, <span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">    node-&gt;right = <span class="built_in">CreateTree</span>(nums, <span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>层序遍历，验证与输入是否一致</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">printTree</span><span class="params">(TreeNode * root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    queue&lt;TreeNode *&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        TreeNode *node = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        temp.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteTree</span><span class="params">(TreeNode * root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 数据结构定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> val) : <span class="built_in">val</span>(val), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> val, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(val), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 建树</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">CreateTree</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= nums.<span class="built_in">size</span>() || nums[index] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[index]);</span><br><span class="line">    node-&gt;left = <span class="built_in">CreateTree</span>(nums, <span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">    node-&gt;right = <span class="built_in">CreateTree</span>(nums, <span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteTree</span><span class="params">(TreeNode * root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">printTree</span><span class="params">(TreeNode * root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    queue&lt;TreeNode *&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        TreeNode *node = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        temp.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ch:str) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            val = val * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;,&#x27;</span> || ch == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            vec.<span class="built_in">push_back</span>(val);</span><br><span class="line">            val = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *root = <span class="built_in">CreateTree</span>(vec, <span class="number">0</span>);</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    res = <span class="built_in">printTree</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        cout &lt;&lt; res[i];</span><br><span class="line">        <span class="keyword">if</span>(i != res.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要是介绍力扣二叉树的构造&lt;/p&gt;
&lt;p&gt;即，从&lt;code&gt;[x, x, x, x, x]&lt;/code&gt;为层序遍历的结果来构造一颗二叉树&lt;/p&gt;</summary>
    
    
    
    
    <category term="代码" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>海量数据问题</title>
    <link href="http://example.com/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</id>
    <published>2022-09-11T08:00:46.000Z</published>
    <updated>2022-11-09T02:01:22.110Z</updated>
    
    <content type="html"><![CDATA[<p>高频八股之海量数据问题 </p><blockquote><p>本文参考自<a href="https://blog.csdn.net/v_JULY_v/article/details/7382693">教你如何迅速秒杀掉：99%的海量数据面试题</a></p></blockquote><span id="more"></span><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>数据量过大，而内存空间不足或短时间内无法迅速求解的问题</p><ul><li>内存空间不足  —  分治，存入多个小文件中操作</li><li>短时间不可解  —  数据结构+算法</li></ul><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p><code>分治  ===&gt;  hash  ===&gt;  求解子问题  ===&gt;  归并</code></p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><blockquote><p>现有海量日志数据，要提取出某日访问百度次数最多的那个IPv4地址<br>内存空间有限，不足以全部加载。</p></blockquote><ul><li>分治  —  IP地址范围<code>0.0.0.0 --- 255.255.255.255</code>共$2^{32}$个，根据其规律将其按地址划分(类似子网划分，在此根据掩码来划分为多个文件，以$2^8$为例，划分到$2^8$个子文件中，每个文件$2^{24} = 16M$个不同的IP地址)</li><li>hash  —  将<code>unsigned int32</code>类型的IP地址，做<code>hash(IP)%256</code>处理，划分到256个子文件中(哈希函数一定，某特定IP的多次计算得到的值一定相同，一定在同一个文件)</li><li>求解子问题  —  所求问题为最大值，如果我们对每个子问题（子文件）求最大值，则全局最大值一定在这些子问题最大值中。对每个小文件构建map，统计出现次数的最大值。</li><li>归并  —  得到多个子文件中的最大值（局部最优解）进行比较，得到全局最优解。$ File_i{Max} &gt; File_{else}Max &gt; File_{else}else$（子文件最大值中的最值 &gt; 其他子文件的最值 &gt; 其他子文件所有值）</li></ul><blockquote><p>有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，返回频数最高的100个词。<br>内存限制大小1M</p></blockquote><p>解题思路与上述基本相同，此外</p><ul><li>内存限制为1M，则至少需要<code>1G/1M = 1024</code>个文件(考虑分布不均，应至少为4、5倍，合理即可)</li><li>由于返回的是最大的100个词，同样防止分布不均（高频词都在一个文件），应每个子文件都要求<code>TOP100</code></li><li>如若子文件划分过多，每个的TOP100在内存中放不下（无法直接排序）可以：<ul><li>重复上述步骤</li><li>维持一个堆，记录高频词及出现次数。依次读不同文件来维持这个堆。</li></ul></li></ul><blockquote><p>海量数据分布在100台电脑中，想个办法高效统计出这批数据的TOP10。<br>海量数据中找出重复次数最多的一个<br>上千万或上亿数据（有重复），统计其中出现次数最多的前N个数据。</p></blockquote><p>同上</p><blockquote><p>给定a、b两个文件，各存放50亿个url，每个url各占64字节，找出a、b文件共同的url。<br>内存限制是4G</p></blockquote><ul><li>分治  —  $2^8\times 5G = 5\times2^{40} = 320G &gt; 4G$，将文件划分到多个子文件中（防止分布不均应多划分几个区间，如500个）</li><li>hash  —  文件a、b分别<code>hash(url)%500</code>存入各自子文件中（采用相同的hash函数，则相同的url存在于同一类子文件，如某url在a的子文件$a_{13}$中，则如果b中也有,则一定在$b_{13}$中）</li><li>求解子问题  —  分别读子文件$a_i\qquad b_i$，对比hash值得到相同url（如先将$a_i$中的值存入hash表，然后遍历$b_i$中的值和hash表比对，相同则存在重复元素）</li><li>归并</li></ul><blockquote><p>2.5亿个整数中找出不重复的整数的个数，内存空间不足以容纳这2.5亿个整数。</p></blockquote><ul><li>方案1  —  上述解决方案仍可行。</li><li>方案2  —  <code>bitmap</code> <ul><li>观察要求，数据分为三类：没出现过、出现一次（所求）、出现多次。我们可以用<code>2bit</code>来反应其出现情况，<code>00 ===&gt;没出现过  01 ===&gt; 出现1次  10 ===&gt; 出现多次</code></li><li>我们只需要人为规定一种映射来对应其关系即可，无需存储具体数字。由于，我们可以用2bit来表示出现情况，则1Bytes大小我们可以表示四个数字的出现情况。比如<code>100</code>即第<code>[100/4]</code>Bytes的第<code>[100%4 * 2]</code>和 <code>[100%4  * 2 + 1]</code>两位。利用<code>移位</code>及<code>&amp;</code>操作即可得到其值。（<code>bitmap[25] &gt;&gt; 6</code>）</li><li>理论原值存储使用空间<code>0.25G*4Bytes = 1GB</code>，实际使用空间<code>0.25G * 2bit = 64MB</code></li></ul></li></ul><blockquote><p>5亿个int型整数，找中位数</p></blockquote><p>按照前面的方案，我们可以将这些数据划分为多个子区域，然后再去寻找中位数。关于<strong>如何划分子区域</strong>，还能够让其保持一个相对顺序：</p><ul><li><p>首先，我们判断最高位，根据最高位为<code>1 or 0</code>可以分为两个子数组</p></li><li><p>再此基础上判断次高位为<code>1 or 0</code>再次划分</p></li><li><p>至此，我们有4个区间<code>0b11XXXXX  0b10XXXXX  0b01XXXXX  0b00XXXXX</code>，分组间的大小关系显而易见。</p></li><li><p>借此思路，我们可以直接根据前<code>X</code>位的值，将其划分为$2^X$个子文件，然后根据中位数（第K顺序统计量）所在的角标来判断其应该处于哪个子文件，然后在子文件中去排序、查找。</p></li></ul><blockquote><p>给40亿个不重复的unsigned int的整数，没排过序的，然后再给一个数，如何快速判断这个数是否在那40亿个数当中</p></blockquote><ul><li>方案1  —  上述<code>bitmap</code>方案，每个数字仅需要一位即可（只需判断存在不存在）</li><li>方案2  —  上述子区域划分方案</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;高频八股之海量数据问题 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文参考自&lt;a href=&quot;https://blog.csdn.net/v_JULY_v/article/details/7382693&quot;&gt;教你如何迅速秒杀掉：99%的海量数据面试题&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="八股" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>static</title>
    <link href="http://example.com/static/"/>
    <id>http://example.com/static/</id>
    <published>2022-09-07T08:59:23.000Z</published>
    <updated>2022-09-07T09:00:44.836Z</updated>
    
    <content type="html"><![CDATA[<p><code>static</code>关键字相关知识点</p><span id="more"></span><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>函数内部定义的变量，当程序执行到它的定义处时，编译器为它在栈上分配空间，函数执行结束时会释放掉他的内存。为保持变量的持久性，我们可以声明其为全局变量、全局函数。但全局函数又破坏了变量的访问范围，为了控制变量的存储方式和可见性，引入<code>static</code>关键字。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>修饰局部变量  —  延长生命周期</li></ol><p>局部变量一般创建在栈区，将其声明为<code>static</code>会导致变量创建在全局区。全局区的变量只会在程序运行前初始化一次，其生命周期会一直延续到整个程序执行结束。</p><blockquote><p>生命周期以及存储空间发生了变化，但其作用域并没变。</p></blockquote><ol start="2"><li>修饰全局变量、函数  —  信息隐藏，对其他文件不可见。</li></ol><p>当同时编译多个文件时，所有未加 static 前缀的全局变量和函数都具有全局可见性。（可被其他文件访问）</p><p>声明为<code>static</code>后，该变量/函数仅在该文件中可见，不能被其他文件访问。</p><blockquote><p>同一工程下，不能被其他文件引用；文件外可定义同名变量/函数。</p></blockquote><ol start="3"><li>修饰类成员</li></ol><p>被<code>static</code>修饰的类成员函数、类成员变量，统一属于类的静态资源，是类实例之间共享的，不是属于此类的任何特定对象。</p><p>静态非常量数据成员在类内仅声明，只能在类外定义和初始化。</p><p><code>static</code>函数不接受<code>this</code>指针只能访问类的 <code>static </code>成员变量。(因为不属于某个具体对象)</p><blockquote><p>static 成员函数不能被 virtual 修饰(同样，因为不属于具体的某个对象)<br>虚函数的重写是通过每个对象内的虚指针去调用，而虚指针调用需要用到<code>this</code>。(<code>this</code>指针 –&gt; <code>vptr</code> –&gt;<code>vtable</code> –&gt; <code>virtual function</code>)</p></blockquote><blockquote><p>静态成员函数中不能引用非静态成员。类的非静态成员函数可以调用用静态成员函数。<br>静态的资源属于类，并没有实例化对象，没办法知道该类具体有哪些非静态的资源。而对象创建时，类有哪些成员是已知的，均可访问。</p></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化只有一次，但是可以多次赋值，在主程序之前，编译器已经为其分配好了内存。</p><blockquote><p>在静态数据区，内存中所有的字节默认值都是 <code>0x00</code>，可以不用人为的初始化。</p></blockquote><p>在 C++中，初始化时在<strong>执行相关代码时才会进行初始化</strong>，主要是由于 C++引入对象后，要进行初始化必须执行相应构造函数和析构函数，在构造函数或析构函数中经常会需要进行某些程序中需要进行的特定操作，并非简单地分配内存。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;static&lt;/code&gt;关键字相关知识点&lt;/p&gt;</summary>
    
    
    
    
    <category term="CPP" scheme="http://example.com/tags/CPP/"/>
    
    <category term="八股" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>内存分区</title>
    <link href="http://example.com/%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/"/>
    <id>http://example.com/%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA/</id>
    <published>2022-09-05T08:25:22.000Z</published>
    <updated>2022-12-04T05:07:09.075Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于笔试时遇到的简答题「内存空间分为哪几类」以及面试时遇到的问题「用户态/内核态，了解多少」</p><span id="more"></span><h3 id="Kernal-Space"><a href="#Kernal-Space" class="headerlink" title="Kernal Space"></a><code>Kernal Space</code></h3><p>内核空间。由于开发和维护内核的复杂性，只有最重要的和最关键的代码放置在内核中。其他内容通常是作为用户空间应用程序编程的。（避免一些敏感操作）</p><h3 id="User-Space"><a href="#User-Space" class="headerlink" title="User Space"></a><code>User Space</code></h3><blockquote><p>用户态的程序不能随意操作内核空间，这样对操作系统具有一定的安全保护作用。</p></blockquote><p>用户空间从高地址到低地址依次分为如下五个区：</p><h4 id="stack"><a href="#stack" class="headerlink" title=".stack"></a><code>.stack</code></h4><p>栈区。<strong>编译器</strong>在需要的时候分配，不需要时自动清除的变量所在的储存区。</p><ul><li>由编译器自动管理</li><li>程序运行时分配内存</li><li>使用效率高、但空间有限。</li><li>从高地址向低地址扩展，内存连续。</li><li>先进后出</li><li>存放：函数的入口参数、局部变量等</li></ul><h4 id="heap"><a href="#heap" class="headerlink" title=".heap"></a><code>.heap</code></h4><p>堆区。由程序员手动分配释放的储存区。忘记释放会造成内存泄漏。</p><ul><li>程序员手动管理(手动申请、释放)</li><li>程序运行时分配内存</li><li>空间大，可以是不连续的。</li><li>从低地址向高地址扩展</li><li>先进先出</li><li><code>malloc、realloc</code>等开辟的空间即堆区的空间</li></ul><h4 id="bss-segment"><a href="#bss-segment" class="headerlink" title=".bss segment"></a><code>.bss segment</code></h4><p>全局/静态区。用来存放全局变量、静态变量的区域；当程序运行结束后由系统释放。</p><ul><li>由编译器自动管理</li><li>编译时分配内存</li><li>存放全局变量、静态变量</li></ul><h4 id="data-segment"><a href="#data-segment" class="headerlink" title=".data segment"></a><code>.data segment</code></h4><p>常量区。用来存放字符串字面量、<code>const</code>修饰的全局变量、静态变量。</p><ul><li>由编译器自动管理</li><li>编译时分配内存</li><li>存放<code>const</code>全局变量、<code>const</code>静态变量、字符串字面量。</li></ul><h4 id="text-segment"><a href="#text-segment" class="headerlink" title=".text segment"></a><code>.text segment</code></h4><p>代码区。用于存放CPU指令</p><ul><li>由编译器自动管理</li><li>编译时分配内存</li><li>存放CPU指令</li></ul><h3 id="用户态-内核态"><a href="#用户态-内核态" class="headerlink" title="用户态/内核态"></a>用户态/内核态</h3><blockquote><p>用户态  —  进程运行在用户空间<br>内核态  —  进程运行在内核空间</p></blockquote><p>在<strong>内核态</strong>下，CPU 可以<strong>执行任何指令</strong>。运行的<strong>代码也不受任何的限制</strong>，可以<strong>自由地访问任何有效地址</strong>，也可以直接进行端口的访问。</p><p>在用户态下，被执行的代码要受到 CPU 的很多检查。</p><h4 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h4><p>磁盘上文件的读写、内存空间的分配、网络接口读写数据等，都是在内核态完成的。平时使用时，借助操作系统提供的<strong>系统调用接口</strong>来进行使用。</p><blockquote><p>应用程序读取文件大致步骤</p></blockquote><ol><li>应用程序向内核发起系统调用，将进程从用户态切换为内核态。</li><li>CPU把数据读取到内核空间</li><li>数据拷贝到用户空间，并将进程切换为用户态。</li><li>应用程序得到相应的数据，执行其他命令。</li></ol><p>库函数、Shell指令等就是利用操作系统提供的调用接口来实现用户态的程序向操作系统申请更高权限的服务。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文基于笔试时遇到的简答题「内存空间分为哪几类」以及面试时遇到的问题「用户态/内核态，了解多少」&lt;/p&gt;</summary>
    
    
    
    
    <category term="八股" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>线程同步</title>
    <link href="http://example.com/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <id>http://example.com/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</id>
    <published>2022-08-24T14:15:25.000Z</published>
    <updated>2022-08-24T14:15:59.518Z</updated>
    
    <content type="html"><![CDATA[<p>程序执行结果依赖于不同线程执行的先后顺序，那么就会形成「竞争条件」，由于竞争条件下计算结果是非预期的，因此我们应该尽量避免竞争条件的形成。</p><p>解决竞争条件的方式，除原子操作外，还有线程同步。</p><span id="more"></span><h3 id="同步-amp-amp-互斥"><a href="#同步-amp-amp-互斥" class="headerlink" title="同步 &amp;&amp; 互斥"></a>同步 &amp;&amp; 互斥</h3><p>多个线程之间协调同步，按照预定的先后次序进行运行（非同时）</p><p>对于线程共享的线程资源，在各个线程访问时具有排它性。当有若干个线程要访问同一共享资源时，任何时刻只允许一个线程进行访问，直到占有资源者放弃使用该资源。</p><h3 id="同步方式"><a href="#同步方式" class="headerlink" title="同步方式"></a>同步方式</h3><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p>每个线程在对共享资源操作前都会尝试先加锁，加锁成功才能操作，操作结束之后解锁。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>当线程抢互斥锁失败的时候，线程会陷入休眠。</li><li>节省CPU资源，消耗等待时间</li></ul><h4 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h4><p>条件变量用来锁定一个线程，直到某个特殊的条件发生才继续执行。</p><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><ul><li>创建条件变量</li><li>某线程因等待条件变量成立而挂起</li><li>一段时间后，另一个线程激活了条件变量</li><li>条件变量清楚，线程继续执行。</li></ul><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p>信号量，分匿名信号量和命名信号量。</p><ul><li><p>临界资源  —  同一时刻只允许一个线程（或进程）访问的资源</p></li><li><p>临界区  —  访问临界资源的代码段。</p></li><li><p>P操作  —  申请资源 </p></li><li><p>V操作  —  释放资源</p></li></ul><blockquote><p>信号量允许多个线程同时进入临界区，而互斥量只允许一个线程进入临界区。</p></blockquote><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p>读写锁和互斥锁类似，但允许更高的并行性，有一定的性能提升。</p><p>一次只有一个线程可以占有写模式下的读写锁，但是可以有多个线程占有读模式下的读写锁。</p><ul><li>写独占  —  写锁占用时，其他线程加读锁或者写锁时都会阻塞（并非失败）</li><li>读共享  —  读锁占用时，其他线程加写锁时会阻塞，加读锁会成功</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;程序执行结果依赖于不同线程执行的先后顺序，那么就会形成「竞争条件」，由于竞争条件下计算结果是非预期的，因此我们应该尽量避免竞争条件的形成。&lt;/p&gt;
&lt;p&gt;解决竞争条件的方式，除原子操作外，还有线程同步。&lt;/p&gt;</summary>
    
    
    
    
    <category term="八股" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>SQL基础</title>
    <link href="http://example.com/SQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/SQL%E5%9F%BA%E7%A1%80/</id>
    <published>2022-08-24T14:11:57.000Z</published>
    <updated>2022-08-24T14:13:22.058Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考<a href="https://github.com/datawhalechina/wonderful-sql/">SQL基础教程</a>编写，建立在曾学习过相关课程的基础上，进行回顾。如您未曾接触过SQL，阅读本文可能会有些吃力。</p><span id="more"></span><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><ol><li>MySQL本身不区分大小写，但强烈要求关键字大写，表名、列名用小写；</li><li>创建表时，使用统一的、描述性强的字段命名规则保证字段名是独一无二且不是保留字的，不要使用连续的下划线，不用下划线结尾；最好以字母开头</li><li>关键字右对齐，且不同层级的用空格或缩进控制，使其区分开。</li><li>列名少的时候写在一行里无伤大雅；多的时候以及涉及到CASE WHEN 或者聚合计算的时候，建议分行写；个人习惯是逗号在列名前面，方便之后删除某些列，放列名后亦可；</li><li>表别名和列别名尽量用有具体含义的词组，不要用<code>a b c</code>，不然以后review的时候会非常痛苦；</li><li>运算符前后都加一个空格；</li><li>当用到多个表时，请在所有列名前写上引用的表别名，不要嫌麻烦；</li><li>每条命令用分号结尾；</li><li>养成随手写注释的习惯，注释方法：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#单行注释</span><br><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h3><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><p>DDL（Data Definition Language，数据定义语言） 用来<strong>创建或者删除</strong>存储数据用的<strong>数据库以及</strong>数据库中的<strong>表</strong>等对象。（create、drop、alter）</p><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><p>DML（Data Manipulation Language，数据操纵语言） 用来<strong>查询或者变更表中的记录</strong>。(select、insert、update、delete)</p><h4 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h4><p>DCL（Data Control Language，数据控制语言） 用来<strong>确认或者取消</strong>对数据库中的<strong>数据进行的变更</strong>。除此之外，还可以对 RDBMS 的用户是否有权限操作数据库中的对象（数据库表等）进行设定。（commit、rollback、grant、revoke）</p><blockquote><p>Win 系统默认不区分表名及字段名的大小写<br>Linux / Mac 默认严格区分表名及字段名的大小写</p></blockquote><h3 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">CREATE DATABASE &lt; 数据库名称 &gt; ;</span><br><span class="line"># 建表</span><br><span class="line">CREATE TABLE &lt; 表名 &gt;</span><br><span class="line">( &lt; 列名 1&gt; &lt; 数据类型 &gt; &lt; 该列所需约束 &gt; ,</span><br><span class="line">  &lt; 列名 2&gt; &lt; 数据类型 &gt; &lt; 该列所需约束 &gt; ,</span><br><span class="line">  &lt; 该表的约束 1&gt; , &lt; 该表的约束 2&gt;);</span><br><span class="line"># 删除表</span><br><span class="line">DROP TABLE &lt; 表名 &gt; ;</span><br><span class="line"># 添加列</span><br><span class="line">ALTER TABLE &lt; 表名 &gt; ADD COLUMN &lt; 列的定义 &gt;;</span><br><span class="line"># 删除列</span><br><span class="line">ALTER TABLE &lt; 表名 &gt; DROP COLUMN &lt; 列名 &gt;;</span><br><span class="line"># 删除行</span><br><span class="line">DELETE FROM product WHERE &lt; 所满足的条件 &gt;;</span><br><span class="line"># 更新数据 值可以改为NULL</span><br><span class="line">UPDATE &lt;表名&gt;</span><br><span class="line">   SET &lt;列名&gt; = &lt;表达式&gt; [, &lt;列名2&gt;=&lt;表达式2&gt;]  </span><br><span class="line"> WHERE &lt;条件&gt;  -- 可选，非常重要</span><br><span class="line"> ORDER BY 子句  -- 可选</span><br><span class="line"> LIMIT 子句; -- 可选</span><br><span class="line"># 插入</span><br><span class="line">INSERT INTO &lt;表名&gt; (列1, 列2, 列3) VALUES (值1, 值2, 值3);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建索引</span><br><span class="line">-- 建表时</span><br><span class="line">CREATE TABLE mytable(&lt; 列名 1&gt; &lt; 数据类型 &gt; &lt; 该列所需约束 &gt;,  </span><br><span class="line">INDEX [indexName] (username(length))  );  </span><br><span class="line">-- else</span><br><span class="line">CREATE INDEX indexName ON table_name (column_name)</span><br><span class="line"></span><br><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>只有未设置<code>NOT NULL</code>且非主键的列才可以清空为NULL。</p></blockquote><h4 id="列约束"><a href="#列约束" class="headerlink" title="列约束"></a>列约束</h4><ul><li><code>PRIMARY KEY</code>  —  主键</li><li><code>UNIQUE</code>  —  值唯一（NULL值可重复）</li><li><code>DEFAULT</code>  —  默认值（使用时不写、写<code>DEFAULT</code>均可以）</li><li><code>NOT NULL</code>  —  非空</li><li><code>FOREIGN</code>  —  外键</li><li><code>AUTO_INCREMENT</code>  —  自动成长（成长为列的最大值+1）</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引的作用  —  提高查询速率</p><p>索引一般分为</p><ol><li>聚集索引  —  在数据库中，所有行数都会按照主键索引排序。</li><li>非聚集索引  —  就是给普通字段加上索引。</li><li>联合索引  —  好几个字段组成的索引称为联合索引。</li></ol><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>主键索引</li></ul><p>建立在主键上的索引。一张数据表只能有一个主键索引，索引列值不允许有空值，通常在创建表时一起创建。</p><ul><li>唯一索引</li></ul><p>建立在UNIQUE字段上的索引。一张表可以有多个唯一索引，索引列值允许为空，列值中出现多个空值不会发生重复冲突。</p><ul><li>普通索引</li></ul><p>建立在普通字段上的索引。</p><ul><li>前缀索引</li></ul><p>对字符类型字段的前几个字符或对二进制类型字段的前几个bytes建立索引。通常建立在类型为<code>char、varchar、binary、varbinary</code>的列上。</p><p>可以大大减少索引占用的存储空间，也能提升索引的查询效率。</p><ul><li>全文索引</li></ul><p>全文索引技术就是将各种信息，文档中所有的文字序列都作为检索对象，找出包含检索词汇的信息或文档。</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><blockquote><p>找某一列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><ul><li><code>*</code>查找全部</li><li>随意使用换行符，不影响语句执行。</li><li><code>DISTINCT</code>用来去重。</li><li><code>-- 单行注释</code> &amp; <code>/* 多行注释*/</code></li><li>SELECT子句中可以使用常数或者表达式。</li></ul><blockquote><p>寻找某列满足某一条件的值所在行中的某些列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><table><thead><tr><th align="center">含义</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td></tr><tr><td align="center">-</td><td align="center">减</td></tr><tr><td align="center">*</td><td align="center">乘</td></tr><tr><td align="center">/</td><td align="center">除</td></tr><tr><td align="center">=</td><td align="center">相等</td></tr><tr><td align="center">&lt;&gt;</td><td align="center">不等</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;=</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;=</td><td align="center">小于等于</td></tr><tr><td align="center">NOT</td><td align="center">非</td></tr><tr><td align="center">AND</td><td align="center">与</td></tr><tr><td align="center">OR</td><td align="center">或</td></tr><tr><td align="center">()</td><td align="center">改变优先级</td></tr></tbody></table><ul><li><code>NULL</code>既不为真也不为假。值为<code>UNKNOWN</code></li></ul><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><ul><li>COUNT  —  行数</li><li>SUM  —  数据的和</li><li>AVG  —  数据均值</li><li>MAX  —  数据最大值</li><li>MIN  —  数据最小值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FUNC(<span class="operator">&lt;</span>列名<span class="operator">&gt;</span>) <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> ;</span><br></pre></td></tr></table></figure><ul><li><code>COUNT(*)</code>包含含有<code>NULL</code>的项；<code>COUNT(列名)</code>不包含NULL值。</li><li><code>MAX/MIN</code>适用于所有(字典序)，<code>AVG/SUM</code>只适用于数值。</li></ul><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p><code>GROUP BY</code>按照某几列的值进行分组（有优先级）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>,</span><br><span class="line">    <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p><code>HAVING</code>用于解决<strong>WHERE无法与聚合函数一起使用</strong>。这一问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件[常为聚合后的条件]<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p><code>ORDER BY</code>将查询结果排序。默认为升序排列，降序排列为<code>DESC</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件[常为聚合后的条件]<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>排序基准列<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>排序基准列<span class="number">2</span><span class="operator">&gt;</span> [<span class="keyword">DESC</span>]</span><br></pre></td></tr></table></figure><ul><li><code>MySQL</code>中认为<code>NULL</code>值比<code>非NULL</code>小。（排序时可能需要特殊处理）<ul><li>在排序时可以使用<code>IS NULL</code>运算符及<code>ISNULL()</code>函数来对NULL值做特殊处理</li></ul></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是一个虚拟的表，不同于直接操作数据表，视图是依据 SELECT 语句来创建的，所有操作视图时会根据创建视图的 <code>SELECT</code> 语句生成一张虚拟表，然后在这张虚拟表上做 SQL 操作。</p><blockquote><p>视图与表的区别是「是否保存了实际的数据」</p></blockquote><p>视图<strong>并不是</strong>数据库<strong>真实存储的数据表</strong>，它可以看作是一个窗口，通过这个窗口我们可以看到数据库表中真实存在的数据。</p><h4 id="存在原因"><a href="#存在原因" class="headerlink" title="存在原因"></a>存在原因</h4><ul><li>可以将频繁使用的 SELECT 语句保存以提高效率。</li><li>可以使用户看到的数据更加清晰。</li><li>可以不对外公开数据表全部字段，增强数据的保密性。</li><li>可以降低数据的冗余。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名称<span class="operator">&gt;</span>(<span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>,<span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>) <span class="keyword">AS</span> <span class="operator">&lt;</span><span class="keyword">SELECT</span>语句<span class="operator">&gt;</span></span><br><span class="line"># 可以基于多张表创建视图</span><br></pre></td></tr></table></figure><ul><li>SELECT 语句中列的排列顺序和视图中列的排列顺序相同</li><li>视图名在数据库中需要是唯一的，不能与其他视图和表重名。</li></ul><h4 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h4><p>由于视图是一个虚拟表，对视图的操作就是对底层基础表的操作。</p><p>故，当视图存在以下结构时不能更新：</p><ul><li>聚合函数。如，SUM()、MIN()、COUNT() </li><li>DISTINCT 关键字</li><li>GROUP BY 子句。</li><li>HAVING 子句。</li><li>UNION 或 UNION ALL 运算符。</li><li>FROM 子句中包含多个表。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE <span class="operator">&lt;</span>视图名称<span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">SET</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="number">1</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>一个查询语句嵌套在另一个查询语句内部。子查询结果作为外层查询的过滤条件，查询可以基于一个表或者多个表。</p><blockquote><p>不建议嵌套多层子查询<br>虽然嵌套子查询可以查询出结果，但是随着子查询嵌套的层数的叠加，SQL语句不仅会难以理解而且执行效率也会很差，所以要尽量避免这样的使用。</p></blockquote><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>执行的SQL语句只能返回一个值，也就是要返回表中具体的<strong>某一行的某一列</strong>。</p><blockquote><p>标量子查询不仅仅局限于 WHERE 子句中，通常任何可以使用单一值的位置都可以使用。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找价格高于平均值的商品</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> sale_price <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sale_price) <span class="keyword">FROM</span> product) <span class="keyword">AS</span> avg_price;</span><br></pre></td></tr></table></figure><blockquote><p>这里出现的<code>AS</code>用来起别名。创建别名是为了让列名称的可读性更强。</p></blockquote><h4 id="关联子查询"><a href="#关联子查询" class="headerlink" title="关联子查询"></a>关联子查询</h4><p>关联子查询，在细分的组内进行比较时使用。</p><blockquote><p>需要特别注意其与一般的SQL语句相比，执行顺序有所不同。</p></blockquote><ul><li>首先执行不带WHERE的主查询，获取到所关联的列，依次（一次传一行）传入子查询。</li><li>根据主查询传入的结果匹配子查询，将查询结果返回父查询</li><li>根据子查询返回值依次判断父查询的<code>WHERE</code>子句。</li></ul><p>以下列代码为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************</span></span><br><span class="line"><span class="comment">  已知 有一张表 score</span></span><br><span class="line"><span class="comment">   表中含有如下信息：</span></span><br><span class="line"><span class="comment">   student_id 学生学号</span></span><br><span class="line"><span class="comment">    course_id 课程号</span></span><br><span class="line"><span class="comment"> course_score 课程成绩</span></span><br><span class="line"><span class="comment">  所要查询的内容：</span></span><br><span class="line"><span class="comment">  成绩大于平均分的学生</span></span><br><span class="line"><span class="comment">  的学号、课程号、成绩</span></span><br><span class="line"><span class="comment"> ********************/</span> </span><br><span class="line"><span class="keyword">SELECT</span> student_id,course_id,course_score</span><br><span class="line">  <span class="keyword">FROM</span> score <span class="keyword">AS</span> s1</span><br><span class="line"> <span class="keyword">WHERE</span> course_score <span class="operator">&gt;</span> ( <span class="keyword">SELECT</span> <span class="built_in">AVG</span>(course_score)</span><br><span class="line">             <span class="keyword">FROM</span> score <span class="keyword">AS</span> s2</span><br><span class="line">            <span class="keyword">WHERE</span> s1.course_id <span class="operator">=</span> s2.course_id</span><br><span class="line">       <span class="keyword">GROUP</span> <span class="keyword">BY</span> course_id);</span><br></pre></td></tr></table></figure><ol><li>首先执行主查询<code>SELECT student_id,course_id,course_score FROM score AS s1</code>提取出<code>student_id,course_id、course_score</code>三列所需要的信息</li><li>执行<code>()</code>中的子查询语句，依次将<code>course_id</code>传入<code>s1.course_id= s2.course_id </code>并执行得到<ul><li>如第一步查询出课程编号为<code>10001  10002  10003  10004</code></li><li>依次将课程号传入相应位置 执行<code>SELECT AVG(course_score) FROM score AS s2 WHERE course_id = 10001 GROUP BY course_id</code>根据这门课的所有人成绩计算该门课的平均分</li><li>依次将每门课的平均分<code>val</code>值返回给主查询。</li></ul></li><li>然后依次执行<code>SELECT student_id,course_id,course_score FROM score AS s1 WHERE course_score &gt; val</code>。得到每门课成绩大于平均分的学生的信息。</li></ol><blockquote><p>其中 需要注意的是 看似是废话的<code>WHERE s1.course_id = s2.course_id</code>即为关联子查询的关键点。（关联条件）</p></blockquote><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>SQL内置了一些函数，极大提高了SQL语言的便利性。分类如下</p><ul><li>算术函数</li><li>字符串函数</li><li>日期函数</li><li>转换函数</li><li>聚合函数</li></ul><h4 id="算术函数"><a href="#算术函数" class="headerlink" title="算术函数"></a>算术函数</h4><ul><li>ABS(val)  —  绝对值。ABS(NULL) 返回NULL</li><li>MOD(val, pow)  —  取余。</li><li>ROUND(val, n)  —  四舍五入保留n位小数。</li></ul><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><ul><li>CONCAT(str1, str2)  —  字符串拼接</li><li>LENGTH(str)  —  字符串长度</li><li>LOWER(str)  —  转换成小写</li><li>UPPER(str)  —  转换成大写</li><li>REPLACE(str,ch1,ch2)  —  将str中<code>ch1</code>全部替换为<code>ch2</code></li><li>SUBSTRING(str FROM pos FOR n)  —  在str中pos位置开始提取长度为n的子串</li><li>SUBSTRING_INDEX(str,ch,n)  —  以ch为分隔符划分str，并获取第n个分隔符前的所有内容</li><li>REPEAT(str,n)  —  将字符串str重复n次</li></ul><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ul><li>CURRENT_DATE  —  获取当前日期</li><li>CURRENT_TIME  —  获取当前时间</li><li>CURRENT_TIMESTAMP  —  获取当前日期和时间</li><li>EXTRACT(日期元素 FROM 日期)  —  从日期中截取信息<ul><li>EXTRACT(YEAR   FROM CURRENT_TIMESTAMP) AS year 获取年份。</li><li>日期元素有<code>YEAR  MONTH  DAY  HOUR  MINUTE  SECOND</code></li></ul></li></ul><h4 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h4><ul><li>CAST(val,type)  —  将值转换成相应的类型</li><li>COALESCE(val1,val2,….)  —  获取所有参数中第一个非NULL值。</li></ul><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>表示个体的性质和个体之间关系的符号。主要包括<code>LIKE、BETWEEN、IS NULL、IS NOT NULL、IN 、EXISTS</code></p><h4 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h4><p>用于字符串的部分匹配</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">WHERE</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="keyword">LIKE</span> <span class="operator">&lt;</span>字符串<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>字符串支持正则表达式。</p><ul><li><code>%</code>表示任意个数字符。例如，<code>%xxx%</code>表示含有<code>xxx</code>的所有字符串。</li><li><code>_</code>表示一个字符。例如<code>_xxx%</code>表示第2~4位为<code>xxx</code>的所有字符串。</li><li><code>[x]</code>表示列表中的一个字符。例如<code>[abcd]xxx</code>表示<code>axxx</code>或<code>bxxx</code>或<code>cxxx</code>或<code>dxxx</code></li><li><code>[^x] 、 [!x]</code>表示不在列表中的字符。<code>[^abc]xxx</code>表示长度为4，首位不为<code>a  b  c</code>，后三位为<code>xxx</code>的字符串</li></ul><h4 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h4><p>用于范围查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, sale_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line">  <span class="keyword">WHERE</span> sale_price <span class="keyword">BETWEEN</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">1000</span>;</span><br><span class="line"><span class="comment">-- 查询价格在100~1000之间的商品</span></span><br></pre></td></tr></table></figure><blockquote><p><code>BETWEEN val1 AND val2 </code>包括左右临界值。</p></blockquote><h4 id="IS-NULL-IS-NOT-NULL"><a href="#IS-NULL-IS-NOT-NULL" class="headerlink" title="IS NULL/ IS NOT NULL"></a>IS NULL/ IS NOT NULL</h4><p>取空或非空（有些条件下不能使用<code>= &lt;&gt;</code>，比如取值为空的数据）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, purchase_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> purchase_price <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="IN-NOT-IN"><a href="#IN-NOT-IN" class="headerlink" title="IN/ NOT IN"></a>IN/ NOT IN</h4><p>多条件并集的查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, purchase_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> purchase_price <span class="keyword">IN</span> (<span class="number">250</span>,<span class="number">500</span>,<span class="number">750</span>);</span><br><span class="line"> <span class="comment">/**********************************</span></span><br><span class="line"><span class="comment">       purchase_price = 250</span></span><br><span class="line"><span class="comment">    OR purchase_price = 500</span></span><br><span class="line"><span class="comment">    OR purchase_price = 750;</span></span><br><span class="line"><span class="comment">***********************************/</span></span><br></pre></td></tr></table></figure><blockquote><p>IN 还可以用在子查询中<br>比如某连锁商店有很多个分店，不同分店的商品不完全一样<br>我们查询某个分店的是否有某个商品时<br>子查询返回该分店的所有商品<br>主查询判断是否在这个范围内</p></blockquote><h4 id="EXIST-NOT-EXIST"><a href="#EXIST-NOT-EXIST" class="headerlink" title="EXIST/NOT EXIST"></a>EXIST/NOT EXIST</h4><p>「判断是否存在满足某种条件的<strong>记录</strong>」。存在，返回<code>true</code>；不存在，返回<code>false</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 选出某个分店在售商品(价格不为NULL)的单价</span></span><br><span class="line"><span class="comment">-- IN</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name, sale_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> product_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> product_id</span><br><span class="line">                        <span class="keyword">FROM</span> shopproduct</span><br><span class="line">                       <span class="keyword">WHERE</span> shop_id <span class="operator">=</span> <span class="string">&#x27;XXX&#x27;</span>);</span><br><span class="line"><span class="comment">-- EXIST</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name, sale_price</span><br><span class="line">  <span class="keyword">FROM</span> product <span class="keyword">AS</span> p</span><br><span class="line"> <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="comment">-- 这里可以书写适当的常数</span></span><br><span class="line">                 <span class="keyword">FROM</span> shopproduct <span class="keyword">AS</span> sp</span><br><span class="line">                <span class="keyword">WHERE</span> sp.shop_id <span class="operator">=</span> <span class="string">&#x27;XXX&#x27;</span></span><br><span class="line">                  <span class="keyword">AND</span> sp.product_id <span class="operator">=</span> p.product_id);</span><br></pre></td></tr></table></figure><blockquote><p>由于 EXIST 只关心记录是否存在，返回哪些列都没有关系。</p></blockquote><h3 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h3><p>条件分支。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="operator">&lt;</span>求值表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line">     <span class="keyword">WHEN</span> <span class="operator">&lt;</span>求值表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line">     <span class="keyword">WHEN</span> <span class="operator">&lt;</span>求值表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 均为假执行else</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">END</span>  </span><br><span class="line"><span class="comment">-- 可以用于调用聚合函数时 一些特殊值的处理</span></span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> <span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h3><p><code>表、视图、查询结果</code>都是记录的集合， 其中的元素为「表或者查询结果」中的每一行。</p><p><code>UNION、INTERSECT、EXCEPT</code> 来将检索结果进行集合运算。</p><h4 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h4><p>UNION，重复项会去重。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************</span></span><br><span class="line"><span class="comment"> 楼下有两个商店</span></span><br><span class="line"><span class="comment"> shop1为A商店所卖商品</span></span><br><span class="line"><span class="comment"> shop2为B商店所卖商品</span></span><br><span class="line"><span class="comment"> 求问能在楼下买到啥</span></span><br><span class="line"><span class="comment">******************/</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name</span><br><span class="line">  <span class="keyword">FROM</span> shop1</span><br><span class="line"> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name</span><br><span class="line">  <span class="keyword">FROM</span> shop2;</span><br></pre></td></tr></table></figure><p><code>UNION ALL</code>取并集后不去重。</p><h4 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h4><p>INTERSECT，<code>MySQL</code>不支持。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 两个商店中均能买到的商品</span></span><br><span class="line"><span class="comment">-- INTERSECT</span></span><br><span class="line">   <span class="keyword">SELECT</span> product_id, product_name</span><br><span class="line">     <span class="keyword">FROM</span> shop1</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line">   <span class="keyword">SELECT</span> product_id, product_name</span><br><span class="line">     <span class="keyword">FROM</span> shop2;</span><br><span class="line"><span class="comment">-- 手动模拟</span></span><br><span class="line">    <span class="keyword">SELECT</span> s1.product_id, s1.product_name</span><br><span class="line">      <span class="keyword">FROM</span> shop1 s1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> shop2 s2</span><br><span class="line">        <span class="keyword">ON</span> s1.product_id<span class="operator">=</span>s2.product_id</span><br></pre></td></tr></table></figure><h4 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h4><p>EXCEPT，<code>MySQL</code>不支持。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 只能在A商店中买的商品</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> shop1</span><br><span class="line"> <span class="keyword">WHERE</span> product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> product_id</span><br><span class="line">                          <span class="keyword">FROM</span> shop2)</span><br><span class="line"><span class="comment">-- EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> shop1</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> shop2</span><br></pre></td></tr></table></figure><h4 id="对称差"><a href="#对称差" class="headerlink" title="对称差"></a>对称差</h4><p>两个集合<code>A  B</code>， 求仅在A及仅在B中的元素。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 只能在一个商店买</span></span><br><span class="line"><span class="comment">-- 另一个商店买不到</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> shop1</span><br><span class="line"> <span class="keyword">WHERE</span> product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> product_id</span><br><span class="line">                          <span class="keyword">FROM</span> shop2)</span><br><span class="line"> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> shop2</span><br><span class="line"> <span class="keyword">WHERE</span> product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> product_id</span><br><span class="line">                          <span class="keyword">FROM</span> shop1)</span><br><span class="line"><span class="comment">-- 交集 - 并集</span></span><br></pre></td></tr></table></figure><h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><p>从多个表获取信息时，用于表的合并。</p><p>使用某种关联条件将其他表中的列添加过来, 进行「添加列」的集合运算。</p><p>关联条件  —  两个表中的公共列信息（两个表建立关联的桥梁）</p><h4 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h4><p>将两张表进行连结。其中不满足关联条件的行被丢弃。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>关联条件<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果分组列和被聚合的列不在同一张表, 且二者都未被用于连结两张表, 则只能先连结, 再聚合。</p></blockquote><h5 id="NATURAL-JOIN"><a href="#NATURAL-JOIN" class="headerlink" title="NATURAL JOIN"></a>NATURAL JOIN</h5><p><code>INNER JOIN</code>的特例，会按照两个表中都包含的列名来进行等值连结。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">NATURAL</span>  <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="OUTER-JOIN"><a href="#OUTER-JOIN" class="headerlink" title="OUTER JOIN"></a>OUTER JOIN</h4><p>将两张表进行连结。其中会保留部分不满足条件的行。提取不到的值填充为<code>NULL</code>值。</p><ul><li>LEFT OUTER JOIN  —  左外连结。保留左表（表1）中匹配失败的值。</li><li>RIGHT OUTER JOIN  —  右外连结。保留右表（表2）中匹配失败的值。</li><li>FULL OUTER JOIN  —  全外连结。两个表中匹配失败的值均会保留。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>关联条件<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>关联条件<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>  <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>关联条件<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多表连结"><a href="#多表连结" class="headerlink" title="多表连结"></a>多表连结</h4><p>语法中JOIN只涉及两个表，但实际使用会涉及多张表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INNER JOIN</span></span><br><span class="line">      <span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>关联条件<span class="number">1</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">3</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>关联条件<span class="number">2</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">4</span><span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span>关联条件<span class="number">3</span><span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- OUTER JOIN 同理</span></span><br></pre></td></tr></table></figure><h4 id="非等值连结"><a href="#非等值连结" class="headerlink" title="非等值连结"></a>非等值连结</h4><p>ON子句中的关联条件不局限于两表中相等。</p><h4 id="交叉连结"><a href="#交叉连结" class="headerlink" title="交叉连结"></a>交叉连结</h4><p><code>CROSS JOIN</code>笛卡尔积。交叉连结不具备<code>ON</code>子句（可以理解为恒真）</p><p>对两张表中的全部记录进行交叉组合，因此结果中的记录数通常是两张表中行数的乘积。</p><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p><code>OnLine AnalyticalProcessing</code>OLAP函数。对数据库数据进行实时分析处理。</p><p>常规的SELECT语句都是对整张表进行查询，而窗口函数可以让我们有选择的去某一部分数据进行汇总、计算和排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>窗口函数<span class="operator">&gt;</span> <span class="keyword">OVER</span> ([<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>]</span><br><span class="line">                     <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>排序用列名<span class="operator">&gt;</span>)  </span><br><span class="line"><span class="comment">-- [PARTITION BY &lt;列名&gt;] 可以省略</span></span><br></pre></td></tr></table></figure><ul><li>PARTITION BY  —  指定窗口对象(分组基准)</li><li>ORDER BY  —  窗口内排序</li></ul><h4 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h4><p>窗口函数分为</p><ul><li>通用函数  —  <code>SUM  MAX  MIN</code>等</li><li>专用函数  —  <code>RANK  DENSE_RANK</code>等</li></ul><p>通用函数在聚合函数中就在使用。专用函数是专属的。</p><ul><li>RANK()  —  排序，存在相同位次会跳相应的位次<code>1 1 3</code></li><li>DENSE_RANK()  —  排序。存在相同位次不会跳相应的位次<code>1 1 2</code></li><li>ROW_NUMBER()  —  排序。值唯一（顺延，不存在并列）</li></ul><blockquote><p>聚合函数在窗口函数应用时，是一个<strong>累计</strong>的聚合函数值。(AVG分母从1开始加)</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文参考&lt;a href=&quot;https://github.com/datawhalechina/wonderful-sql/&quot;&gt;SQL基础教程&lt;/a&gt;编写，建立在曾学习过相关课程的基础上，进行回顾。如您未曾接触过SQL，阅读本文可能会有些吃力。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>c++2.0</title>
    <link href="http://example.com/c-2-0/"/>
    <id>http://example.com/c-2-0/</id>
    <published>2022-08-19T09:47:16.000Z</published>
    <updated>2022-09-30T09:03:46.155Z</updated>
    
    <content type="html"><![CDATA[<p>本文综合了候捷老师「C++11/C++14课程」的内容及一些其他的自己已知的C++11的内容。</p><span id="more"></span><h3 id="vector-shrink-to-fit"><a href="#vector-shrink-to-fit" class="headerlink" title="vector::shrink_to_fit()"></a>vector::shrink_to_fit()</h3><p>减少容量，适应实际大小。（根据当前容量大小调用分配器的<code>realloc</code>版本）</p><blockquote><p>比如当前当前容量为256，存放了129个元素（扩容部分仅用了一个），调用该接口可以调整空间容量为<code>129</code></p></blockquote><h3 id="std-function"><a href="#std-function" class="headerlink" title="std::function"></a>std::function</h3><p>std::function的实例可以对任何可以调用的目标实体进行存储、复制和调用操作。这些目标实体包括普通函数、Lambda表达式、函数指针以及其它函数对象等。（升级版函数指针）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MyFunc1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</span><br><span class="line">function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; functor1 = MyFunc1;</span><br><span class="line"><span class="built_in">functor1</span>(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line"><span class="keyword">auto</span> MyFunc2 =[](<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;<span class="keyword">return</span> a + b;&#125;;</span><br><span class="line">function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; functor2 = MyFunc2;</span><br><span class="line"><span class="built_in">functor2</span>(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyFunc3</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">function&lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; functor3 = MyFunc3;</span><br><span class="line"><span class="built_in">functor2</span>(<span class="number">2</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><p>new分配内存，智能指针可以自动释放。而传统指针需要手动delete。<br>智能指针对普通的指针进行封装，负责自动释放所指的对象，这样的一层封装机制的目的是为了使得智能指针可以方便的管理一个对象的生命期。</p><ol><li>auto_ptr（c++11弃用）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">auto_ptr&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;I reigned loney as a cloud.&quot;</span>))</span></span>;</span><br><span class="line">auto_ptr&lt;string&gt; p2;</span><br><span class="line">p2=p1; <span class="comment">//auto_ptr不会报错</span></span><br></pre></td></tr></table></figure><p>此时p2剥夺p1所有权。访问p1会报错。（存在内存崩溃的风险）</p><ol start="2"><li><p>unique_ptr</p><p>实现独占式拥有或严格拥有概念，保证同一时间内只有一个智能指针可以指向该对象。避免资源泄露</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">p3</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;I reigned loney as a cloud.&quot;</span>))</span></span>;</span><br><span class="line">unique_ptr&lt;string&gt; p4;</span><br><span class="line">p4 = p3; <span class="comment">//error</span></span><br><span class="line"><span class="comment">/*****************************</span></span><br><span class="line"><span class="comment">当将一个 unique_ptr 赋值给另一个</span></span><br><span class="line"><span class="comment">如果源 unique_ptr 是个临时右值</span></span><br><span class="line"><span class="comment">编译器允许这么做</span></span><br><span class="line"><span class="comment">否则 报错</span></span><br><span class="line"><span class="comment">*****************************/</span></span><br><span class="line">unique_ptr&lt;string&gt; ps1, ps2;</span><br><span class="line">ps1 = make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">200</span>);</span><br><span class="line">ps2 = <span class="built_in">move</span>(ps1);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>shared_ptr</p><p>实现<strong>共享式</strong>拥有概念。多个智能指针可以指向相同对象，该对象和其相关资源会在“最后一个引用被销毁”时候释放。用计数机制来表明资源被几个指针共享。</p><p>多个线程同时读同一个shared_ptr对象是线程安全的，但是如果是多个线程对同一个shared_ptr对象进行读和<strong>写</strong>，则需要<strong>加锁</strong>。<br>多线程读写shared_ptr所指向的同一个对象，不管是相同的shared_ptr对象，还是不同的shared_ptr对象，也需要加锁保护。</p><p>shared_ptr拥有成员函数如下：</p><ul><li>use_count  —  引用计数的个数</li><li>unique  —  是否独占</li><li>swap  —  交换两个shared_ptr所拥有的对象</li><li>get  —  返回内部对象</li></ul></li><li><p>weak_ptr</p><ul><li>尝尝与shared_ptr搭配使用，为shared_ptr的观察者。</li></ul><ul><li>不控制对象生命周期的智能指针, 它指向一个 shared_ptr 管理的对象。</li><li>当 shared_ptr 管理的资源被释放时，weak_ptr 会自动变成 nullptr。</li><li>只是提供了对管理对象的一个访问手段。用来解决shared_ptr相互引用时的死锁问题</li></ul></li></ol><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li><code>const_cast</code>  —  将<code>const type</code>转化为<code>type</code>（type为<strong>指针或引用</strong>）</li><li><code>static_cast</code>  —  可以用于各种编译器认可的隐式转换(类对象向上转换)</li><li><code>dynamic_cast</code>  —  用于含有虚函数的类的转换，用于类向上和向下转换</li><li><code>reinterpret_cast</code>  —  任意类型转换，不保证成功。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static_cast</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(a);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span> &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span>:</span>Base&#123; &#125;;</span><br><span class="line">Base* ptr;</span><br><span class="line">Derive *temp = <span class="keyword">new</span> <span class="built_in">Derive</span>();</span><br><span class="line">ptr = <span class="keyword">static_cast</span>&lt;Base*&gt;(temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//const_cast</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>*&gt;(&amp;a);</span><br></pre></td></tr></table></figure><h3 id="Variadic-Template"><a href="#Variadic-Template" class="headerlink" title="Variadic Template"></a>Variadic Template</h3><p>数量不定的模板参数。</p><p><code>...</code>用来表示一包<code>pack</code>。表示模板参数、函数参数、函数参数类型的数量不确定。（用来递归）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;&#125;<span class="comment">//递归出口</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(constT&amp; firstArg,<span class="keyword">const</span> Types&amp;... args)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt;firstArg&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(args...);</span><br><span class="line">    <span class="comment">//sizeof...(args)可以知道当前剩余几个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tuple</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Values&gt;<span class="class"><span class="keyword">class</span> <span class="title">tuple</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">typle</span>&lt;</span>&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head,<span class="keyword">typename</span>... Tail&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tuple</span>&lt;</span>Head,Tail...&gt;</span><br><span class="line">    :<span class="keyword">private</span> tuple&lt;Tail...&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        Head m_head;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*******************************************</span></span><br><span class="line"><span class="comment">X&lt;T1,T2,T3&gt; ==&gt; X&lt;T2,T3&gt; ==&gt; X&lt;T3&gt; ==&gt;  X&lt;&gt;</span></span><br><span class="line"><span class="comment">  T1 t1     ==&gt;   T2 t2  ==&gt; T3 t3 ==&gt; NULL</span></span><br><span class="line"><span class="comment">*******************************************/</span></span><br></pre></td></tr></table></figure><p>作用域</p><ul><li>函数模板</li><li>类模板</li></ul><p>变化的是模板参数</p><ul><li>参数个数（参数个数逐一递减，实现递归）</li><li>参数类型（参数类型随参数个数也变化）</li></ul><h4 id="重写printf"><a href="#重写printf" class="headerlink" title="重写printf"></a>重写printf</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无参数版本 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*s == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(++s)!=<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">            <span class="comment">//还有参数，则抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        std::cout&lt;&lt;*s++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*,T value,Args... args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*s == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(++s)!=<span class="string">&#x27;%&#x27;</span>) &#123;<span class="comment">//拿类型</span></span><br><span class="line">            std::cout &lt;&lt; value; <span class="comment">//输出</span></span><br><span class="line">            <span class="built_in">printf</span>(++s,args...);<span class="comment">//跳过 d,s,f等 继续递归</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout&lt;&lt;*s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;xxx&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d%s%p%f\n&quot;</span>,<span class="number">15</span>,<span class="string">&quot;Hello World&quot;</span>,pi,<span class="number">3.1415926</span>);</span><br></pre></td></tr></table></figure><p>递归继承 —  tuple</p><h3 id="Spaces-in-Template-Expressions"><a href="#Spaces-in-Template-Expressions" class="headerlink" title="Spaces in Template Expressions"></a>Spaces in Template Expressions</h3><p>模板表达式中的空格。</p><p>在过去的版本中，<code>vector&lt;vector&lt;int&gt; &gt; res</code>，右侧的<code>&gt; &gt;</code>中间必须有空格，不然编译器会以为是个操作符。该版本之后中间的空格可以取消。</p><h3 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h3><p>C++11支持使用 <code>nullptr</code>代替<code>0  NULL</code>，其类型为<code>std::nullptr_t</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(<span class="number">0</span>);<span class="comment">//调用func(int)</span></span><br><span class="line"><span class="comment">/************************</span></span><br><span class="line"><span class="comment">c++11之前， #define NULL 0</span></span><br><span class="line"><span class="comment">#define NULL ((void *)0)</span></span><br><span class="line"><span class="comment">*************************/</span></span><br><span class="line"><span class="built_in">func</span>(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="literal">nullptr</span>);<span class="comment">//调用func(void*)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//nullptr定义</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(<span class="literal">nullptr</span>)</span> <span class="keyword">nullptr_t</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Automatic-Type-Deduction"><a href="#Automatic-Type-Deduction" class="headerlink" title="Automatic Type Deduction"></a>Automatic Type Deduction</h3><p><code>auto</code>自动类型推断。在模板的应用中，我们已经知道编译器可以推导实参的类型，在此将此能力表现。</p><p>名称特别长懒得打字、类型复杂一时想不出时推荐使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">42</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">auto</span> pos = vec.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">auto</span> tmp = [](<span class="keyword">int</span> x)-&gt;<span class="keyword">bool</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="Uniform-Initialization"><a href="#Uniform-Initialization" class="headerlink" title="Uniform Initialization"></a>Uniform Initialization</h3><p>一致性初始化。</p><p>在C++11之前，初始化可能会发生在<code>()、&#123;&#125;、=</code>操作中。程序员很容易困惑于：初始化变量、对象时怎么写？。基于此原因，导入<code>uniform initialization</code>。保证任何初始化都可以使用一种语法<code>&#123;&#125;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一致性初始化</span></span><br><span class="line"><span class="keyword">int</span> value&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">35</span>,<span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;string&gt; vec&#123;<span class="string">&quot;asfg&quot;</span>,<span class="string">&quot;asgg&quot;</span>,<span class="string">&quot;ewgs&quot;</span>&#125;;</span><br><span class="line">complex&lt;<span class="keyword">double</span>&gt; comp&#123;<span class="number">4.0</span>,<span class="number">3.0</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="initializer-list"><a href="#initializer-list" class="headerlink" title="initializer_list"></a>initializer_list</h3><p>编译器看到<code>&#123;..&#125;</code>便生成<code>initializer_list&lt;T&gt;</code>，其内部关联到容器<code>array&lt;T,n&gt;</code>。调用构造函数时(初始化时调用的是构造函数<code>ctor</code>)，该<code>array</code>内的元素可被编译器分解，逐一传给函数。</p><ul><li><p>函数参数如果是<code>initializer_list&lt;T&gt;</code>，调用者不能传入多个<code>initializer_list&lt;T&gt;</code>。</p></li><li><p>可以利用<code>&#123;&#125;</code>来赋空值</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i&#123;&#125;; <span class="comment">// i == 0</span></span><br><span class="line"><span class="keyword">int</span>* ptr&#123;&#125;; <span class="comment">// ptr == nullptr</span></span><br></pre></td></tr></table></figure><ul><li>不推荐向低精度转化<code>int x&#123;5.0&#125;</code></li></ul><p>自定义函数时，如果想通过简单的方式来接收任意个数参数，可以使用<code>initializer_list</code>。</p><blockquote><p>比起<code>...</code>参数的类型比较严格。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(std::initializer_list&lt;<span class="keyword">int</span>&gt; vals)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p = vals.<span class="built_in">begin</span>();p!=vals.<span class="built_in">end</span>();p++) &#123;</span><br><span class="line">        std::cout &lt;&lt; *p &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="number">12</span>,<span class="number">53</span>,<span class="number">26</span>,<span class="number">57</span>,<span class="number">14</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">P</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;&#125;    <span class="comment">// func1</span></span><br><span class="line">    <span class="built_in">P</span>(initializer_list&lt;<span class="keyword">int</span>&gt; initlist)&#123;&#125; <span class="comment">// func2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用 </span></span><br><span class="line"><span class="function">P <span class="title">a</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span></span>; <span class="comment">//调用func1</span></span><br><span class="line">P b&#123;<span class="number">5</span>,<span class="number">7</span>&#125;;   <span class="comment">//func2</span></span><br><span class="line">P c&#123;<span class="number">2</span>,<span class="number">23</span>,<span class="number">62</span>&#125;;   <span class="comment">//func2</span></span><br><span class="line">P d=&#123;<span class="number">3</span>,<span class="number">5</span>&#125;;  <span class="comment">//func</span></span><br></pre></td></tr></table></figure><blockquote><p>上述样例中如果没有<code>func2</code>，则对象<code>b  d</code>仍会创建，调用<code>func1</code></p></blockquote><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> _<span class="title">E</span>&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">initializer_list</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">typedef</span> _E        value_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">const</span> _E&amp;     reference;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">const</span> _E&amp;     const_reference;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">size_t</span>        size_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">const</span> _E*     iterator;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">const</span> _E*     const_iterator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      iterator          _M_array;</span><br><span class="line">      size_type         _M_len;</span><br><span class="line">        <span class="comment">//编译器看到&#123;&#125;时会调用该私有构造</span></span><br><span class="line">      <span class="comment">// The compiler can call a private constructor.</span></span><br><span class="line">      <span class="function"><span class="keyword">constexpr</span> <span class="title">initializer_list</span><span class="params">(const_iterator __a, size_type __l)</span></span></span><br><span class="line"><span class="function">      : _M_array(__a), _M_len(__l) &#123;</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="keyword">constexpr</span> <span class="title">initializer_list</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">      : _M_array(<span class="number">0</span>), _M_len(<span class="number">0</span>) &#123;</span> &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Number of elements.</span></span><br><span class="line">      <span class="function"><span class="keyword">constexpr</span> size_type</span></span><br><span class="line"><span class="function">      <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> _M_len; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// First element.</span></span><br><span class="line">      <span class="function"><span class="keyword">constexpr</span> const_iterator</span></span><br><span class="line"><span class="function">      <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> _M_array; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// One past the last element.</span></span><br><span class="line">      <span class="function"><span class="keyword">constexpr</span> const_iterator</span></span><br><span class="line"><span class="function">      <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">begin</span>() + <span class="built_in">size</span>(); &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>多个同类型的参数max/min通过initializer_list实现</p></blockquote><h3 id="Explicit"><a href="#Explicit" class="headerlink" title="Explicit"></a>Explicit</h3><p>作用于含有<strong>一个以上</strong>实参的构造函数，防止编译器进行隐式类型转换。</p><p>C++中<code>nonexplicit one argument ctor</code>才能做隐式转换。</p><h3 id="range-base-for"><a href="#range-base-for" class="headerlink" title="range-base for"></a>range-base <code>for</code></h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>-loop`本来的格式有三段，现可以简化为两段`<span class="keyword">for</span>(decl : coll)</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;vec&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">547</span>,<span class="number">47</span>,<span class="number">85</span>,<span class="number">373</span>,<span class="number">856</span>,<span class="number">86</span>&#125;;</span><br><span class="line"><span class="comment">//以前</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;vec.<span class="built_in">size</span>();++i) &#123; cout &lt;&lt;vec[i];&#125;</span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; elem:vec)&#123;cout&lt;&lt;elem;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">for</span>(decl:coll)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> _pos=coll.<span class="built_in">begin</span>();_pos !=coll.<span class="built_in">end</span>();++_pos)&#123;decl = *_pos;&#125;</span><br></pre></td></tr></table></figure><h3 id="default-delete"><a href="#default-delete" class="headerlink" title="=default/=delete"></a>=default/=delete</h3><p>如果有定义构造函数(ctor)，则编译器不会再提供默认构造函数(default ctor)，如果强制加上<code>=default</code>，可以重新获得并使用<code>default ctor</code>。主要用于构造函数、拷贝构造、拷贝赋值、析构函数（不写的话，编译器会自动增加的函数）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zoo</span>&#123;</span></span><br><span class="line">    <span class="built_in">Zoo</span>(<span class="keyword">const</span> Zoo&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">Zoo</span>(Zoo&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line">    Zoo&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Zoo&amp;) = <span class="keyword">default</span>;</span><br><span class="line">    Zoo&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Zoo&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>=delete</code>禁用成员函数的使用。删除特殊成员函数提供了一种更简洁的方法来防止编译器生成我们不想要的特殊成员函数。</p><h3 id="Alias-Template"><a href="#Alias-Template" class="headerlink" title="Alias Template"></a>Alias Template</h3><p>模板别名。在专门化别名模板时生成的类型不允许直接或间接地使用其自己的类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">using</span> Vec = std::vector&lt;T,MyAlloc&lt;T&gt;&gt;;</span><br><span class="line">Vec&lt;<span class="keyword">int</span>&gt; coll;</span><br></pre></td></tr></table></figure><blockquote><p><code>#define</code> <code>typedef</code>无法达到相同效果。<br><code>#define</code>会改变模板中的参数，从而形成类似于偏特化的东西<br><code>typedef</code>不接收参数，也无法达到预期效果。</p></blockquote><h3 id="template-template-parameter"><a href="#template-template-parameter" class="headerlink" title="template template parameter"></a>template template parameter</h3><p>模板模板参数则是模板的参数又是一个模板，如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt; <span class="keyword">typename</span> Container&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XCls</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Container&lt;T&gt; c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用 tmp为一个模板类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tmp</span>&#123;</span>&#125;;</span><br><span class="line">XCls&lt;std::string, Tmp&gt; test1;</span><br><span class="line"><span class="comment">//调用容器</span></span><br><span class="line">XCls&lt;string,vector&gt; test2; <span class="comment">//error</span></span><br><span class="line"><span class="comment">//由于vector会有第二参数（构造器），需要指定</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Vec = std::Vec&lt;T, std::allocator&lt;T&gt;&gt;;</span><br><span class="line">XCls&lt;string,Vec&gt; test2;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><p>以下不为模板模板参数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> Sequence = list&lt;T&gt;&gt;</span><br><span class="line">class stack</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Sequence c;</span><br><span class="line">&#125;;</span><br><span class="line">stack&lt;<span class="keyword">int</span>, deque&lt;<span class="keyword">int</span>&gt;&gt; s2;</span><br></pre></td></tr></table></figure><p>这里是容器指定底层容器，虽然使用了模板参数，但两个参数一旦指定前一个，后一个随之确定。</p><p>而模板模板参数两个参数之间没有任何关系。</p><h3 id="Type-Alias"><a href="#Type-Alias" class="headerlink" title="Type Alias"></a>Type Alias</h3><p>类型别名，类似于<code>typedef</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*func)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">//参数为int,int返回值为void的函数指针</span></span><br><span class="line"><span class="keyword">using</span> func = <span class="built_in"><span class="keyword">void</span></span>(*)(<span class="keyword">int</span>,<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要注意 = 左侧为重命名后的</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tmp</span>&#123;</span></span><br><span class="line">    <span class="keyword">using</span> value_type = T;</span><br><span class="line">    <span class="comment">//typedef T value_type;</span></span><br><span class="line">&#125;;</span><br><span class="line">Tmp::value_type xxx; </span><br></pre></td></tr></table></figure><h4 id="using"><a href="#using" class="headerlink" title="using"></a>using</h4><ol><li>using-directives 命名空间（<code>using namespace std</code>）、using-declarations 某个函数(<code>using std::function</code>)</li><li>using-declarations成员函数(using _Class::xxx)功能同上</li><li>type alias 、alias template去替换</li></ol><h4 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h4><p>不抛出异常。C++中的异常处理是在运行时而不是编译时检测的。为了实现运行时检测，编译器创建额外的代码，然而这会妨碍程序优化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="literal">true</span>)</span></span>;<span class="comment">//满足条件时不抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;<span class="comment">//一定不抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>重写。子类在想要重写父类的虚函数时，声明为<code>override</code>（防止子类写错，不是重写虚函数则报错）可以显式的在派生类中声明，哪些成员函数需要被重写，如果没被重写，则编译器会报错。如果不小心漏写了虚函数重写的某个苛刻条件，也可通过编译器的报错，快速定位错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> x)</span> <span class="keyword">override</span></span>;<span class="comment">//error 非重写</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="keyword">override</span></span>;</span><br><span class="line">&#125;;　　</span><br></pre></td></tr></table></figure><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>用于修饰类、成员变量和成员函数。</p><ul><li>final修饰的类，不能被继承，其中所有的函数都不能被重写。</li><li>final修饰的成员函数不能被重写。</li><li>final修饰的变量不能更改。</li></ul><h3 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h3><p>类型自动推导</p><ul><li>用来声明返回值类型。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T1 x,T2 y)</span>-&gt;<span class="title">decltype</span><span class="params">(x+y)</span></span>; <span class="comment">//取决于T1 T2两个类的设计</span></span><br></pre></td></tr></table></figure><ul><li>函数模板设计中获取某对象类型</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(T obj)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="title">decltype</span><span class="params">(obj)</span>::iterator iType</span>;</span><br><span class="line">    <span class="comment">//防止编译不通过</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取<code>lambda</code>表达式的返回值的类型（用来声明）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> cmp = [](<span class="keyword">const</span> Person1&amp; p1,<span class="keyword">const</span> Person2&amp; p2)&#123;...&#125;;</span><br><span class="line"></span><br><span class="line">set&lt;Person,<span class="keyword">decltype</span>(cmp)&gt;<span class="built_in">Myset</span>(cmp);</span><br></pre></td></tr></table></figure><h3 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h3><p>无名仿函数。允许定义内联函数，用来当成参数、对象使用。是一组功能的定义，可以被定义在表达式里。</p><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[CaptureList] (ParamsList) <span class="keyword">mutable</span> exception-&gt; ReturnType &#123; FunctionBody &#125;</span><br></pre></td></tr></table></figure><ul><li><code>CaptureList</code>  —  捕获外部变量列表</li><li><code>ParamsList</code>  —  形参列表</li><li><code>mutable</code>  —  用来说明是否可以修改捕获的变量</li><li><code>exception</code>  —  异常设定</li><li><code>ReturnType</code>  —  返回类型</li><li><code>FunctionBody</code>  —  函数体</li></ul><h4 id="省略形式"><a href="#省略形式" class="headerlink" title="省略形式"></a>省略形式</h4><table><thead><tr><th>序号</th><th>格式</th></tr></thead><tbody><tr><td>1</td><td>[<code>CaptureList</code>] (<code>ParamsList</code>) -&gt; <code>ReturnType</code> {<code>FunctionBody</code>}</td></tr><tr><td>2</td><td>[<code>CaptureList</code>] (<code>ParamsList</code>) {<code>FunctionBody</code>}</td></tr><tr><td>3</td><td>[<code>CaptureList</code>] {<code>FunctionBody</code>}</td></tr></tbody></table><ul><li>格式1声明了<code>const</code>类型的表达式，这种类型的表达式<strong>不能修改</strong>捕获列表中的值。</li><li>格式2<strong>省略了返回值类型</strong>，但编译器可以<strong>根据以下规则推断</strong>出Lambda表达式的返回类型<ol><li>如果<code>FunctionBody</code>中<strong>存在</strong><code>return</code>语句，则该Lambda表达式的返回类型<strong>由</strong><code>return</code>语句的返回类型<strong>确定</strong>。</li><li>如果<code>FunctionBody</code>中<strong>没有</strong><code>return</code>语句，则返回值为<code>void</code>类型。</li></ol></li><li>格式3中省略了参数列表，类似普通函数中的无参函数。</li></ul><blockquote><p>参数详解</p></blockquote><h5 id="CaptureList"><a href="#CaptureList" class="headerlink" title="CaptureList"></a>CaptureList</h5><p> Lambda表达式与普通函数最大的区别是，除了可以使用参数以外，Lambda函数还可以通过捕获列表访问一些上下文中的数据。</p><ul><li>[]、[var]、[&amp;var]表示不捕获、值传递、引用传递</li><li>[=]表示<strong>值传递</strong>方式捕获<strong>所有</strong>父作用域的变量</li><li>[&amp;]表示<strong>引用传递</strong>方式捕捉<strong>所有</strong>父作用域的变量</li></ul><h5 id="ParamsList"><a href="#ParamsList" class="headerlink" title="ParamsList"></a>ParamsList</h5><p> 除了捕获列表之外，lambda还可以接受输入参数。参数列表是<strong>可选</strong>的。</p><h5 id="mutable"><a href="#mutable" class="headerlink" title="mutable"></a>mutable</h5><p>mutable<strong>修饰符</strong>， 默认情况下Lambda函数总是一个<code>const</code>函数，<code>mutable</code>可以取消其常量性。</p><blockquote><p>在使用该修饰符时，参数列表不可省略。</p></blockquote><h5 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h5><p>指示 Lambda 表达式不会引发任何异常。</p><h5 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType</h5><p>返回类型会<strong>自动推导</strong></p><h5 id="FunctionBody"><a href="#FunctionBody" class="headerlink" title="FunctionBody"></a>FunctionBody</h5><p>可以包含普通方法或函数的主体可以包含的任何内容。</p><h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; myvec&#123; <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">lbvec</span><span class="params">(myvec)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(myvec.<span class="built_in">begin</span>(), myvec.<span class="built_in">end</span>(), cmp); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda表达式</span></span><br><span class="line"><span class="built_in">sort</span>(lbvec.<span class="built_in">begin</span>(), lbvec.<span class="built_in">end</span>(), [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; <span class="keyword">bool</span> &#123; <span class="keyword">return</span> a &lt; b; &#125;);   </span><br><span class="line"></span><br><span class="line"><span class="comment">//特例</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> func = [id]()<span class="keyword">mutable</span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;id = &quot;</span>&lt;&lt; id &lt;&lt; endl;</span><br><span class="line">    ++id;<span class="comment">//如果没有mutable id不可更改</span></span><br><span class="line">&#125;</span><br><span class="line">id = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;id = &quot;</span> &lt;&lt; id&lt;&lt; endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">200</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Rvalue-reference"><a href="#Rvalue-reference" class="headerlink" title="Rvalue reference"></a>Rvalue reference</h3><p>右值引用。</p><p>通俗来说，可以取地址、有名字的为左值。（在内存中有实际地址的值、可以出现在赋值左侧的值）</p><p>右值引用就是对一个右值进行引用的类型。左值引用就是对一个左值进行引用的类型。</p><p>为了解决非必要的拷贝。当赋值的右侧为一个右值时，左侧可以在右侧偷出值，而不需要调用构造器。</p><h4 id="左值引用"><a href="#左值引用" class="headerlink" title="左值引用"></a>左值引用</h4><p>左值引用包括常量左值引用和非常量左值引用。非常量左值引用只能接受左值，不能接受右值；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;a = <span class="number">2</span>;       <span class="comment">// 非常量左值引用 绑定到 右值，编译失败</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;        <span class="comment">// b 是非常量左值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;c = b; <span class="comment">// 常量左值引用 绑定到 非常量左值，编译通过</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d = <span class="number">2</span>;  <span class="comment">// d 是常量左值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;e = d; <span class="comment">// 常量左值引用 绑定到 常量左值，编译通过</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;f =<span class="number">2</span>;  <span class="comment">// 常量左值引用 绑定到 右值，编译通过</span></span><br></pre></td></tr></table></figure><h4 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h4><p>右值引用独立于左值和右值。即，右值引用类型的变量可能是左值也可能是右值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp;&amp; var1 = x;</span><br></pre></td></tr></table></figure><p>var1类型为右值引用，但var1本身是左值，因为具名变量都是左值。</p><p>T&amp;&amp; 并不一定表示右值，它绑定的类型是未定的，既可能是左值又可能是右值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T&amp;&amp; param)</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">f</span>(<span class="number">10</span>); <span class="comment">//param是右值</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">f</span>(x); <span class="comment">//param是左值</span></span><br><span class="line"><span class="comment">/*****************</span></span><br><span class="line"><span class="comment">参数为右值10时</span></span><br><span class="line"><span class="comment">param 被一个右值初始化</span></span><br><span class="line"><span class="comment">那么 param 就是右值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">当参数为左值 x 时</span></span><br><span class="line"><span class="comment">param 被一个左值初始化</span></span><br><span class="line"><span class="comment">那么 param 就是一个左值</span></span><br><span class="line"><span class="comment">*****************/</span></span><br></pre></td></tr></table></figure><h4 id="std-move"><a href="#std-move" class="headerlink" title="std::move()"></a>std::move()</h4><p>该函数并不能移动任何东西，它唯一的功能是将一个左值强制转化为右值引用，继而可以通过右值引用使用该值，以用于移动语义。从实现上讲，std::move基本等同于一个类型转换<code>static_cast&lt;T&amp;&amp;&gt;(Lvalue);</code></p><h3 id="Perfect-forwarding"><a href="#Perfect-forwarding" class="headerlink" title="Perfect forwarding"></a>Perfect forwarding</h3><p><code>nonperfect forwarding</code>  —  当我们对一个右值调用函数时，右值会调用<code>move</code>函数，然后调用函数时调用相应的左指的函数。此时即为一个不完美的交付</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp; i)</span></span>&#123; cout&lt;&lt;<span class="string">&quot;process(&amp;)&quot;</span>&lt;&lt;i&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span></span>&#123; cout&lt;&lt;<span class="string">&quot;process(&amp;&amp;)&quot;</span>&lt;&lt;i&lt;&lt;endl;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">(<span class="keyword">int</span>&amp;&amp; i)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;forward(&amp;&amp;)&quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">process</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">forward(<span class="number">2</span>);</span><br><span class="line"><span class="comment">/*************</span></span><br><span class="line"><span class="comment">首先2是右值 调用相应函数</span></span><br><span class="line"><span class="comment">调用之后在forward(int &amp;&amp;)中</span></span><br><span class="line"><span class="comment">i变为一个左值，调用process(int &amp;)</span></span><br><span class="line"><span class="comment">而理想状态应该调用process(int &amp;&amp;)</span></span><br><span class="line"><span class="comment">故，为一个不完美的交付</span></span><br><span class="line"><span class="comment">**************/</span></span><br></pre></td></tr></table></figure><p>标准库中提供函数<code>std::foward</code>来实现完美的交付</p><h3 id="容器array"><a href="#容器array" class="headerlink" title="容器array"></a>容器array</h3><p>没有<code>ctor</code>，没有<code>dtor</code>。封装成类的数组。创建时指定大小，不可扩容。</p><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>元组是将不同类型的元素打包到一个对象中使用，就像<code>pair</code>适用于成对的元素，但<code>tuple</code>可以泛化为任意数量的元素。相关函数如下</p><ul><li><code>tuple_size()</code>  —  获取元组中元素的个数</li><li><code>tuple_element()</code>  —  访问tuple中指定位置的元素</li><li><code>make_tuple()</code>  —  构造包含指定内容的元组</li><li><code>get&lt;index&gt;()</code>  —  获取元组中第index个元素</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="keyword">int</span>,<span class="keyword">double</span>,string&gt; <span class="title">temp</span><span class="params">(<span class="number">11</span>,<span class="number">42.2</span>,<span class="string">&quot;xxx&quot;</span>)</span></span>;<span class="comment">//手动建元组</span></span><br><span class="line">get&lt;id&gt;(temp);<span class="comment">//获取元组temp中的第id个元素</span></span><br><span class="line"><span class="keyword">auto</span> temp2 = <span class="built_in">make_tuple</span>(<span class="number">15</span>,<span class="number">41.3</span>,<span class="string">&quot;sss&quot;</span>);<span class="comment">//把括号里的一包xxx生成为tuple</span></span><br><span class="line">cout &lt;&lt;tuple_size&lt;<span class="keyword">decltype</span>(temp)&gt;::value;<span class="comment">//元组中元素个数 3</span></span><br><span class="line">cout &lt;&lt;tuple_element&lt;<span class="number">0</span>,<span class="keyword">decltype</span>(temp)&gt;::type;<span class="comment">//第0个元素</span></span><br><span class="line">cout &lt;&lt; temp &lt;&lt;endl;<span class="comment">//tuple可以直接cout</span></span><br><span class="line">get&lt;<span class="number">1</span>&gt;(temp) = get&lt;<span class="number">1</span>&gt;(temp2);<span class="comment">//取元素赋值</span></span><br><span class="line">temp = temp2;<span class="comment">//直接赋值</span></span><br><span class="line"><span class="keyword">int</span> myint;</span><br><span class="line"><span class="keyword">double</span> mydouble;</span><br><span class="line">string mystring;</span><br><span class="line"><span class="built_in">tie</span>(myint,mydouble,mystring) = temp;<span class="comment">//tie对应赋值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文综合了候捷老师「C++11/C++14课程」的内容及一些其他的自己已知的C++11的内容。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CPP" scheme="http://example.com/tags/CPP/"/>
    
    <category term="候捷" scheme="http://example.com/tags/%E5%80%99%E6%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-15T00:09:04.000Z</published>
    <updated>2023-03-17T12:43:46.495Z</updated>
    
    <content type="html"><![CDATA[<p>本文是学习李建忠「设计模式」课程所记录的笔记，由于<code>GitHub Page</code>图片加载过于缓慢，类图已移除。若要查看有类图的版本，请移步<a href="https://blog.csdn.net/weixin_46065476/article/details/126336516">CSDN</a>或<a href="https://github.com/ikun7355608/cpp_Design_Patterns">GitHub</a></p><span id="more"></span><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>设计模式目标  —  <strong>可复用</strong></p><p>设计模式假设条件  —  存在稳定点</p><p>设计模式真谛  —  编译时复用，运行时变化。</p><table><thead><tr><th align="center">思维方式</th><th align="center">作用</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">底层思维</td><td align="center">把握机器底层微观构造</td><td align="center">语言构造、编译转换、内存模型、运行机制</td></tr><tr><td align="center">抽象思维</td><td align="center">将现实世界抽象为程序代码</td><td align="center">面向对象、组件封装、设计模式、架构模式</td></tr></tbody></table><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul><li><p>向下</p><ul><li><p>封装  —  隐藏内部代码</p></li><li><p>继承  —  复用已有代码</p></li><li><p>多态  —  改写对象行为</p></li></ul></li></ul><ul><li><p>向上</p><ul><li>深刻把握面向对象机制带来的抽象意义，理解如何利用这些机制来表达现实世界。</li></ul></li></ul><h4 id="软件设计复杂原因"><a href="#软件设计复杂原因" class="headerlink" title="软件设计复杂原因"></a>软件设计复杂原因</h4><p>软件设计复杂性根本原因  —  <strong>变化</strong>（客户需求、技术平台、开发团队、市场）</p><h4 id="解决复杂性"><a href="#解决复杂性" class="headerlink" title="解决复杂性"></a>解决复杂性</h4><ul><li><p>分解  —  分而治之，大问题分解为多个小问题，复杂问题分解为多个简单问题(独立实现每个小类，分别实现相应的功能)</p></li><li><p>抽象  —  由于不能掌握全部复杂对象，选择忽视一些非本质的细节。而去处理泛化和理想化的对象模型。（抽象一个虚基类，每个具体小类继承并重写）</p></li></ul><h4 id="C-对象模型"><a href="#C-对象模型" class="headerlink" title="C++对象模型"></a>C++对象模型</h4><p>几乎所有的设计模式都采用类内部组合一个对象指针的形式（指针指向多态对象以解耦合）</p><h4 id="什么时候不用设计模式"><a href="#什么时候不用设计模式" class="headerlink" title="什么时候不用设计模式"></a>什么时候不用设计模式</h4><ul><li>代码可读性差</li><li>需求理解很浅</li><li>变化尚未显现</li><li>不是系统关键依赖点</li><li>项目无复用价值</li><li>项目将要发布</li></ul><h4 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h4><ul><li>不要为了模式而模式</li><li>关注抽象类和接口</li><li>理清变化点和稳定点</li><li>审视依赖关系</li><li>要有框架和应用的区隔思维</li><li>良好的设计是演化的结果</li></ul><h4 id="设计模式成长之路"><a href="#设计模式成长之路" class="headerlink" title="设计模式成长之路"></a>设计模式成长之路</h4><ol><li>「手中无剑，心中无剑」  —  见模式而不知</li><li>「手中有剑，心中无剑」  —  可以识别模式，作为应用开发人员使用模式</li><li>「手中有剑，心中有剑」  —  作为框架开发人员为应用设计模式</li><li>「手中无剑，心中有剑」  —  忘掉模式，只有原则</li></ol><h3 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h3><p>面向对象设计最大优势  —  <strong>抵御变化</strong></p><h4 id="面向对象-1"><a href="#面向对象-1" class="headerlink" title="面向对象"></a>面向对象</h4><ul><li>隔离变化  —  面向对象构建方式更能适应软件变化，能将变化带来的影响降到最小（宏观）</li><li>各司其职  —  需求变化导致的新增类型，不影响原来类型的实现（微观）</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li>语言层面  —  对象封装了代码和数据</li><li>规格层面  —  对象定义了一系列接口</li><li>概念层面  —  对象是拥有某种责任的抽象</li></ul><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><ol><li><p>依赖倒置原则(DIP)</p><ul><li><p>高层模块（稳定）不应该依赖于低层模块（变化），二者均依赖于抽象（稳定）。</p></li><li><p>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。</p></li></ul></li><li><p>开放封闭原则(OCP)</p><ul><li><p>对扩展开放，对更改封闭</p></li><li><p>类模块应该是可扩展的，但不可修改。</p></li></ul></li><li><p>单一职责原则(SRP)</p><ul><li>一个类应该仅有一个引起变化的原因</li><li>变化的方向隐含类的责任</li></ul></li><li><p>Liskov替换原则(LSP)</p><ul><li>子类必须能够替换基类（子类能调用父类方法）</li><li>继承表达类型抽象</li></ul></li><li><p>接口隔离原则(ISP)</p><ul><li>不应该强迫客户程序（使用者）依赖不用的方法</li><li>接口应该小而完备</li></ul></li><li><p>优先使用对象组合，而不是类继承</p><ul><li>类继承通常为「白盒复用」，对象组合通常为「黑盒复用」</li><li>继承在某种程度上破坏了封装性，耦合度高。而对象组合则要求被组合的对象具有良好定义的接口，耦合度低。</li></ul></li><li><p>封装变化点</p><ul><li>使用封装创建对象之间的分界层，让设计者可以在其一侧修改，不会对另一侧产生不良影响。实现层次间的松耦合</li></ul></li><li><p>针对接口编程，而非针对实现。</p><ul><li>不将变量类型声明为具体类，而是声明为接口。</li><li>客户程序无需知晓对象的具体类型，只需要知道所具有的接口。</li></ul></li></ol><p>产业强盛标志  —  <strong>接口标准化</strong></p><h4 id="设计经验"><a href="#设计经验" class="headerlink" title="设计经验"></a>设计经验</h4><p>由设计原则归纳、总结出的点</p><ol><li><p>设计习语(Design Idioms)  —  与特定编程语言相关的底层模式、技巧惯用法</p></li><li><p>设计模式(Design Patterns)  —  类与对象之间的组织关系，包括角色、职责、协作方式</p></li><li><p>架构模式(Architectural Patterns)  —  系统中与组织结构关系密切的高层模式，包括子系统划分、职责、组织关系。</p></li></ol><h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><p>23个设计模式的分类原则</p><ul><li><p>目的</p><ul><li><p>创建型  —  对象创建</p></li><li><p>结构型  —  对象需求变化对结构造成的冲击</p></li><li><p>行为型  —  多个类交互</p></li></ul></li><li><p>范围</p><ul><li>类模式  —  处理类与子类的静态关系（继承）</li><li>对象模式  —  对象间的动态关系（组合）</li></ul></li><li><p>封装变化</p><ul><li>组件协作  —  <code>Template Method、Strategy、Observer/Event</code></li><li>单一职责  —  <code>Decorator、Bridge</code></li><li>对象创建  —  <code>Factory Method、Abstract Factory、Prototype、Builder</code></li><li>对象性能  —  <code>Singleton、Flyweight</code></li><li>接口隔离  —  <code>Facade、Proxy、Mediator、Adapter</code></li><li>状态变化  —  <code>Memento、State</code></li><li>数据结构  —  <code>Composite、Iterator、Chain of Resposibility</code></li><li>行为变化  —  <code>Command、Visitor</code></li><li>领域问题  —  <code>Interpreter</code></li></ul></li></ul><blockquote><p>由于时代的发展，一些设计模式已不常用：<code>Builder、Mediator、Memento、Iterator、Chain of Resposibility、Command、Interpreter、Visitor</code></p></blockquote><h4 id="Refactoring-to-Patterns"><a href="#Refactoring-to-Patterns" class="headerlink" title="Refactoring to Patterns"></a>Refactoring to Patterns</h4><p><code>重构获得模式</code>是普遍认为最好的使用设计模式方法</p><ul><li>面向对象设计模式可以应对变化、提高复用。</li><li>现代软件设计特征  —  需求频繁变化。</li><li>设计模式的要点  —  寻找变化点（将稳定部分和变化不分分离开），变化点处使用设计模式来应对变化</li><li>设计模式的应用不该先入为主（防止误用）。没有一步到位的设计模式。（故，要<code>Refactoring to Patterns</code>）</li></ul><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li>自主增加相应的模块</li><li>思考违背哪些设计原则</li><li>重构代码</li></ol><h5 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h5><ul><li>静态绑定$\to$动态绑定</li><li>早绑定$\to$晚绑定</li><li>继承$\to$组合</li><li>编译时依赖$\to$运行时依赖</li><li>紧耦合$\to$松耦合</li></ul><h2 id="GoF23"><a href="#GoF23" class="headerlink" title="GoF23"></a>GoF23</h2><h3 id="组件协作"><a href="#组件协作" class="headerlink" title="组件协作"></a>组件协作</h3><p>通过晚期绑定，实现<strong>框架与应用程序</strong>之间的松耦合。实现「框架与应用程序之间的划分」</p><h4 id="Template-Method"><a href="#Template-Method" class="headerlink" title="Template  Method"></a>Template  Method</h4><p>模板方法。定义一个操作中的算法的骨架（稳定），将一些步骤延迟（变化）到子类。使得子类可以不改变一个算法的结构（复用），同时重定义该算法的某些特定步骤。</p><h5 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h5><p>软件构造过程中，对于某项任务，有<strong>稳定</strong>的整体操作<strong>结构</strong>，但各个子步骤却有很多<strong>改变</strong>的需求；或者由于固有原因而无法和任务整体结构同时实现。</p><p>模板方法能够在<strong>稳定操作</strong>的前提下，灵活应对各个<strong>子步骤的变化</strong>及晚期实现需求。</p><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Template  Method</code>是非常常用的基础设计模式，面向对象系统中大量使用。</li><li><code>Template  Method</code>机制简洁(虚函数的重载)，为许多应用程序架构提供了灵活扩展点，是代码复用层面的基本实现结构。</li><li><code>Template  Method</code>内含反向控制结构(<code>App</code>调用<code>Lib</code>中的方法 $\to$ <code>Lib</code>调用<code>App</code><strong>重写</strong>的方法)</li><li><code>Template  Method</code>调用的虚方法可以不做实现，但一般设计为<code>protected</code>方法。(流程中的一部分，不供外界调用)</li></ul><h5 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h5><p>基类（Lib）实现执行流程，关于具体细节部分（步骤的详情），通过相应的派生类（App）去重写。</p><blockquote><p>步骤的具体功能改变，不需要重写框架中的执行流程</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Library</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//具体执行流程（定）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">Step1</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Step2</span>()) &#123;</span><br><span class="line">            <span class="built_in">Step3</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Library</span>() &#123;...&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// 定</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Step1</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Step3</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="comment">// 变</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Step2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span> :</span> <span class="keyword">public</span> Library &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Step2</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Library* pLib = <span class="keyword">new</span> <span class="built_in">Application</span>();</span><br><span class="line">    pLib-&gt;<span class="built_in">Run</span>();</span><br><span class="line">    <span class="keyword">delete</span> pLib;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h4><p>策略模式。定义一系列算法，分别封装，并且使他们可以相互替换(<strong>变化</strong>)。该模式使得算法「独立」于使用他的客户程序(稳定)而变化。</p><h5 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h5><p>软件构造过程中，某些对象使用的<strong>算法多种多样</strong>，经常改变。如果将算法都编码到对象中，会使得对象异常复杂且冗余。</p><p>策略模式能够在运行时根据需求透明的更改对象的算法，将算法与对象解耦合。</p><h5 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h5><p>银行支持多个国家税额的计算。具体的支持国家会根据银行的发展改变。</p><blockquote><p>增加新的国家税额计算方式时（具体实现细节、客户程序），无需改变框架（算法）。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算策略 定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxStrategy</span>&#123;</span></span><br><span class="line">    TaxBase tax;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">CalculateTax</span><span class="params">(...)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">CalculateTax</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体国家的计算式 变</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CNTax</span> :</span> <span class="keyword">public</span> TaxStrategy &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">CalculateTax</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//订单类 需要计算的值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesOrder</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaxStrategy* strategy;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//传入国家，新增</span></span><br><span class="line">    <span class="built_in">SalesOrder</span>(...) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strategy = <span class="keyword">new</span> ...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Strategy</code>及其子类为组件提供一系列可重用算法，使得运行时方便切换。</li><li><code>Strategy</code>提供了条件判断语句以外的选择，消除判断本身以解耦合。</li><li>如果<code>Strategy</code>对象不实例化，那么 各个上下文共享一个Strategy对象以节省开销。</li></ul><h4 id="Observer-Event"><a href="#Observer-Event" class="headerlink" title="Observer/Event"></a>Observer/Event</h4><p>观察者模式。定义一种对象间的<strong>一对多</strong>（变化）的依赖关系，以便当一个对象(Subject)的状态发生改变时，所有<strong>依赖它的对象</strong>都得到通知并<strong>自动更新</strong>。</p><h5 id="动机-2"><a href="#动机-2" class="headerlink" title="动机"></a>动机</h5><p>软件构造过程中，需要为某些对象创建一种“通知依赖关系”  —  一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）随之改变。若此依赖关系过于紧密，则软件不能很好的抵御变化。</p><p>观察者模式能够弱化这种依赖关系，形成稳定依赖关系、解耦合。</p><h5 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h5><p>文件分割器（U盘、移动硬盘太小装不下整个文件，要将文件划分为多个模块）中增加进度显示（变化，可能有多个细节方式实现。如：进度条、百分比）。</p><blockquote><p>分割的进度（主体对象）变化会引发进度显示（进度条、百分比）等观察者的变化。</p></blockquote><p>进度显示为一个用户反馈控件，抽象出相应的类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//框架--用户反馈机制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IProgress</span>&#123;</span>  <span class="comment">//用户反馈</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoProgress</span><span class="params">(<span class="keyword">float</span> value)</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">IProgress</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSplitter</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">string m_filePath;</span><br><span class="line"><span class="keyword">int</span> m_fileNumber;</span><br><span class="line">List&lt;IProgress*&gt;  m_iprogressList; <span class="comment">// 抽象反馈机制，支持多个观察者</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FileSplitter</span>(<span class="keyword">const</span> string&amp; filePath, <span class="keyword">int</span> fileNumber) :</span><br><span class="line"><span class="built_in">m_filePath</span>(filePath), </span><br><span class="line"><span class="built_in">m_fileNumber</span>(fileNumber)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.读取大文件</span></span><br><span class="line"><span class="comment">//2.分批次向小文件中写入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_fileNumber; i++)&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">float</span> progressValue = m_fileNumber;</span><br><span class="line">progressValue = (i + <span class="number">1</span>) / progressValue;</span><br><span class="line"><span class="built_in">onProgress</span>(progressValue);<span class="comment">//反馈</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//增加/减少 反馈（观察者个数）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIProgress</span><span class="params">(IProgress* iprogress)</span></span>&#123;</span><br><span class="line">m_iprogressList.<span class="built_in">push_back</span>(iprogress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeIProgress</span><span class="params">(IProgress* iprogress)</span></span>&#123;</span><br><span class="line">m_iprogressList.<span class="built_in">remove</span>(iprogress);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> value)</span></span>&#123; <span class="comment">//反馈内容</span></span><br><span class="line">List&lt;IProgress*&gt;::iterator iter=m_iprogressList.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (iter != m_iprogressList.<span class="built_in">end</span>() )</span><br><span class="line">(*iter)-&gt;<span class="built_in">DoProgress</span>(value); <span class="comment">//更新进度条</span></span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用框架</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainForm</span> :</span> <span class="keyword">public</span> Form, <span class="keyword">public</span> IProgress</span><br><span class="line">&#123;</span><br><span class="line">TextBox* txtFilePath;</span><br><span class="line">TextBox* txtFileNumber;</span><br><span class="line">ProgressBar* progressBar;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line">string filePath = txtFilePath-&gt;<span class="built_in">getText</span>();</span><br><span class="line"><span class="keyword">int</span> number = <span class="built_in">atoi</span>(txtFileNumber-&gt;<span class="built_in">getText</span>().<span class="built_in">c_str</span>());</span><br><span class="line">ConsoleNotifier cn;</span><br><span class="line"><span class="function">FileSplitter <span class="title">splitter</span><span class="params">(filePath, number)</span></span>;</span><br><span class="line">splitter.<span class="built_in">addIProgress</span>(<span class="keyword">this</span>); <span class="comment">//增加反馈 （观察者个数）</span></span><br><span class="line">splitter.<span class="built_in">addIProgress</span>(&amp;cn); <span class="comment">//增加反馈 （观察者个数）</span></span><br><span class="line">splitter.<span class="built_in">split</span>();</span><br><span class="line">splitter.<span class="built_in">removeIProgress</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoProgress</span><span class="params">(<span class="keyword">float</span> value)</span></span>&#123;</span><br><span class="line">progressBar-&gt;<span class="built_in">setValue</span>(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsoleNotifier</span> :</span> <span class="keyword">public</span> IProgress &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DoProgress</span><span class="params">(<span class="keyword">float</span> value)</span></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;....&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-2"><a href="#要点-2" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Observer</code>使得我们可以<strong>独立地改变</strong>目标与观察者，从而使二者之间的依赖关系达致松耦合。</li><li>目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会<strong>自动传播</strong>。</li><li>观察者自己决定是否需要订阅通知，目标对象对此一无所知。</li><li><code>Observer</code>是基于事件的UI框架中非常常用的设计模式，也是MVC模式的一个重要组成部分。</li></ul><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><p>如果责任划分不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时往往需要划清责任。</p><h4 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h4><p>装饰模式。动态（<strong>组合</strong>）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（<strong>继承</strong>）更为灵活（消除重复代码、减少子类个数）</p><h5 id="动机-3"><a href="#动机-3" class="headerlink" title="动机"></a>动机</h5><p>在某些情况下我们可能会“过度地使用继承来扩展对象的功能”，由于继承为类型引入的静态特质，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</p><p>装饰模式能够使“对象功能的扩展”根据需要来动态实现，避免子类膨胀，从而使得任何“功能扩展变化”所导致的影响降为最低。</p><h5 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h5><p>各个流(文件流、网络流、内存流)的库中存在着很多功能相同的模块。模块各自继承自相应的流，而功能相同。现，给各模块增加加密功能。</p><p><code>Crypto[File,Network,Memory]Stream::read/seek/write</code>$ \to $<code>CryptoStream::read/seek/write</code></p><ul><li><code>Crypto[File,Network,Memory]Stream::read/seek/write</code>  —  每个流中相应功能各自实现加密</li><li><code>CryptoStream</code>  —  脱离开具体流（避免了多次拷贝）</li></ul><blockquote><p>不同流中增加同一类似功能无需每个流均<strong>继承</strong>一份，单独封装后每个流在使用时，通过组合引入即可。 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stream</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileStream</span>:</span> <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;...&#125;    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemoryStream</span> :</span><span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">char</span> data)</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"><span class="comment">// 由于两个子类有相同的成员Stream*，所以这个成员要往上提</span></span><br><span class="line">DecoratorStream: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Stream* stream;<span class="comment">//复合</span></span><br><span class="line">    <span class="built_in">DecoratorStream</span>(Stream * stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoStream</span>:</span> <span class="keyword">public</span> DecoratorStream &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CryptoStream</span>(Stream* stm):<span class="built_in">DecoratorStream</span>(stm)&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">char</span> <span class="title">Read</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream-&gt;<span class="built_in">Read</span>(number);<span class="comment">//读XX流  XX为文件 | 网络 | 内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Seek</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Seek</span>(position);<span class="comment">//定位XX流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Write</span>(data);<span class="comment">//写XX流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    FileStream* s1=<span class="keyword">new</span> <span class="built_in">FileStream</span>();</span><br><span class="line">    CryptoStream* s2=<span class="keyword">new</span> <span class="built_in">CryptoStream</span>(s1); <span class="comment">//CryptoFileStream</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-3"><a href="#要点-3" class="headerlink" title="要点"></a>要点</h5><ul><li><p>通过采用组合而非继承的手法， <code>Decorator</code>实现了在<strong>运行时</strong>动态扩展对象功能的能力，而且可以根据需要扩展多个功能。<br>避免了使用继承带来的“灵活性差”和“多子类衍生问题”。</p></li><li><p>Decorator类在<strong>接口上表现为is-a</strong> Component的继承关系（Decorator类继承了Component类所具有的接口），但在<strong>实现上又表现为has-a</strong> Component的组合关系（Decorator类又使用了一个Component类）</p><blockquote><p>继承  —  完善接口的规范</p><p>组合  —  支撑具体实现类</p></blockquote></li><li><p>Decorator模式的目的并非解决“多子类衍生的多继承”问题，Decorator模式应用的<strong>要点</strong>在于解决<strong style="color:#c04851;">「主体类在多个方向上的扩展功能」</strong>——是为“装饰”的含义。</p></li></ul><h4 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h4><p>桥模式。将抽象部分(<strong>业务功能</strong>)与实现部分(<strong>平台实现</strong>)<strong>分离</strong>，使它们都可以独立地变化。</p><h5 id="动机-4"><a href="#动机-4" class="headerlink" title="动机"></a>动机</h5><p>某些类型的固有的实现逻辑，使得它们具有两个变化的维度，乃至多个纬度的变化。</p><p>桥模式能够应对这种「多维度的变化」，轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度。</p><h5 id="样例-4"><a href="#样例-4" class="headerlink" title="样例"></a>样例</h5><p>通信模块中，<code>Login  SendMessage  SendPicture  PlaySound  DrawShape  WriteText  Connect</code>等功能跨平台实现不太一样。平台中分为精简版、完美版。不同版本基本功能的实现是相似。</p><blockquote><p>原本这些功能存在平台、版本等多个维度的变化，实现时针对特定平台特定版本创建类<code>IOSLiteXXX</code>，导致代码过度冗余。<br>桥模式将平台、版本问题剥离（单一职责原则）。</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">      Messager &quot;1&quot;-- &quot;m&quot; Platform</span><br><span class="line">      Platform &quot;1&quot;-- &quot;n&quot; Release </span><br></pre></td></tr></table></figure><blockquote><p>原来需要实现<code>1+m+m*n</code>个类（1通信模块+扩展m个平台+每个平台n个发布版本）</p><p>桥模式无需根据相应的平台推出对应版本(<code>1+m+n</code>个类)。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Messager</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">     MessagerImp* messagerImp;<span class="comment">//平台</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Messager</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 不同的变化方向(业务和平台)，所以分为两个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagerImp</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">MessagerImp</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//平台实现 n</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PCMessagerImp</span> :</span> <span class="keyword">public</span> MessagerImp&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileMessagerImp</span> :</span> <span class="keyword">public</span> MessagerImp&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PlaySound</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">DrawShape</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">WriteText</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Connect</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//业务抽象 m</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagerLite</span> :</span><span class="keyword">public</span> Messager &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessagerPerfect</span>  :</span><span class="keyword">public</span> Messager &#123; </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Login</span><span class="params">(string username, string password)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        messagerImp-&gt;<span class="built_in">Connect</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendMessage</span><span class="params">(string message)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        messagerImp-&gt;<span class="built_in">WriteText</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">SendPicture</span><span class="params">(Image image)</span></span>&#123;</span><br><span class="line">        messagerImp-&gt;<span class="built_in">PlaySound</span>();</span><br><span class="line">        <span class="comment">//********</span></span><br><span class="line">        messagerImp-&gt;<span class="built_in">DrawShape</span>();</span><br><span class="line">        <span class="comment">//........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    MessagerImp* mImp=<span class="keyword">new</span> <span class="built_in">PCMessagerImp</span>();</span><br><span class="line">    Messager *m =<span class="keyword">new</span> <span class="built_in">Messager</span>(mImp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-4"><a href="#要点-4" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Bridge</code>使用「<strong>对象间的组合关系</strong>」解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自纬度的变化，即“子类化”它们。</li><li><code>Bridge</code>有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。Bridge模式是比多继承方案更好的解决方法。</li><li><code>Bridge</code>的应用一般在「两个非常强的变化维度」，有时一个类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。</li></ul><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><p>通过「对象创建」，绕开<code>new</code>以避免<code>new</code>过程所导致的紧耦合（依赖于具体类），从而支持对象创建的稳定。「对象创建」是接口抽象后的第一步工作。</p><h4 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h4><p>工厂方法。定义一个用于创建对象的接口，让子类决定实例化哪一个类。<code>Factory Method</code>使得一个类的实例化延迟到子类。（目的  —  解耦合，手段  —  虚函数）</p><h5 id="动机-5"><a href="#动机-5" class="headerlink" title="动机"></a>动机</h5><p>在软件系统中，经常面临着创建对象的工作；由于需求的变化，需要创建的对象的具体类型经常变化。</p><p>工厂方法能够<strong>绕过</strong>new创建对象（<strong>具体实现类</strong>），提供一种“封装机制”来避免客户程序和“具体对象创建工作”的紧耦合。</p><h5 id="样例-5"><a href="#样例-5" class="headerlink" title="样例"></a>样例</h5><p>分割器不局限于文本分割器，还包括图片、视频、文本等多个分割器。实例化对象创建时不受限于具体某种分割器（具体工厂）。</p><blockquote><p>工厂模式提供了基类使得多个具体类的实例化代码统一。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISplitter</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//工厂基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SplitterFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">SplitterFactory</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySplitter</span> :</span> <span class="keyword">public</span> ISplitter&#123;...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TxtSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PictureSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TxtSplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TxtSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PictureSplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">PictureSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoSplitterFactory</span>:</span> <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">VideoSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainForm</span> :</span> <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    SplitterFactory*  factory;<span class="comment">//工厂</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainForm</span>(SplitterFactory*  factory)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;factory=factory;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line">ISplitter * splitter = factory-&gt;<span class="built_in">CreateSplitter</span>(); <span class="comment">//多态new</span></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-5"><a href="#要点-5" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Factory Method</code>用于<strong>隔离</strong>类对象的<strong>使用者</strong>和<strong>具体类型</strong>之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导致软件的脆弱。</li><li><code>Factory Method</code>通过<strong>面向对象的手法</strong>(多态)，将所要创建的具体对象工作<strong style="color:red;">延迟</strong>到子类，从而实现一种<strong>扩展</strong>（<strong style="color:red;">而非更改</strong>）的策略，较好地解决了这种紧耦合关系。</li><li><code>Factory Method</code>解决「单个对象」的需求变化。缺点在于要求创建方法/参数相同。</li></ul><h4 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h4><p>抽象工厂。提供一个接口，让该接口负责创建一系列「相关或者相互依赖的对象」，无需指定它们具体的类。</p><h5 id="动机-6"><a href="#动机-6" class="headerlink" title="动机"></a>动机</h5><p>在软件系统中，经常面临着「一系列相互依赖的对象工作」；同时，由于需求的变化，往往存在更多系列对象的创建工作。</p><p>抽象工厂能够绕过new创建对象，提供一种“封装机制”来避免<strong>客户程序</strong>和这种「<strong>多系列具体对象创建工作</strong>」的紧耦合。</p><h5 id="样例-6"><a href="#样例-6" class="headerlink" title="样例"></a>样例</h5><p>数据库模块，支持多种数据库的<code>Connection  Command</code>等操作。区别于<code>Bridge</code>，该处的侧重点不在于<code>操作  数据库类型</code>这多维度的变化，而是侧重于「每个数据库类型的Command会调用同类型数据的Connection」（多系列对象）</p><blockquote><p>由于<code>XXXCommand</code>调用的<code>Connection</code>一定是<code>XXXConnection</code>，存在系列对象的相互依赖、相互作用。</p><p>抽象工厂模式将系列操作封装为一个工厂，保证多系列对象创建之间的相互依赖的同时，摆脱具体实现类。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据库访问有关的基类 产品基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBConnection</span>&#123;</span>...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBCommand</span>&#123;</span>...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDataReader</span>&#123;</span>...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂 统一系列化对象（相互作用）  工厂基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IDBFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBConnection* <span class="title">CreateDBConnection</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBCommand* <span class="title">CreateDBCommand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDataReader* <span class="title">CreateDataReader</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//支持SQL Server 具体产品实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlConnection</span>:</span> <span class="keyword">public</span> IDBConnection&#123;...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlCommand</span>:</span> <span class="keyword">public</span> IDBCommand&#123;...&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDataReader</span>:</span> <span class="keyword">public</span> IDataReader&#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlDBFactory</span>:</span><span class="keyword">public</span> IDBFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBConnection* <span class="title">CreateDBConnection</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDBCommand* <span class="title">CreateDBCommand</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IDataReader* <span class="title">CreateDataReader</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeDAO</span>&#123;</span></span><br><span class="line">    IDBFactory* dbFactory;    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;EmployeeDO&gt; <span class="title">GetEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">        IDBConnection* connection = dbFactory-&gt;<span class="built_in">CreateDBConnection</span>();</span><br><span class="line">        connection-&gt;<span class="built_in">ConnectionString</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        IDBCommand* command =dbFactory-&gt;<span class="built_in">CreateDBCommand</span>();</span><br><span class="line">        command-&gt;<span class="built_in">CommandText</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        command-&gt;<span class="built_in">SetConnection</span>(connection); <span class="comment">//关联性</span></span><br><span class="line">        IDBDataReader* reader = command-&gt;<span class="built_in">ExecuteReader</span>(); <span class="comment">//关联性</span></span><br><span class="line">        <span class="keyword">while</span> (reader-&gt;<span class="built_in">Read</span>())&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-6"><a href="#要点-6" class="headerlink" title="要点"></a>要点</h5><ul><li>如果没有应对”多<strong>系列对象</strong>创建“的需求变化，则没有必要使用Abstract Factory模式，这时候使用简单的工厂即可。</li><li><strong>「系列对象」</strong>指的是在某一个特定系列的对象之间有<strong>相互依赖、相互作用</strong>的关系。不同系列的对象之间不能相互依赖。</li><li><code>Abstract Factory</code>模式主要在于应用「新系列」的需求变动(增加其他系列操作)。其缺点在与<strong>难以应对新对象</strong>的需求变动（在系列操作中更改）。</li></ul><h4 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h4><p>原型模式。使用原型实例（仅供克隆）指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</p><h5 id="动机-7"><a href="#动机-7" class="headerlink" title="动机"></a>动机</h5><p>在软件系统中，经常面临这“某些结构复杂的对象”的创建工作；由于需求的变化，这些对象<strong>经常面临着剧烈的变化</strong>，但是它们却拥有比较稳定一致的接口。</p><p>原型模式能够向客户程序(使用者)隔离出「易变对象」，从而使得依赖这些易变对象的客户程序不随着需求改变而改变。</p><h5 id="样例-7"><a href="#样例-7" class="headerlink" title="样例"></a>样例</h5><p>同工厂方法的背景</p><blockquote><p>对象比较复杂时，利用工厂方法初始化的对象不便于使用。借助已经处于某种状态的原型，克隆出处于理想状态（避免状态条件苛刻带来不必要的资源浪费）的对象。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainForm</span> :</span> <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    ISplitter*  prototype;<span class="comment">//原型对象</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainForm</span>(ISplitter*  prototype)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;prototype=prototype;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line">ISplitter * splitter=</span><br><span class="line">            prototype-&gt;<span class="built_in">clone</span>(); <span class="comment">//克隆原型</span></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类 原型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISplitter</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>=<span class="number">0</span>; <span class="comment">//通过克隆自己来创建对象</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//具体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySplitter</span> :</span> <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VideoSplitter</span>:</span> <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">VideoSplitter</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="要点-7"><a href="#要点-7" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Prototype</code>模式同样用于<strong>隔离</strong>对象的<strong>使用者和具体类型</strong>(易变类)之间的耦合关系，它同样要求这些“易变类”拥有<strong>稳定的接口</strong>。(和工厂方法一样)</li><li><code>Prototype</code>模式对于“如何创建易变类的实体对象“采用<strong>「原型克隆」</strong>的方法来做，它使得我们可以非常灵活地动态创建「拥有某些稳定接口」的新对象——所需工作仅仅是注册一个新类的对象(即原型)，然后在任何需要的地方clone。</li><li><code>Prototype</code>模式中的Clone方法可以利用某些框架中的序列化来实现深拷贝。(c++用拷贝构造函数即可)</li></ul><h4 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h4><p>构建器。将一个复杂对象的<strong>构建</strong>与其表示相分离，使得<strong>同样的构建过程</strong>(稳定)可以<strong>创建不同的表示</strong>(变化)。</p><h5 id="动机-8"><a href="#动机-8" class="headerlink" title="动机"></a>动机</h5><p>在软件系统中，有时候面临着“一个<strong>复杂对象</strong>”的创建工作，其通常<strong>由各个部分的子对象</strong>用一定的算法<strong>构成</strong>；由于需求的变化，这个复杂对象的<strong>各个部分</strong>经常面临着剧烈的<strong>变化</strong>，但是将它们组合在一起的<strong>算法却相对稳定</strong>。</p><p>构建器提供一种<strong>封装机制</strong>来隔离出「复杂对象的各个部分」的变化，从而保持系统中的「稳定构建算法」不随着需求改变而改变。</p><blockquote><p><code>Builder</code>用于解决<strong>对象创建</strong>时的算法恒定，细节各异的问题。(构造函数调用虚函数不能实现多态)<br><br><code>Template Method</code>用于解决<strong>函数应用</strong>时的算法恒定，细节各异的问题。（成员函数可以调用虚函数实现多态）</p></blockquote><p>为什么构造函数调用虚函数不能实现多态？</p><blockquote><p>子类构造函数要先调用父类构造函数，虚函数实现重载靠的是动态绑定。<br>如果构造函数中的虚函数为动态绑定(多态)，则子类在构造时，子类的构造函数先调用父类构造函数，而此时父类构造函数不能调用子类的重载函数（子类还未创建，没有虚表。）</p></blockquote><h5 id="样例-8"><a href="#样例-8" class="headerlink" title="样例"></a>样例</h5><p>游戏里建房子，使用的材料各异，但构建的流程不变。</p><blockquote><p>由于构造函数的特殊性质，不能直接借助虚函数在构造函数中实现上述功能。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span>&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//抽象基类 需要的几个构造部分 (门、窗、桌子)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">House* <span class="title">GetResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pHouse;<span class="comment">//构造完返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">HouseBuilder</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    House* pHouse;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart1</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart2</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart3</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart4</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart5</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoneHouse</span>:</span> <span class="keyword">public</span> House&#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoneHouseBuilder</span>:</span> <span class="keyword">public</span> HouseBuilder&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">//每部分构造的具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart1</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart2</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart3</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart4</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart5</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//造房子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span>&#123;</span>   </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HouseBuilder* pHouseBuilder;</span><br><span class="line">    <span class="built_in">HouseDirector</span>(HouseBuilder* pHouseBuilder)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pHouseBuilder=pHouseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">House* <span class="title">Construct</span><span class="params">()</span></span>&#123;<span class="comment">//分别构造每一部分</span></span><br><span class="line">        pHouseBuilder-&gt;<span class="built_in">BuildPart1</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            pHouseBuilder-&gt;<span class="built_in">BuildPart2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=pHouseBuilder-&gt;<span class="built_in">BuildPart3</span>();</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            pHouseBuilder-&gt;<span class="built_in">BuildPart4</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        pHouseBuilder-&gt;<span class="built_in">BuildPart5</span>();</span><br><span class="line">        <span class="keyword">return</span> pHouseBuilder-&gt;<span class="built_in">GetResult</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-8"><a href="#要点-8" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Builder </code>模式主要用于“<strong>分步骤构建</strong>一个复杂的对象”。在这其中“分步骤”是一个<strong>稳定的算法</strong>，而复杂对象的<strong>各个部分</strong>则经常<strong>变化</strong>。</li><li>变化点在哪里，封装哪里—— <code>Builder</code>模式主要在于应对“复杂对象各个部分”的频繁需求变动。其缺点在于难以应对“分步骤构建算法”的需求变动。</li><li>在<code>Builder</code>模式中，要注意不同语言中构造器内<strong>调用虚函数的差别</strong>。</li></ul><h3 id="对象性能"><a href="#对象性能" class="headerlink" title="对象性能"></a>对象性能</h3><p>面向对象很好地解决了“抽象”的问题，但是必不可免地要付出一定的代价。对于通常情况来讲，面向对象的成本大都可以忽略不计。但是<strong>某些情况，面向对象所带来的成本必须谨慎处理</strong>。</p><h4 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h4><p>单件模式。保证一个<strong>类仅有一个实例</strong>，并<strong>提供</strong>一个该实例的<strong>全局访问点</strong>。</p><h5 id="动机-9"><a href="#动机-9" class="headerlink" title="动机"></a>动机</h5><p>在软件系统中，经常有这样一些<strong>特殊的类</strong>，必须保证它们在系统中<strong>只存在一个实例</strong>，才能确保它们的逻辑正确性、以及良好的效率。这应该是类设计者的责任，而不是使用者的责任。</p><p>单件模式可以绕过常规的构造器，提供一种机制来保证一个类只有一个实例。</p><h5 id="样例-9"><a href="#样例-9" class="headerlink" title="样例"></a>样例</h5><p>具体的单件创建方案的演变见代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//默认构造、拷贝构造不声明会自动生成</span></span><br><span class="line">    <span class="built_in">Singleton</span>();</span><br><span class="line">    <span class="built_in">Singleton</span>(<span class="keyword">const</span> Singleton&amp; other);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> Singleton* m_instance;</span><br><span class="line">&#125;;</span><br><span class="line">Singleton* Singleton::m_instance=<span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程非安全版本（多线程不可用）</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//线程A判为true，但并未new，在等待执行</span></span><br><span class="line"><span class="comment">//此时线程B如果调用，则仍可以判为true</span></span><br><span class="line">    <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        m_instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程安全版本，但锁的代价过高</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Lock lock;</span><br><span class="line">    <span class="comment">//某线程判true则加锁</span></span><br><span class="line">    <span class="comment">//但，只有第一次创建时是写操作，大部分为读操作。</span></span><br><span class="line">    <span class="comment">//此后的多线程读时，浪费时间。</span></span><br><span class="line">    <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        m_instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//双检查锁，但由于内存读写reorder不安全</span></span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//锁前检查，读操作可直接跳进锁流程</span></span><br><span class="line">    <span class="comment">//内存读写reorder会导致双检察锁失效</span></span><br><span class="line">    <span class="comment">//创建单例过程 1.分配内存2.调用构造器3.返回赋值</span></span><br><span class="line">    <span class="comment">//编译器针对对象创建优化时会打乱上述流程（跳过2进入3）</span></span><br><span class="line">    <span class="comment">//如果此时再来一个线程能读取到单例已创建并得到指针</span></span><br><span class="line">    <span class="comment">//但此时单例还未调用构造器，未初始化。调用会出错。</span></span><br><span class="line">    <span class="keyword">if</span>(m_instance==<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        Lock lock;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            m_instance = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++ 11版本之后的跨平台实现 (volatile)</span></span><br><span class="line">std::atomic&lt;Singleton*&gt; Singleton::m_instance;</span><br><span class="line">std::mutex Singleton::m_mutex;</span><br><span class="line"><span class="function">Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Singleton* tmp = m_instance.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">    std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_acquire);<span class="comment">//获取内存fence</span></span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;<span class="comment">//锁</span></span><br><span class="line">        tmp = m_instance.<span class="built_in">load</span>(std::memory_order_relaxed);</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            tmp = <span class="keyword">new</span> Singleton;</span><br><span class="line">            std::<span class="built_in">atomic_thread_fence</span>(std::memory_order_release);<span class="comment">//释放内存fence</span></span><br><span class="line">            m_instance.<span class="built_in">store</span>(tmp, std::memory_order_relaxed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-9"><a href="#要点-9" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Singleton</code>模式中的实例构造器可以设置为protected以允许子类派生。</li><li><code>Singleton</code>模式一般<strong>不支持拷贝构造函数和clone接口</strong>，因为这有可能导致多个对象实例，与Singleton模式的初衷违背。</li><li>实现<strong>多线程</strong>环境下安全的<code>Singleton</code>,需要注意对<strong>双检查锁</strong>的正确实现。</li></ul><h4 id="FlyWeight"><a href="#FlyWeight" class="headerlink" title="FlyWeight"></a>FlyWeight</h4><p>享元模式。运行<strong>共享</strong>技术有效地支持大量细粒度的对象。</p><h5 id="动机-10"><a href="#动机-10" class="headerlink" title="动机"></a>动机</h5><p>在软件系统采用纯粹对象方案的问题在于大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价。</p><p>享元模式能够避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作。</p><h5 id="样例-10"><a href="#样例-10" class="headerlink" title="样例"></a>样例</h5><p>创建一个对象池来支持共享。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Font</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//unique object key</span></span><br><span class="line">    string key;    </span><br><span class="line">    <span class="comment">//object state</span></span><br><span class="line">    <span class="comment">//....    </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Font</span>(<span class="keyword">const</span> string&amp; key)&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FontFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    map&lt;string,Font* &gt; fontPool;    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Font* <span class="title">GetFont</span><span class="params">(<span class="keyword">const</span> string&amp; key)</span></span>&#123;</span><br><span class="line">        map&lt;string,Font*&gt;::iterator item=fontPool.<span class="built_in">find</span>(key);</span><br><span class="line">        <span class="keyword">if</span>(item!=footPool.<span class="built_in">end</span>())&#123; <span class="comment">//池中存在则共享</span></span><br><span class="line">            <span class="keyword">return</span> fontPool[key];</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;<span class="comment">//没有则创建</span></span><br><span class="line">            Font* font = <span class="keyword">new</span> <span class="built_in">Font</span>(key);</span><br><span class="line">            fontPool[key]= font;</span><br><span class="line">            <span class="keyword">return</span> font;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-10"><a href="#要点-10" class="headerlink" title="要点"></a>要点</h5><ul><li>面向对象很好地解决了抽象性的问题，但是作为一个运行在机器中的程序实体，我们需要考虑<strong>对象的代价问题</strong>。Flyweight主要解决面向对象的代价问题，一般不触及面向对象的抽象性问题。 </li><li>Flyweight采用<strong>对象共享</strong>的做法来降低系统中对象的<strong>个数</strong>，从而降低细粒度对象给系统带来的压力。在具体实现方面，要注意对象状态的处理（只读）。</li><li>对象的数量太大从而导致对象内存开销加大  —  数量大小需要根据具体应用情况进行评估，而不能凭空臆断。</li></ul><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><p>在组件构建过程中，某些<strong>接口之间直接的依赖常常会带来很多问题、甚至根本无法实现</strong>。采用<strong>添加一层间接（稳定）接口</strong>，来<strong>隔离本来互相紧密关联的接口</strong>是一种常见的解决方案。</p><blockquote><p>Facade 系统内外隔离（外对内，单向依赖）</p><p>Proxy 一些特殊原因，隔离实际对象，间接访问</p><p>Adapter 旧接口与需求不太匹配，用旧接口生成新接口</p><p>Mediator 隔离多个对象间的相互交互</p></blockquote><h4 id="Facade"><a href="#Facade" class="headerlink" title="Façade"></a>Façade</h4><p>门面模式。为子系统中的一组接口提供一个一致(稳定)的界面，Façade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用(复用)。</p><h5 id="动机-11"><a href="#动机-11" class="headerlink" title="动机"></a>动机</h5><p>组件的客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。</p><p>门面模式能够简化外部客户程序和系统间的交互接口，解耦合。</p><p>由于门面模式是用于边界划分，用稳定的接口隔离变化体。内外情况多变，无特定类图。</p><h5 id="样例-11"><a href="#样例-11" class="headerlink" title="样例"></a>样例</h5><p>将多个对外接口封装在Facade中(稳定的提供接口的间接层)，将客户和子系统解耦合。</p><h5 id="要点-11"><a href="#要点-11" class="headerlink" title="要点"></a>要点</h5><ul><li>从客户程序角度来看，<code>Façade</code>模式<strong>简化</strong>了整个组件<strong>系统的接口</strong></li><li>对于组件内部与外部的客户程序来说，达到了一种”解耦“的效果  —  内部子系统的任何变化不会影响到<code>Façade</code>接口的变化。</li><li><code>Façade</code>设计模式更注重<strong>架构</strong>的层次去看整个系统，而不是单个类的层次。<code>Façade</code>很多时候是一种架构设计模式。</li><li><code>Façade</code>设计模式并非一个集装箱，不可以任意地放进任何多个对象。<code>Façade</code>模式组件中的内部应该是”相互耦合关系比较大的一系列组件“，而不是一个简单的功能集合。</li><li><code>Façade</code>实现松耦合，高内聚。(内部高内聚，对外松耦合)</li></ul><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><p>代理模式。为其他对象提供一种代理以控制(<strong>隔离，使用接口</strong>)对这对象的访问。（核心在增加<strong>间接层</strong>）</p><h5 id="动机-12"><a href="#动机-12" class="headerlink" title="动机"></a>动机</h5><p>在面向对象系统中，有些对象由于某种原因(比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等)，直接访问会给使用者、或者系统结构带来很多麻烦。</p><p>代理模式提供一个间接层在不失去透明操作对象(一致性)的同时来管理/控制这些对象特有的复杂性。</p><h5 id="样例-12"><a href="#样例-12" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISubject</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//实际对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span>:</span> <span class="keyword">public</span> ISubject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Proxy的设计</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectProxy</span>:</span> <span class="keyword">public</span> ISubject&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//对RealSubject的一种间接访问</span></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientApp</span>&#123;</span></span><br><span class="line">    ISubject* subject;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ClientApp</span>()&#123;</span><br><span class="line">        subject=<span class="keyword">new</span> <span class="built_in">SubjectProxy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DoTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        subject-&gt;<span class="built_in">process</span>();</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-12"><a href="#要点-12" class="headerlink" title="要点"></a>要点</h5><ul><li><p>「增加一层间接层」是软件系统中对许多复杂问题的一种常见解决方法。</p></li><li><p>在面向对象系统中，直接使用某些对象会带来很多问题，作为<strong>间接层的proxy对象</strong>便是解决这一问题的常用手段。</p></li><li><p>具体proxy设计模式的实现方法、实现粒度都相差很大。有些可能对单个对象做细粒度的控制（copy-on-write技术），有些可能对组件模块提供抽象代理层（在架构层次对对象做proxy）</p></li><li><p>Proxy并不一定要求保持接口完整的一致性，只要能够实现间接控制，有时候<strong>损及一些透明性是可以接受的</strong>。</p></li></ul><h4 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h4><p>适配器。将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h5 id="动机-13"><a href="#动机-13" class="headerlink" title="动机"></a>动机</h5><p>由于应用环境的变化，常常需要将「一些现存的对象」放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足。</p><p>适配器能够应对这种「迁移的变化」，既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口。</p><h5 id="样例-13"><a href="#样例-13" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标接口（新接口）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITarget</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//遗留接口（老接口）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IAdaptee</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">bar</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//遗留类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OldClass</span>:</span> <span class="keyword">public</span> IAdaptee&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对象适配器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>:</span> <span class="keyword">public</span> ITarget&#123; <span class="comment">//继承</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    IAdaptee* pAdaptee;<span class="comment">//组合</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Adapter</span>(IAdaptee* pAdaptee)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAdaptee=pAdaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data=pAdaptee-&gt;<span class="built_in">bar</span>();</span><br><span class="line">        pAdaptee-&gt;<span class="built_in">foo</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类适配器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>:</span> <span class="keyword">public</span> ITarget,</span><br><span class="line">               <span class="keyword">protected</span> OldClass&#123; <span class="comment">//多继承</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IAdaptee* pAdaptee=<span class="keyword">new</span> <span class="built_in">OldClass</span>();</span><br><span class="line">    ITarget* pTarget=<span class="keyword">new</span> <span class="built_in">Adapter</span>(pAdaptee);</span><br><span class="line">    pTarget-&gt;<span class="built_in">process</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stack</span>&#123;</span></span><br><span class="line">    deqeue container;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">queue</span>&#123;</span></span><br><span class="line">    deqeue container;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-13"><a href="#要点-13" class="headerlink" title="要点"></a>要点</h5><ul><li>Adapter模式主要应用于「希望复用一些现存的类，但是接口又与复用环境要求不一致的情况」，在遗留代码复用、类库迁移等方面非常有用。</li><li><code>GoF23</code>定义了两种Adapter模式的实现结构：对象适配器和类适配器。但<strong>类适配器</strong>采用“<strong>多继承</strong>”的实现方式，一般<strong>不推荐</strong>使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。</li><li>Adapter模式可以实现的非常灵活，不必拘泥于<code>GoF23</code>中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的。</li></ul><h4 id="Mediator"><a href="#Mediator" class="headerlink" title="Mediator"></a>Mediator</h4><p>中介者。用一个中介对象来封装(封装变化)<strong>一系列的对象交互</strong>。中介者使各对象不需要显式的相互引用(编译时依赖-&gt;运行时依赖)，从而使其耦合松散(管理变化)，并且可以独立地改变它们之间的交互。（多对象间的依赖倒置原则）</p><h5 id="动机-14"><a href="#动机-14" class="headerlink" title="动机"></a>动机</h5><p><strong>多个对象相互关联</strong>的情况，对象之间常常会维持一种<strong>复杂的引用关系</strong>，如果遇到一些需求的更改，这种直接的引用关系将面临不断的变化。</p><p>中介者在这种情况下，可以使用一种”<strong>中介对象</strong>“来<strong>管理对象间的关联关系</strong>，避免相互交互的对象之间的紧耦合引用关系，从而更好地抵御变化。</p><h5 id="样例-14"><a href="#样例-14" class="headerlink" title="样例"></a>样例</h5><p>相互间存在依赖的五个对象<code>1  2  3  4  5</code>增加中介层<code>Mediator</code>从而使得对象间解耦合。</p><p><img src="/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/ExpMediator.png" alt="ExpMediator"></p><h5 id="要点-14"><a href="#要点-14" class="headerlink" title="要点"></a>要点</h5><ul><li>将多个对象间发杂的关联关系解耦。Mediator模式将多个对象间的控制逻辑进行集中管理，变「多个对象互相关联」为「多个对象和一个中介者关联」，简化了系统的维护，抵御了可能的变化。</li><li>随着控制逻辑的复杂化，Mediator具体对象的实现可能相当复杂。这时候可以对Mediator对象进行分解处理。</li><li>Facade模式是解耦<strong>系统间(单向)的对象</strong>关联关系；Mediator模式是解耦系统内**各个对象之间(双向)**的关联关系。</li></ul><h3 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h3><p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理？同时又维持高层模块的稳定？“状态变化”模式为这一问题提供了一种解决方案。</p><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>状态模式。允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为。</p><h5 id="动机-15"><a href="#动机-15" class="headerlink" title="动机"></a>动机</h5><p>软件构建过程中，对象<strong>状态如果改变</strong>，其<strong>行为也会随之而发生变化</strong>，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。</p><p>状态模式可以在运行时根据对象的状态来透明地改变对象的行为。</p><blockquote><p>Strategy与State可以理解为多种类型的if-else操作，如果用<code>枚举 + if-else</code>增加新的类型会更改源码，使用这两种模式可以在增加新类型时，仅在客户程序中增加相应的类重写相应的函数，而无需去更改流程操作。</p></blockquote><h5 id="样例-15"><a href="#样例-15" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkState</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NetworkState* pNext;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation3</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">NetworkState</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenState</span> :</span><span class="keyword">public</span> NetworkState&#123;</span><br><span class="line">    <span class="keyword">static</span> NetworkState* m_instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> NetworkState* <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            m_instance = <span class="keyword">new</span> <span class="built_in">OpenState</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">        pNext = CloseState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//..........</span></span><br><span class="line">        pNext = ConnectState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">        pNext = OpenState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloseState</span>:</span><span class="keyword">public</span> NetworkState&#123; &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkProcessor</span>&#123;</span></span><br><span class="line">    NetworkState* pState;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NetworkProcessor</span>(NetworkState* pState)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pState = pState;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation1</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation2</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation3</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="要点-15"><a href="#要点-15" class="headerlink" title="要点"></a>要点</h5><ul><li>State模式将所有与一个特定状态相关的行为都放入一个State的子对象中，在对象状态切换时，切换相应的对象；但同时维持State的接口，这样实现了具体操作与状态转换之间的解耦。</li><li>为不同的状态引入不同的对象使得状态转换变得更加明确，而且可以保证不会出现状态不一致的情况。转换是原子性的(要么彻底转换过来，要么不转换。)</li><li>与Strategy模式类似，如果State对象没有实例变量，那么各个上下文可以共享同一个State对象，从而节省对象开销。（Singleton）</li></ul><h4 id="Memento"><a href="#Memento" class="headerlink" title="Memento"></a>Memento</h4><p>备忘录。在不破坏封装性的前提下，捕获一个对象的内部状态，并在该<strong>对象之外保存这个状态</strong>。这样以后就可以将该对象恢复到原先保存的状态。</p><h5 id="动机-16"><a href="#动机-16" class="headerlink" title="动机"></a>动机</h5><p>某些对象的状态转换过程中，可能由于某中需要，要求程序能够回溯到对象之前处于某个点的状态。如果使用一些公开接口来让其他对象得到对象的状态，便会暴露对象的细节实现。</p><p>备忘录能够实现对象状态的良好保存与恢复，同时又不会因此而破坏对象本身的封装性。</p><h5 id="样例-16"><a href="#样例-16" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//备忘录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string state;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Memento</span>(<span class="keyword">const</span> string &amp; s) : <span class="built_in">state</span>(s) &#123;&#125;</span><br><span class="line">    <span class="function">string <span class="title">getState</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> state; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">const</span> string &amp; s)</span> </span>&#123; state = s; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用备忘录的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string state;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Originator</span>() &#123;&#125;</span><br><span class="line">    <span class="function">Memento <span class="title">createMomento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">Memento <span class="title">m</span><span class="params">(state)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMomento</span><span class="params">(<span class="keyword">const</span> Memento &amp; m)</span> </span>&#123;</span><br><span class="line">        state = m.<span class="built_in">getState</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Originator orginator;</span><br><span class="line">    <span class="comment">//捕获对象状态，存储到备忘录</span></span><br><span class="line">    Memento mem = orginator.<span class="built_in">createMomento</span>();</span><br><span class="line">    <span class="comment">//... 改变orginator状态</span></span><br><span class="line">    <span class="comment">//从备忘录中恢复</span></span><br><span class="line">    orginator.<span class="built_in">setMomento</span>(memento);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-16"><a href="#要点-16" class="headerlink" title="要点"></a>要点</h5><ul><li>备忘录存储原发器对象的内部状态，在需要时恢复原发器状态。</li><li>Memento模式的核心是<strong>信息隐藏</strong>，即原发器需要向外接隐藏信息，保持其封装性，但同时又需要将状态保持到外界。</li><li>由于现代语言运行时(如C#、Java等)都具有相当的对象序列化支持，因此往往采用效率较高、又较容易正确实现的序列化方案来实现Memento模式。</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用。</p><p>这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><blockquote><p>Composite 树形结构</p><p>Iterator 在内部不可见的情况下，处理内部数据</p><p>Chain of Responsibility 链表结构</p></blockquote><h4 id="Composite"><a href="#Composite" class="headerlink" title="Composite"></a>Composite</h4><p>组合模式。将<strong>对象组合成树形结构</strong>以表示「部分-整体」的层次结构。</p><p>Composite使得用户对单个对象和组合对象的使用具有<strong>一致性</strong>(稳定)。</p><h5 id="动机-17"><a href="#动机-17" class="headerlink" title="动机"></a>动机</h5><p>客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构(而非抽象结构)的变化引起客户代码的频繁变化，带来了代码的维护性、扩展性等弊端。</p><p>组合模式将「客户代码与复杂的对象容器结构」解耦，让对象容器自己来实现自身的复杂结构，从而使得客户代码就像处理简单对象一样来处理复杂的对象容器。</p><h5 id="样例-17"><a href="#样例-17" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Component</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> :</span> <span class="keyword">public</span> Component&#123;</span><br><span class="line">    string name;</span><br><span class="line">    list&lt;Component*&gt; elements;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Composite</span>(<span class="keyword">const</span> string &amp; s) : <span class="built_in">name</span>(s) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component* element)</span> </span>&#123;</span><br><span class="line">        elements.<span class="built_in">push_back</span>(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component* element)</span></span>&#123;</span><br><span class="line">        elements.<span class="built_in">remove</span>(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1. process current node</span></span><br><span class="line">        <span class="comment">//2. process leaf nodes</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : elements)</span><br><span class="line">            e-&gt;<span class="built_in">process</span>(); <span class="comment">//多态调用</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//叶子节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> :</span> <span class="keyword">public</span> Component&#123;</span><br><span class="line">    string name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Leaf</span>(string s) : <span class="built_in">name</span>(s) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//process current node</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Invoke</span><span class="params">(Component &amp; c)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    c.<span class="built_in">process</span>();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Composite <span class="title">root</span><span class="params">(<span class="string">&quot;root&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Composite <span class="title">treeNode1</span><span class="params">(<span class="string">&quot;treeNode1&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Composite <span class="title">treeNode2</span><span class="params">(<span class="string">&quot;treeNode2&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Composite <span class="title">treeNode3</span><span class="params">(<span class="string">&quot;treeNode3&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Composite <span class="title">treeNode4</span><span class="params">(<span class="string">&quot;treeNode4&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Leaf <span class="title">leat1</span><span class="params">(<span class="string">&quot;left1&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">Leaf <span class="title">leat2</span><span class="params">(<span class="string">&quot;left2&quot;</span>)</span></span>;</span><br><span class="line">    root.<span class="built_in">add</span>(&amp;treeNode1);</span><br><span class="line">    treeNode1.<span class="built_in">add</span>(&amp;treeNode2);</span><br><span class="line">    treeNode2.<span class="built_in">add</span>(&amp;leaf1);</span><br><span class="line">    root.<span class="built_in">add</span>(&amp;treeNode3);</span><br><span class="line">    treeNode3.<span class="built_in">add</span>(&amp;treeNode4);</span><br><span class="line">    treeNode4.<span class="built_in">add</span>(&amp;leaf2);</span><br><span class="line">    <span class="built_in">process</span>(root);</span><br><span class="line">    <span class="built_in">process</span>(leaf2);</span><br><span class="line">    <span class="built_in">process</span>(treeNode3);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-17"><a href="#要点-17" class="headerlink" title="要点"></a>要点</h5><ul><li>Composite模式采用<strong>树性结构</strong>来实现普遍存在的对象容器，从而<strong>将”一对多“的关系转化为”一对一“的关系</strong>（递归调用所有子节点），使得客户代码可以<strong>一致地</strong>(复用)<strong>处理对象和对象容器</strong>，无需关心处理的是单个的对象，还是组合的对象容器。</li><li>将「客户代码与复杂的对象容器结构」解耦是<code>Composite</code>的核心思想。</li><li>客户代码与纯粹的抽象接口（而非对象容器的内部实现结构）发生依赖，从而更能”应对变化“。</li><li>Composite模式在具体实现中，可以让父对象中的子对象反向追溯；如果父对象有频繁的遍历需求，可使用缓存技术来改善效率。</li></ul><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><p>迭代器。提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露(稳定)该对象的内部表示。</p><h5 id="动机-18"><a href="#动机-18" class="headerlink" title="动机"></a>动机</h5><p>集合对象内部结构常常变化异常。但对于这些集合对象，我们希望<strong>不暴露其内部结构</strong>的同时，可以让<strong>外部客户代码透明地访问其中包含的元素</strong>；<br>同时这种”透明遍历“也为”同一种算法在多种集合对象上进行操作“提供了可能。</p><p>使用面向对象技术将这种遍历机制抽象为”迭代器对象“为”应对变化中的集合对象“提供了一种优雅的方式。</p><h5 id="样例-18"><a href="#样例-18" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">isDone</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T&amp; <span class="title">current</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">GetIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectionIterator</span> :</span> <span class="keyword">public</span> Iterator&lt;T&gt;&#123;</span><br><span class="line">    MyCollection&lt;T&gt; mc;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CollectionIterator</span>(<span class="keyword">const</span> MyCollection&lt;T&gt; &amp; c): <span class="built_in">mc</span>(c)&#123; &#125;</span><br><span class="line">    <span class="comment">//虚函数根据具体类型去重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;...&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isDone</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span>&#123;...&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">current</span><span class="params">()</span> <span class="keyword">override</span></span>&#123;...&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyAlgorithm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyCollection&lt;<span class="keyword">int</span>&gt; mc;</span><br><span class="line">    Iterator&lt;<span class="keyword">int</span>&gt; iter= mc.<span class="built_in">GetIterator</span>();</span><br><span class="line">    <span class="keyword">for</span> (iter.<span class="built_in">first</span>(); !iter.<span class="built_in">isDone</span>(); iter.<span class="built_in">next</span>())&#123;</span><br><span class="line">        cout &lt;&lt; iter.<span class="built_in">current</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-18"><a href="#要点-18" class="headerlink" title="要点"></a>要点</h5><ul><li><p>迭代抽象：访问一个聚合对象的内容而无需暴露它的内部表示。</p></li><li><p>迭代多态：为遍历不同的集合对象提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作。。</p></li><li><p>迭代器的健壮性考虑：遍历的同时更改迭代器所在的集合结构，会导致问题。</p></li><li><p>对C++来说是过时的，面向对象的方式性能低，现在迭代器用模板。</p></li></ul><h4 id="Chain-of-Resposibility"><a href="#Chain-of-Resposibility" class="headerlink" title="Chain of Resposibility"></a>Chain of Resposibility</h4><p>职责链。使<strong>多个对象都有机会处理请求</strong>，从而避免请求的发送者和接收者之间的耦合关系。将这些对象<strong>连成一条链</strong>，并<strong>沿着这条链传递请求</strong>，直到有一个对象处理它为止。</p><h5 id="动机-19"><a href="#动机-19" class="headerlink" title="动机"></a>动机</h5><p>一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接收者，如果显式指定，将必不可少地带来请求发送者与接收者的紧耦合。</p><p>职责链使请求的发送者<strong>不需要指定具体的接收者</strong>，让请求的接收者自己在运行时决定来处理请求，从而使两者解耦。</p><h5 id="样例-19"><a href="#样例-19" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">RequestType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    REQ_HANDLER1,</span><br><span class="line">    REQ_HANDLER2,</span><br><span class="line">    REQ_HANDLER3</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//请求</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reqest</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string description;</span><br><span class="line">    RequestType reqType;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Reqest</span>(<span class="keyword">const</span> string &amp; desc, RequestType type) : <span class="built_in">description</span>(desc), <span class="built_in">reqType</span>(type) &#123;&#125;</span><br><span class="line">    <span class="function">RequestType <span class="title">getReqType</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> reqType; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> string&amp; <span class="title">getDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> description; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//接收者 基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChainHandler</span>&#123;</span></span><br><span class="line">    <span class="comment">//成链，多个对象接收。</span></span><br><span class="line">    ChainHandler *nextChain;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendReqestToNextHandler</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nextChain != <span class="literal">nullptr</span>)</span><br><span class="line">            nextChain-&gt;<span class="built_in">handle</span>(req);<span class="comment">//传递给下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">canHandleRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ChainHandler</span>() &#123; nextChain = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNextChain</span><span class="params">(ChainHandler *next)</span> </span>&#123; nextChain = next; &#125;</span><br><span class="line">    <span class="comment">//处理请求链</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">canHandleRequest</span>(req))</span><br><span class="line">            <span class="built_in">processRequest</span>(req);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">sendReqestToNextHandler</span>(req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler1</span> :</span> <span class="keyword">public</span> ChainHandler&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canHandleRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> req.<span class="built_in">getReqType</span>() == RequestType::REQ_HANDLER1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Handler1 is handle reqest: &quot;</span> &lt;&lt; req.<span class="built_in">getDescription</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler2</span> :</span> <span class="keyword">public</span> ChainHandler&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canHandleRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> req.<span class="built_in">getReqType</span>() == RequestType::REQ_HANDLER2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Handler2 is handle reqest: &quot;</span> &lt;&lt; req.<span class="built_in">getDescription</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler3</span> :</span> <span class="keyword">public</span> ChainHandler&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canHandleRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> req.<span class="built_in">getReqType</span>() == RequestType::REQ_HANDLER3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(<span class="keyword">const</span> Reqest &amp; req)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Handler3 is handle reqest: &quot;</span> &lt;&lt; req.<span class="built_in">getDescription</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Handler1 h1;</span><br><span class="line">    Handler2 h2;</span><br><span class="line">    Handler3 h3;</span><br><span class="line">    h1.<span class="built_in">setNextChain</span>(&amp;h2);</span><br><span class="line">    h2.<span class="built_in">setNextChain</span>(&amp;h3);</span><br><span class="line">    </span><br><span class="line">    <span class="function">Reqest <span class="title">req</span><span class="params">(<span class="string">&quot;process task ... &quot;</span>, RequestType::REQ_HANDLER3)</span></span>;</span><br><span class="line">    h1.<span class="built_in">handle</span>(req);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-19"><a href="#要点-19" class="headerlink" title="要点"></a>要点</h5><ul><li><code>Chain of Responsibility</code>模式的应用场合在于「一个请求<strong>可能有多个接受者</strong>，但是最后<strong>真正的接受者只有一个</strong>」，这时候请求发送者与接受者的耦合有可能出现“变化脆弱”的症状，职责链的目的就是将二者解耦，从而更好地应对变化。</li><li>应用了<code>Chain of Responsibility</code>模式后，对象的<strong>职责分派将更具灵活性</strong>。我们可以在<strong>运行时动态</strong>添加/修改请求的处理职责。</li><li>如果请求传递到职责链的末尾仍得不到处理，应该有一个合理的缺省机制。这也是每一个接受对象的责任，而不是发出请求的对象的责任。</li></ul><h3 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h3><p>在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化”模式将<strong>组件的行为和组件本身进行解耦</strong>，从而支持组件行为的变化，实现两者之间的松耦合。</p><h4 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h4><p>命令模式。<strong>将</strong>一个<strong>请求(行为)封装成</strong>一个<strong>对象</strong>，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><h5 id="动机-20"><a href="#动机-20" class="headerlink" title="动机"></a>动机</h5><p>”行为请求者“与”行为实现者“通常呈现一种”紧耦合“。但在某些场合（对行为进行”记录、撤销、事务“等处理）无法抵御变化的紧耦合是不合适的。</p><p>命令模式将”行为请求者“与”行为实现者“解耦。将一组行为抽象为对象，实现二者之间的松耦合。</p><h5 id="样例-20"><a href="#样例-20" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//行为对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand1</span> :</span> <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line">    string arg;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteCommand1</span>(<span class="keyword">const</span> string &amp; a) : <span class="built_in">arg</span>(a) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;#1 process...&quot;</span>&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand2</span> :</span> <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line">    string arg;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ConcreteCommand2</span>(<span class="keyword">const</span> string &amp; a) : <span class="built_in">arg</span>(a) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt; <span class="string">&quot;#2 process...&quot;</span>&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span> :</span> <span class="keyword">public</span> Command</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;Command*&gt; commands;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command *c)</span> </span>&#123; commands.<span class="built_in">push_back</span>(c); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : commands)</span><br><span class="line">        &#123;</span><br><span class="line">            c-&gt;<span class="built_in">execute</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ConcreteCommand1 <span class="title">command1</span><span class="params">(receiver, <span class="string">&quot;Arg ###&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ConcreteCommand2 <span class="title">command2</span><span class="params">(receiver, <span class="string">&quot;Arg $$$&quot;</span>)</span></span>;</span><br><span class="line">    MacroCommand macro;</span><br><span class="line">    macro.<span class="built_in">addCommand</span>(&amp;command1);</span><br><span class="line">    macro.<span class="built_in">addCommand</span>(&amp;command2);</span><br><span class="line">    <span class="comment">//macro命令包含多个子命令</span></span><br><span class="line">    <span class="comment">//指令以对象的形式存在具备灵活性</span></span><br><span class="line">    macro.<span class="built_in">execute</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-20"><a href="#要点-20" class="headerlink" title="要点"></a>要点</h5><ul><li>Command模式的根本目的在于将”行为请求者“与”行为实现者“解耦，在面向对象语言中，常见的实现手段是”将行为抽象为对象“。</li><li>实现Command接口的具体命令对象有时候根据需要可能会保存一些额外的状态信息。</li><li>通过使用Composite模式可以「将多个命令封装为一个复合命令」。</li><li>Command模式与C++中的函数对象(<code>functor</code>)类似，Command以面向对象中的“接口-实现”来定义行为接口规范，更严格，但有性能损失；C++函数对象以函数签名来定义行为接口规范，更灵活性能更高。</li></ul><blockquote><p><code>GoF-23</code>设计模式出现时，C++泛型编程还没有普及。因而，出现了Command、Iterator等用面向对象实现的（相比于泛型编程）性能较差的版本。</p></blockquote><h4 id="Visitor"><a href="#Visitor" class="headerlink" title="Visitor"></a>Visitor</h4><p>访问器。表示一个作用于某对象结构中的各元素的操作。使得可以在不改变(稳定)各元素的类的前提下定义(扩展)作用于这些元素的新操作(变化)。</p><h5 id="动机-21"><a href="#动机-21" class="headerlink" title="动机"></a>动机</h5><p>由于<strong>需求的变化</strong>，某些类层次结构中常常<strong>需要增加新的行为</strong>(方法)，如果直接在基类中做这样的更改，将会给子类带来很繁重的变更负担，甚至破坏原有设计。</p><p>访问器能够在不更改类层次结构的前提下，运行时根据需要透明地为类层次结构上的各个类动态添加新的操作。</p><h5 id="样例-21"><a href="#样例-21" class="headerlink" title="样例"></a>样例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor&amp; visitor)</span> </span>= <span class="number">0</span>; <span class="comment">//第一次多态辨析</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Element</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElementA</span> :</span> <span class="keyword">public</span> Element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor &amp;visitor)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        visitor.<span class="built_in">visitElementA</span>(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElementB</span> :</span> <span class="keyword">public</span> Element</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor &amp;visitor)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        visitor.<span class="built_in">visitElementB</span>(*<span class="keyword">this</span>); <span class="comment">//第二次多态辨析</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(ElementA&amp; element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(ElementB&amp; element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Visitor</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//==================================</span></span><br><span class="line"><span class="comment">//扩展</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor1</span> :</span> <span class="keyword">public</span> Visitor&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitElementA</span><span class="params">(ElementA&amp; element)</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Visitor1 is processing ElementA&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visitElementB</span><span class="params">(ElementB&amp; element)</span> <span class="keyword">override</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Visitor1 is processing ElementB&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;         </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Visitor1 visitor;</span><br><span class="line">    ElementB elementB;</span><br><span class="line">    elementB.<span class="built_in">accept</span>(visitor);<span class="comment">// double dispatch</span></span><br><span class="line">    </span><br><span class="line">    ElementA elementA;</span><br><span class="line">    elementA.<span class="built_in">accept</span>(visitor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-21"><a href="#要点-21" class="headerlink" title="要点"></a>要点</h5><ul><li>Visitor模式通过所谓的双重分发来实现在不更改(编译时)Element类层次结构的前提下，在运行时透明地为类层次结构上的各个类动态添加新的操作(支持变化)。</li><li>所谓双重分发Visitor模式中间包括了两个多态分发：第一个为accept方法的多态辨析；第二个为visitElement方法的多态辨析。</li><li>Visitor模式的最大缺点在于扩展类层次结构(添加新的Element子类)，会导致Visitor类的改变，因此Visitor模式<strong>适用于“Element类层次结构稳定</strong>，而其中的<strong>操作却经常面临频繁改动</strong>”。</li></ul><h3 id="领域规则"><a href="#领域规则" class="headerlink" title="领域规则"></a>领域规则</h3><p>在特定领域中，某些变化虽然频繁，但可以抽象为某种规则。这时候，结合特定领域，将问题抽象为语法规则，从而给出在该领域下的一般性解决方案。</p><h4 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h4><p>解析器。给定一个语言，定义它的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。</p><h5 id="动机-22"><a href="#动机-22" class="headerlink" title="动机"></a>动机</h5><p>如果某一特定领域的问题比较复杂，类似的结构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。</p><p>在这种情况下，将特定领域的问题表达为某种语法规则下的句子，然后构建一个解释器来解释这样的句子，从而达到解决问题的目的。</p><h5 id="样例-22"><a href="#样例-22" class="headerlink" title="样例"></a>样例</h5><p>加减运算解释器。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expression</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; var)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Expression</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//变量表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VarExpression</span>:</span> <span class="keyword">public</span> Expression &#123;</span><br><span class="line">    <span class="keyword">char</span> key;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">VarExpression</span>(<span class="keyword">const</span> <span class="keyword">char</span>&amp; key)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; var)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> var[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//符号表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SymbolExpression</span> :</span> <span class="keyword">public</span> Expression &#123;</span><br><span class="line">    <span class="comment">// 运算符左右两个参数</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Expression* left;</span><br><span class="line">    Expression* right;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SymbolExpression</span>( Expression* left,  Expression* right):</span><br><span class="line">        <span class="built_in">left</span>(left),<span class="built_in">right</span>(right)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加法运算</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddExpression</span> :</span> <span class="keyword">public</span> SymbolExpression &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AddExpression</span>(Expression* left, Expression* right):</span><br><span class="line">        <span class="built_in">SymbolExpression</span>(left,right)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; var)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left-&gt;<span class="built_in">interpreter</span>(var) + right-&gt;<span class="built_in">interpreter</span>(var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减法运算</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubExpression</span> :</span> <span class="keyword">public</span> SymbolExpression &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SubExpression</span>(Expression* left, Expression* right):</span><br><span class="line">        <span class="built_in">SymbolExpression</span>(left,right)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpreter</span><span class="params">(map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; var)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> left-&gt;<span class="built_in">interpreter</span>(var) - right-&gt;<span class="built_in">interpreter</span>(var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Expression*  <span class="title">analyse</span><span class="params">(string expStr)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    stack&lt;Expression*&gt; expStack;</span><br><span class="line">    Expression* left = <span class="literal">nullptr</span>;</span><br><span class="line">    Expression* right = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;expStr.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(expStr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="comment">// 加法运算</span></span><br><span class="line">                left = expStack.<span class="built_in">top</span>();</span><br><span class="line">                right = <span class="keyword">new</span> <span class="built_in">VarExpression</span>(expStr[++i]);</span><br><span class="line">                expStack.<span class="built_in">push</span>(<span class="keyword">new</span> <span class="built_in">AddExpression</span>(left, right));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="comment">// 减法运算</span></span><br><span class="line">                left = expStack.<span class="built_in">top</span>();</span><br><span class="line">                right = <span class="keyword">new</span> <span class="built_in">VarExpression</span>(expStr[++i]);</span><br><span class="line">                expStack.<span class="built_in">push</span>(<span class="keyword">new</span> <span class="built_in">SubExpression</span>(left, right));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// 变量表达式</span></span><br><span class="line">                expStack.<span class="built_in">push</span>(<span class="keyword">new</span> <span class="built_in">VarExpression</span>(expStr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Expression* expression = expStack.<span class="built_in">top</span>();</span><br><span class="line">    <span class="keyword">return</span> expression;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(Expression* expression)</span></span>&#123;</span><br><span class="line">    <span class="comment">//释放表达式树的节点内存...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    string expStr = <span class="string">&quot;a+b-c+d-e&quot;</span>;</span><br><span class="line">    map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; var;</span><br><span class="line">    var.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">5</span>));</span><br><span class="line">    var.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>));</span><br><span class="line">    var.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>));</span><br><span class="line">    var.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;d&#x27;</span>,<span class="number">6</span>));</span><br><span class="line">    var.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;e&#x27;</span>,<span class="number">10</span>));</span><br><span class="line">    Expression* expression= <span class="built_in">analyse</span>(expStr);</span><br><span class="line">    <span class="keyword">int</span> result=expression-&gt;<span class="built_in">interpreter</span>(var);</span><br><span class="line">    cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">release</span>(expression);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="要点-22"><a href="#要点-22" class="headerlink" title="要点"></a>要点</h5><ul><li>Interpreter模式的<strong>应用场合</strong>是Interpreter模式应用中的难点，只有满足「业务规则频繁变化，且类似的结构不断重复出现，<br>并且容易抽象为语法规则的问题」才适合使用Interpreter模式。</li><li>使用Interpreter模式来表示文法规则，从而可以使用面向对象技巧来方便地“扩展”文法。</li><li>Interpreter模式适合简单的文法表示，对于复杂的文法表示需要求助语法分析器标准工具。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是学习李建忠「设计模式」课程所记录的笔记，由于&lt;code&gt;GitHub Page&lt;/code&gt;图片加载过于缓慢，类图已移除。若要查看有类图的版本，请移步&lt;a href=&quot;https://blog.csdn.net/weixin_46065476/article/details/126336516&quot;&gt;CSDN&lt;/a&gt;或&lt;a href=&quot;https://github.com/ikun7355608/cpp_Design_Patterns&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="八股" scheme="http://example.com/tags/%E5%85%AB%E8%82%A1/"/>
    
  </entry>
  
  <entry>
    <title>2022护网</title>
    <link href="http://example.com/2022HVV/"/>
    <id>http://example.com/2022HVV/</id>
    <published>2022-08-10T01:22:20.000Z</published>
    <updated>2022-12-07T07:49:56.447Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要介绍实习经历  —  2022年在某部委护网。写的很杂，很乱。</p><span id="more"></span><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>总的来说，体验感极佳(和其他项目组对比)。</p><ul><li>甲方  —  由于是夜班，和甲方没太多接触。</li><li>友商  —  友商提供了很多的物资，每晚会给我们订夜宵和早饭。告诉我们大胆弄，出事他们扛着（他们是主防）</li><li>驻场  —  驻场大哥各方面都很照顾我们</li><li>环境  —  环境还可以，起码每天都能吹空调（有些甲方是中央空调，晚上、周末不开。）</li></ul><p>本来给我安排的是另一个项目组（比较坑的那种），但是这边的驻场拿到的名单和安恒那边负责人给分配的不一样，阴差阳错的来到了这边。</p><h3 id="待遇"><a href="#待遇" class="headerlink" title="待遇"></a>待遇</h3><p>300/day，吃住报销。每晚<code>00:00~2:00</code>左右有夜宵，早晨有早饭。白天的吃饭、打车、地铁、往返车票给报销。(公司报销流程比较慢，但驻场大哥给力。提完流程直接给我们结钱。)</p><p>零食  —  友商的物资很充足随便吃，美中不足的是小鱼干、豆干、鸭货之类的小零食比较少，饮料和泡面过多。</p><p>夜宵  —  14晚夜宵吃过：炸串、披萨、牛肉汤、饺子、驴肉汤、驴肉火烧、烧烤、小龙虾、牛肉面。</p><p>早饭  —  麦当劳套餐吃到吐</p><h3 id="驻场"><a href="#驻场" class="headerlink" title="驻场"></a>驻场</h3><p>驻场大哥第一天就和我们说「我也是从实习生走过来的，每天被骂的狗血淋头。只要甲方没问题，我这就没问题。」相处了二十天，驻场大哥非常照顾我们。</p><p>有什么需要销售解决的东西，大哥直接帮我们弄。然后给销售展示一手<strong>先斩后奏</strong>（相比于其他项目组，我们基本不需要和销售求福利）。</p><p>关于20天的饭补，也并没有像其他项目组那样，必须拿着发票才给报销。大哥让我们给个数字，提完流程然后直接结账，缺的发票他去凑。（还特意告诉了护网前几天的饭补不要和其他项目组透露）甚至还告诉我们，延期导致多的那一周出去吃喝玩乐，干饭门票啥的也给报销。</p><p>正常规定的换班时间是9:00，其他项目组有些驻场每天都回迟到几分钟，而这大哥每天8:30基本就来了。（有几天比较早，甚至8:00就到了）</p><p>我觉得，今后会遇到的导师怕是不会再这么友善了。</p><h3 id="夜班"><a href="#夜班" class="headerlink" title="夜班"></a>夜班</h3><p>刚开始的时候异常的忙碌，由于工作中很多都是重复的操作，大家都化身<code>Script Kiddie</code>，疯狂写脚本来减少工作量。</p><p>不过，当甲方摆烂了、RT刷够分了，夜班可谓是质变。最后几天相当于带薪耍手机。</p><p>还遇到了几个大哥，劝我能去互联网厂做安全就不要来安全厂商。</p><h3 id="微步"><a href="#微步" class="headerlink" title="微步"></a>微步</h3><p>本来是抱着抄大佬们作业的目的去的。结果整个社区（包括平台）都非常的和谐。虽然大家都是陌生人、都在匿名，但也和谐至极。平台还会给出相应的标语激励我们。无论是夜班炫零食YT、还是日常写段子、再到大家的告别，都很让人难忘。</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ol><li>公务员真香</li><li>甲方:您哪位？<ul><li>谁鸟你一个部门的外包？</li></ul></li><li>男人之间的友谊来的那么快，没有什么人是一根烟不能认识的。</li><li>坚定了跑路做开发的信念</li></ol><h3 id="护网我到底干了啥？"><a href="#护网我到底干了啥？" class="headerlink" title="护网我到底干了啥？"></a>护网我到底干了啥？</h3><p>简单来讲，负责写防火墙过滤规则。具体内容</p><blockquote><p>「技不外传，海不露底。千两黄金不卖道，十字街头送故交。各位，高抬贵手。金盆打水银盆装，原谅  原谅。」</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章主要介绍实习经历  —  2022年在某部委护网。写的很杂，很乱。&lt;/p&gt;</summary>
    
    
    
    
    <category term="社畜养成计划" scheme="http://example.com/tags/%E7%A4%BE%E7%95%9C%E5%85%BB%E6%88%90%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>STL源码-算法</title>
    <link href="http://example.com/STL%E6%BA%90%E7%A0%81-%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/STL%E6%BA%90%E7%A0%81-%E7%AE%97%E6%B3%95/</id>
    <published>2022-07-09T09:41:29.000Z</published>
    <updated>2023-03-17T13:04:09.032Z</updated>
    
    <content type="html"><![CDATA[<p>本文是在阅读SGI STL v3.3源码中关于<code>algorithm</code>部分，遇到的一些问题及有意思的点。</p><p>至此，STL六大件告一段落。（源码中，还有一些实现相应辅助功能的其他文件在此假装没有）。</p><span id="more"></span><h2 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h2><p>从实现角度看，STL算法实质上也是一种模板类。</p><p>STL中所有的算法前两个参数都是一对迭代器，所包含的元素都是左闭右开$\left[first,last\right)$</p><p>最后一个可选参数一般都是自定义规则（仿函数传入点），鉴于仿函数(<code> _Compare __comp</code>)传入进来只是比较规则位置发生变化，下文中以默认带有仿函数的为准。</p><blockquote><p>max/min/swap略过</p></blockquote><p>此外，在众多的函数中有着如下规律：</p><blockquote><p><code>xxx </code>和<code>xxx_if</code></p></blockquote><ul><li><code>xxx</code>一般为对值为<code>value</code>的元素进行操作</li><li><code>xxx_if</code>则是对<code>value</code>满足一定条件(<code>__pred</code>)的元素进行操作</li></ul><blockquote><p><code>xxx </code>和 <code>xxx_n</code></p></blockquote><ul><li><code>xxx</code>一般前两个参数为<code>iter first</code>和<code>iter last</code>表示对一个区间内进行操作</li><li><code>xxx_n</code>则是<code>iter first</code>和<code>size_t n</code>是以<code>first</code>为首的<code>n</code>个元素进行操作(也是一个区间)</li></ul><blockquote><p><code>xxx </code>和<code>xxx_copy</code></p></blockquote><ul><li><code>xxx</code>一般是对原数组$\left[first,last\right)$进行操作。</li><li><code>xxx_copy</code>是将操作的结果保存到$\left[result,result+last-first\right)$中。</li></ul><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><p>将$\left[first,last\right)$的值累加到<code>init</code>上。（<code>init</code>在原基础上增加区间和。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用二元函数 op 计算</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIterator</span>, <span class="keyword">class</span> _<span class="title">Tp</span>, <span class="keyword">class</span> _<span class="title">BinaryOperation</span>&gt;</span></span><br><span class="line"><span class="function">_Tp <span class="title">accumulate</span><span class="params">(_InputIterator __first, _InputIterator __last, _Tp __init,</span></span></span><br><span class="line"><span class="params"><span class="function">               _BinaryOperation __binary_op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> ( ; __first != __last; ++__first)</span><br><span class="line">      __init = __binary_op(__init, *__first);</span><br><span class="line">    <span class="comment">//    __init = __init + *__first;</span></span><br><span class="line">    <span class="keyword">return</span> __init;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>__binary_op</code>  —  累加方式</li></ul><h3 id="inner-product"><a href="#inner-product" class="headerlink" title="inner_product"></a>inner_product</h3><p>我们知道两个向量的内积公式：已知两个向量：$\vec a =\left(a_1,a_2,\dots,a_i\right )\qquad\qquad\vec b =\left(b_1,b_2,\dots,b_i\right )$</p><p>两个向量的内积：$\vec a \cdot \vec b =a_1b_1+a_2b_2+\dots+a_ib_i$</p><p>两个数组的内积公式依然，数组中元素的个数类比向量的维度。</p><p>将$\left[first1,last1\right)$与$\left[first2,first2+last1-first1\right)$两个区间做内积，并将结果累加到<code>init</code>。</p><p>由于第二区间只给了首迭代器(<code>first2</code>)，要保证容器中的元素个数充足。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIterator1</span>, <span class="keyword">class</span> _<span class="title">InputIterator2</span>, <span class="keyword">class</span> _<span class="title">Tp</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> _<span class="title">BinaryOperation1</span>, <span class="keyword">class</span> _<span class="title">BinaryOperation2</span>&gt;</span></span><br><span class="line"><span class="function">_Tp <span class="title">inner_product</span><span class="params">(_InputIterator1 __first1, _InputIterator1 __last1,</span></span></span><br><span class="line"><span class="params"><span class="function">                  _InputIterator2 __first2, _Tp __init, </span></span></span><br><span class="line"><span class="params"><span class="function">                  _BinaryOperation1 __binary_op1,</span></span></span><br><span class="line"><span class="params"><span class="function">                  _BinaryOperation2 __binary_op2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first1 != __last1; ++__first1, ++__first2)</span><br><span class="line">        __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));</span><br><span class="line">        <span class="comment">//     __init = __init + (*__first1 * *__first2);</span></span><br><span class="line">    <span class="keyword">return</span> __init;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>__binary_op1</code>  —  累加方式</li><li><code>__binary_op2</code>  —  内积方式</li></ul><h3 id="partial-sum"><a href="#partial-sum" class="headerlink" title="partial_sum"></a>partial_sum</h3><p>计算范围$\left[first,last\right)$的子范围中元素的部分和，并写入到始于 result 的范围</p><p>假设$\left[first,last\right)$表示数组$X=\left[x_1,x_2,\dots,x_i,\dots,x_n\right]$，由result开始的数组$Y=\left[y_1,y_2,\dots,y_i,\dots,y_n\right]$。则该函数实现的功能是$y_i = \sum_{n=0}^{i}x_n $。</p><p>类似于数列的$a_i \qquad S_i$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIterator</span>, <span class="keyword">class</span> _<span class="title">OutputIterator</span>, <span class="keyword">class</span> _<span class="title">Tp</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> _<span class="title">BinaryOperation</span>&gt;</span></span><br><span class="line">_OutputIterator </span><br><span class="line">__partial_sum(_InputIterator __first, _InputIterator __last, </span><br><span class="line">              _OutputIterator __result, _Tp*, _BinaryOperation __binary_op)</span><br><span class="line">&#123;</span><br><span class="line">    _Tp __value = *__first;</span><br><span class="line">    <span class="keyword">while</span> (++__first != __last) &#123;</span><br><span class="line">        __value = __binary_op(__value, *__first);</span><br><span class="line">        <span class="comment">//__value = __value + *__first;</span></span><br><span class="line">        *++__result = __value;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> ++__result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIterator</span>, <span class="keyword">class</span> _<span class="title">OutputIterator</span>, <span class="keyword">class</span> _<span class="title">BinaryOperation</span>&gt;</span></span><br><span class="line"><span class="function">_OutputIterator </span></span><br><span class="line"><span class="function"><span class="title">partial_sum</span><span class="params">(_InputIterator __first, _InputIterator __last,</span></span></span><br><span class="line"><span class="params"><span class="function">            _OutputIterator __result, _BinaryOperation __binary_op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__first == __last) <span class="keyword">return</span> __result;<span class="comment">//首尾指针重合 含有0个元素 无操作</span></span><br><span class="line">    *__result = *__first;</span><br><span class="line">    <span class="keyword">return</span> __partial_sum(__first, __last, __result, __VALUE_TYPE(__first), </span><br><span class="line">                         __binary_op);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>__binary_op</code>  —  累加方式</li></ul><h3 id="adjacent-difference"><a href="#adjacent-difference" class="headerlink" title="adjacent_difference"></a>adjacent_difference</h3><p>计算范围$\left[first,last\right)$的相邻元素的差值，并写入到始于 result 的范围。</p><p>假设$\left[first,last\right)$表示数组$X=\left[x_1,x_2,\dots,x_i,\dots,x_n\right]$，由result开始的数组$Y=\left[y_1,y_2,\dots,y_i,\dots,y_n\right]$。则该函数实现的功能是$y_i = x_i - x_{i-1}$，特例$y_0=x_0$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIterator</span>, <span class="keyword">class</span> _<span class="title">OutputIterator</span>, <span class="keyword">class</span> _<span class="title">Tp</span>, </span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> _<span class="title">BinaryOperation</span>&gt;</span></span><br><span class="line">_OutputIterator</span><br><span class="line">__adjacent_difference(_InputIterator __first, _InputIterator __last, </span><br><span class="line">                      _OutputIterator __result, _Tp*,</span><br><span class="line">                      _BinaryOperation __binary_op) &#123;</span><br><span class="line">    _Tp __value = *__first;<span class="comment">// x_&#123;i-1&#125;</span></span><br><span class="line">    <span class="keyword">while</span> (++__first != __last) &#123;</span><br><span class="line">        _Tp __tmp = *__first;</span><br><span class="line">        *++__result = __binary_op(__tmp, __value);</span><br><span class="line">        <span class="comment">// *++__result = __tmp - __value; </span></span><br><span class="line">        __value = __tmp;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">return</span> ++__result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIterator</span>, <span class="keyword">class</span> _<span class="title">OutputIterator</span>, <span class="keyword">class</span> _<span class="title">BinaryOperation</span>&gt;</span></span><br><span class="line"><span class="function">_OutputIterator </span></span><br><span class="line"><span class="function"><span class="title">adjacent_difference</span><span class="params">(_InputIterator __first, _InputIterator __last,</span></span></span><br><span class="line"><span class="params"><span class="function">                    _OutputIterator __result, _BinaryOperation __binary_op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__first == __last) <span class="keyword">return</span> __result;<span class="comment">//重合无任何操作</span></span><br><span class="line">    *__result = *__first;<span class="comment">//y0 = x0</span></span><br><span class="line">    <span class="keyword">return</span> __adjacent_difference(__first, __last, __result,</span><br><span class="line">                                 __VALUE_TYPE(__first),</span><br><span class="line">                                 __binary_op);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>__binary_op</code>  —  作差方式</li></ul><h3 id="power"><a href="#power" class="headerlink" title="power"></a>power</h3><p>快速幂求$x^n$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="keyword">class</span> _<span class="title">Integer</span>, <span class="keyword">class</span> _<span class="title">MonoidOperation</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> _Tp <span class="title">power</span><span class="params">(_Tp __x, _Integer __n, _MonoidOperation __opr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> __power(__x, __n, __opr);</span><br><span class="line">    <span class="comment">//return __power(__x, __n, multiplies&lt;_Tp&gt;());  </span></span><br><span class="line">    <span class="comment">//不传操作符默认调用算数仿函数multiplies</span></span><br><span class="line">    <span class="comment">//影响的是移位时值改变的方式。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>, <span class="keyword">class</span> _<span class="title">Integer</span>, <span class="keyword">class</span> _<span class="title">MonoidOperation</span>&gt;</span></span><br><span class="line">_Tp __power(_Tp __x, _Integer __n, _MonoidOperation __opr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (__n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">identity_element</span>(__opr);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> ((__n &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            __n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            __x = __opr(__x, __x);</span><br><span class="line">            <span class="comment">//默认传参multiplies是相乘，在此可更改</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _Tp __result = __x;</span><br><span class="line">        __n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (__n != <span class="number">0</span>) &#123;</span><br><span class="line">            __x = __opr(__x, __x);</span><br><span class="line">            <span class="keyword">if</span> ((__n &amp; <span class="number">1</span>) != <span class="number">0</span>)</span><br><span class="line">                __result = __opr(__result, __x);</span><br><span class="line">            __n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> __result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p>将$\left[value,value+last-first\right)$元素的值赋给$\left[fist,last\right)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter</span>, <span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">iota</span><span class="params">(_ForwardIter __first, _ForwardIter __last, _Tp __value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (__first != __last)</span><br><span class="line">        *__first++ = __value++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="iter-swap"><a href="#iter-swap" class="headerlink" title="iter_swap"></a>iter_swap</h3><p>交换所指向的元素。（指向的内存不变）</p><blockquote><p>以下几个copy/fill函数均有针对字符串的重载，调用<code>memset</code>去赋值。</p><p>由于实现的功能是赋值，也没有额外增加运算规则的重载。</p></blockquote><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>正向拷贝（<mark>从前往后</mark>读取并赋值）。有<code>random_access_iterator_tag</code>、<code>input_iterator_tag</code>、<code>__copy_trivial</code>等多个版本所实现的功能均为将$\left[first,last\right)$区域的内容拷贝至$\left[result,result+last-first\right)$内。</p><h3 id="copy-backward"><a href="#copy-backward" class="headerlink" title="copy_backward"></a>copy_backward</h3><p>反向拷贝（<mark>从后往前</mark>读取并赋值）。同样有多个重载版本，但实现的功能一样。</p><p>将$\left[first,last\right)$区域的内容拷贝至$\left[result-\left(last-first\right),result\right)$内。</p><h3 id="copy-n"><a href="#copy-n" class="headerlink" title="copy_n"></a>copy_n</h3><p>将$\left[first,first+n\right)$拷贝给$\left[result,result+n\right)$</p><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>将$\left[first,last\right)$的值赋为<code>value</code></p><h3 id="fill-n"><a href="#fill-n" class="headerlink" title="fill_n"></a>fill_n</h3><p>将$\left[first,first+n\right)$的值赋为<code>value</code></p><h3 id="mismatch"><a href="#mismatch" class="headerlink" title="mismatch"></a>mismatch</h3><p>将$\left[first1,last1\right)$与$\left[first2,first2+last1-first1\right)$中对应位置的元素进行对比。返回 值不相等时的<mark>两个迭代器</mark></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter1</span>, <span class="keyword">class</span> _<span class="title">InputIter2</span>, <span class="keyword">class</span> _<span class="title">BinaryPredicate</span>&gt;</span></span><br><span class="line"><span class="function">pair&lt;_InputIter1, _InputIter2&gt; <span class="title">mismatch</span><span class="params">(_InputIter1 __first1,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        _InputIter1 __last1,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        _InputIter2 __first2,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        _BinaryPredicate __binary_pred)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (__first1 != __last1 &amp;&amp; __binary_pred(*__first1, *__first2)) &#123;</span><br><span class="line">        <span class="comment">//*__first1 == *__first2</span></span><br><span class="line">        ++__first1;</span><br><span class="line">        ++__first2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pair&lt;_InputIter1, _InputIter2&gt;(__first1, __first2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>__binary_pred</code>  —  自定义的比较规则</li></ul><h3 id="equal"><a href="#equal" class="headerlink" title="equal"></a>equal</h3><p>对比$\left[first1,last1\right)$与$\left[first2,first2+last1-first1\right)$对应位置的元素是否相等，完全相等返回<code>true</code></p><h3 id="lexicographical-compare"><a href="#lexicographical-compare" class="headerlink" title="lexicographical_compare"></a>lexicographical_compare</h3><p>以字典序对比$\left[first1,last1\right)$与$\left[first2,last2\right)$。区间1小于区间2则返回<code>true</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">InputIter1</span>, <span class="keyword">class</span> _<span class="title">InputIter2</span>, <span class="keyword">class</span> _<span class="title">Compare</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">lexicographical_compare</span><span class="params">(_InputIter1 __first1, _InputIter1 __last1,</span></span></span><br><span class="line"><span class="params"><span class="function">                             _InputIter2 __first2, _InputIter2 __last2,</span></span></span><br><span class="line"><span class="params"><span class="function">                             _Compare __comp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first1 != __last1 &amp;&amp; __first2 != __last2</span><br><span class="line">          ; ++__first1, ++__first2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__comp(*__first1, *__first2))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//字符小于</span></span><br><span class="line">        <span class="keyword">if</span> (__comp(*__first2, *__first1))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="comment">//前面字符相等 但2长（1为2的前缀）</span></span><br><span class="line">    <span class="keyword">return</span> __first1 == __last1 &amp;&amp; __first2 != __last2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="median"><a href="#median" class="headerlink" title="__median"></a>__median</h3><p>一个辅助函数，用于寻找3个元素中的最小值。</p><ul><li>可传入第四个参数<code>__comp</code>，用于更改元素间的比对规则。</li></ul><h3 id="for-each"><a href="#for-each" class="headerlink" title="for_each"></a>for_each</h3><p>遍历。遍历$\left[first,last\right)$区间，并对每个元素执行<code>_Function __f</code></p><blockquote><p>以下 find/count函数针对<code>iterator_category</code>不同</p><p>分为<code>input_iterator_tag</code>和<code>random_access_iterator_tag</code>两个版本</p></blockquote><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在$\left[first,last\right)$中查找第一个值为<code>val</code>的位置。</p><h3 id="find-if"><a href="#find-if" class="headerlink" title="find_if"></a>find_if</h3><p>在$\left[first,last\right)$中查找第一个值满足<code>__pred</code>条件的位置。</p><h3 id="adjacent-find"><a href="#adjacent-find" class="headerlink" title="adjacent_find"></a>adjacent_find</h3><p>在$\left[first,last\right)$中查找 2 个连续相等的元素。如果能找到返回前一个元素位置的迭代器。</p><p>允许自定义判断规则<code>__binary_pred</code></p><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>判断$\left[first,last\right)$中<code>val</code>出现的次数，并将值加在<code>n</code>上。</p><h3 id="count-if"><a href="#count-if" class="headerlink" title="count_if"></a>count_if</h3><p>判断$\left[first,last\right)$中元素满足<code>__pred</code>条件的个数，并将值加在<code>n</code>上。</p><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>在$\left[first1,last1\right)$中寻找第一个与$\left[first2,last2\right)$相等（或满足<code>__predicate</code>条件）的子数组，返回首个元素的位置。</p><h3 id="search-n"><a href="#search-n" class="headerlink" title="search_n"></a>search_n</h3><p>在$\left[first,last\right)$中寻找第一次连续出现<code>__count</code>个元素值等于<code>__val</code>（或满足<code>__binary_pred</code>条件的<code>__val</code>）的位置。（返回首元素位置）</p><h3 id="swap-ranges"><a href="#swap-ranges" class="headerlink" title="swap_ranges"></a>swap_ranges</h3><p>调用[iter_swap](# iter_swap)实现，互换$\left[first1,last1\right)$与$\left[first2,first2+last1-first1\right)$区间元素（交换所存的值）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">ForwardIter1</span>, <span class="keyword">class</span> _<span class="title">ForwardIter2</span>&gt;</span></span><br><span class="line"><span class="function">_ForwardIter2 <span class="title">swap_ranges</span><span class="params">(_ForwardIter1 __first1, _ForwardIter1 __last1,</span></span></span><br><span class="line"><span class="params"><span class="function">                          _ForwardIter2 __first2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> ( ; __first1 != __last1; ++__first1, ++__first2)</span><br><span class="line">        <span class="built_in">iter_swap</span>(__first1, __first2);</span><br><span class="line">    <span class="keyword">return</span> __first2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>将函数<code>__opr</code>(可一元和二元)应用到序列$\left[first1,last1\right)$的元素上，并将这个函数返回的值保存到另一个序列中$\left[result,result+last1-first1\right)$。</p><p>当传入二元仿函数时，需要额外传入一个迭代器<code>first2</code>，所实现的功能是：将$\left[first1,last1\right)$与$\left[first2,first2+last1-first1\right)$进行<code>__binary_op</code>运算并将结果存储在$\left[result,result+last1-first1\right)$</p><blockquote><p>transform与for_each的区别</p></blockquote><ul><li>for_each所调用的仿函数没有返回值，且只能在原位置上修改。</li><li>transform所调用的函数必须有返回值（要依次赋值给另一区间），原位置元素不受影响。</li></ul><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>将$\left[first,last\right)$中值等于<code>__old_value</code>的元素（满足<code>pred</code>条件的元素）替换为<code>__new_value</code></p><h3 id="replace-copy-if"><a href="#replace-copy-if" class="headerlink" title="replace_copy(_if)"></a>replace_copy(_if)</h3><p><code>replace</code>中的替换是在原位置上进行，该函数是以原数组为基础进行操作，并将结果存在新位置。</p><p>将$\left[first,last\right)$中的值赋值到$\left[result,result+last-first\right)$中，并将其中等于<code>__old_value</code>的元素（满足<code>pred</code>条件的元素，增加<code>_if</code>）替换为<code>__new_value</code>。</p><h3 id="generate-n"><a href="#generate-n" class="headerlink" title="generate(_n)"></a>generate(_n)</h3><p>为$\left[first,last\right)$（或$\left[first,first+n\right)$）中元素赋值为<code>__gen</code>。<code>__gen</code>要求为lambda表达式。</p><blockquote><p>generate与for_each区别</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//generate</span></span><br><span class="line"><span class="keyword">for</span> ( ; __first != __last; ++__first)</span><br><span class="line">    *__first = __gen();</span><br><span class="line"><span class="comment">//for_each</span></span><br><span class="line"><span class="keyword">for</span> ( ; __first != __last; ++__first)</span><br><span class="line">    __f(*__first);</span><br></pre></td></tr></table></figure><p>因为函数调用的形式不同，进而对输入的要求也不同。for_each传入的是一个仿函数，而generate传入的是lambda表达式。</p><h3 id="remove-copy-if"><a href="#remove-copy-if" class="headerlink" title="remove(_copy) (_if)"></a><code>remove(_copy) (_if)</code></h3><blockquote><p>值为<code>__value</code>可以替换成满足<code>__pred</code>条件（函数名增加<code>_if</code>）</p></blockquote><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><p>在$\left[first,last\right)$中删除掉值为<code>__value</code>的元素（后面元素前移实现覆盖。）</p><p>为实现后面元素前移的覆盖，使用的是<code>remove_copy</code>函数</p><h4 id="remove-copy"><a href="#remove-copy" class="headerlink" title="remove_copy"></a>remove_copy</h4><p>在$\left[first,last\right)$中删除掉值为<code>__value</code>的元素并将结果保存到以<code>__result</code>为首地址的容器中。</p><h3 id="unique-copy"><a href="#unique-copy" class="headerlink" title="unique_copy"></a>unique_copy</h3><p>将$\left[first,last\right)$，拷贝到$\left[result,result+last-first\right)$中，并将连续相等元素删除后者。</p><p>(相邻且满足<code>__binary_pred</code>条件的后者)</p><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>对$\left[first,last\right)$中连续相等的元素删除后者(相邻且满足<code>__binary_pred</code>条件的后者)</p><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p>翻转$\left[first,last\right)$区间内的元素。（从两端向中间，依次交换所存储的值）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">BidirectionalIter</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(_BidirectionalIter __first, _BidirectionalIter __last)</span> </span>&#123;</span><br><span class="line">    __reverse(__first, __last, __ITERATOR_CATEGORY(__first));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">RandomAccessIter</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> __reverse(_RandomAccessIter __first, _RandomAccessIter __last,</span><br><span class="line">               random_access_iterator_tag) &#123;</span><br><span class="line">    <span class="keyword">while</span> (__first &lt; __last)</span><br><span class="line">        <span class="built_in">iter_swap</span>(__first++, --__last);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reverse-copy"><a href="#reverse-copy" class="headerlink" title="reverse_copy"></a>reverse_copy</h3><blockquote><p>与先<code>reverse</code>后拷贝实现上有些差别</p></blockquote><p>逆序读取$\left[first,last\right)$区间的值，并写入$\left[result,result+last-first\right)$中</p><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate"></a>rotate</h3><p>将$\left[first,last\right)$中的元素以<code>middle</code>断开。先存放$\left[middle,last\right)$再存放$\left[first,middle\right)$。返回，开始时first指向的元素现在的位置。（底层实现上疯狂转轮，看不懂）</p><h3 id="rotate-copy"><a href="#rotate-copy" class="headerlink" title="rotate_copy"></a>rotate_copy</h3><blockquote><p>与先<code>rotate</code>后拷贝实现上有些差别</p></blockquote><p>先调用<code>copy(__middle, __last, __result)</code>将$\left[middle,last\right)$的元素存放在以<code>result</code>开始的空间，然后利用copy返回值<code>iter</code>（result开始的数组下一可存放位置）再次调用<code>copy(__first, __middle,iter)</code>将$\left[first,middle\right)$中的元素拷贝到剩余部分。</p><blockquote><p>下述扰乱函数 可加入一个生成随机数的仿函数<code>__rand</code></p></blockquote><h3 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle"></a>random_shuffle</h3><p>将$\left[first,last\right)$中的元素随机扰乱。（随机洗牌）有$\left(last-first\right)!$种可能。</p><h3 id="random-sample-n"><a href="#random-sample-n" class="headerlink" title="random_sample_n"></a>random_sample_n</h3><p>将$\left[first,last\right)$中的$\min\left(last-first,n\right)$个元素随机的复制到$\left[out,out+n\right)$中。（原数组中每个位置的元素仅能出现一次。）</p><h3 id="random-sample"><a href="#random-sample" class="headerlink" title="random_sample"></a>random_sample</h3><p>将$\left[first,last\right)$中的$\min\left(last-first, olast-ofirst\right)$个元素随机的复制到$\left[olast,ofirst\right)$中。（原数组中每个位置的元素仅能出现一次。）</p><p>以$n =olast-ofirst$ 为参数调用<code>random_sample_n</code></p><h3 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h3><p>以<code>__pred</code>为规则对$\left[first,last\right)$中的元素进行分组（不保证顺序）满足条件的移动至前半部分。</p><h3 id="stable-partition"><a href="#stable-partition" class="headerlink" title="stable_partition"></a>stable_partition</h3><p>同样执行<code>partition</code>相关功能，但保证各自分组内元素的相对顺序。</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>对$\left[first,last\right)$进行升序排序。所使用的底层排序算法为插入排序、堆排序（调用<code>partial_sort</code>函数，底层堆排序）。</p><blockquote><p>值相同的元素再排序后，不保证其相对位置。</p></blockquote><h3 id="stable-sort"><a href="#stable-sort" class="headerlink" title="stable_sort"></a>stable_sort</h3><p>对$\left[first,last\right)$进行升序排序。底层排序算法 归并排序。值相同会保证相对位置。</p><h3 id="partial-sort"><a href="#partial-sort" class="headerlink" title="partial_sort"></a>partial_sort</h3><p>在$\left[first,last\right)$中选出<code>middle - first</code>个最小元素存放在$\left[first,middle\right)$中。</p><h3 id="partial-sort-copy"><a href="#partial-sort-copy" class="headerlink" title="partial_sort_copy"></a>partial_sort_copy</h3><p>在$\left[first,last\right)$中选出$rfirst-rlast$个最小元素，存放在$\left[rfirst,rlast\right)$中</p><h3 id="nth-element"><a href="#nth-element" class="headerlink" title="nth_element"></a>nth_element</h3><p>在$\left[first,last\right)$中找到第n小的元素，并将其移动到第n个位置（$first+n-1$）</p><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p>在$\left[first,last\right)$中寻找第一个不小于<code>val</code>的元素。（<code>__comp</code>重载比较规则）</p><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><p>在$\left[first,last\right)$中寻找第一个大于<code>val</code>的元素。（<code>__comp</code>重载比较规则）</p><h3 id="equal-range"><a href="#equal-range" class="headerlink" title="equal_range"></a>equal_range</h3><p>在$\left[first,last\right)$中寻找等于<code>val</code>的<mark>所有</mark>元素。（<code>__comp</code>重载比较规则）</p><h3 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search"></a>binary_search</h3><p>在$\left[first,last\right)$中二分查找是否存在元素<code>val</code></p><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>将$\left[first1,last1\right)$与$\left[first2,last2\right)$归并排序后存在$\left[result,result+last1-first1+last2-first2\right)$中</p><p>需要注意$\left[first1,last1\right)$与$\left[first2,last2\right)$均为升序。</p><h3 id="inplace-merge"><a href="#inplace-merge" class="headerlink" title="inplace_merge"></a>inplace_merge</h3><p>同样是归并排序。所不同的是该函数是在一个数组中间选定一个中间值，分成前后两个子数组，两个子数组进行归并排序，最终结果存在原数组中。由于涉及到元素换位置问题，故和merge有些出入。</p><p>$\left[first,middle\right)$和$\left[middle,last\right)$进行排序。</p><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><p>判断$\left[first2,last2\right)$是否存在于$\left[first1,last1\right)$中，返回T/F</p><h3 id="set-union"><a href="#set-union" class="headerlink" title="set_union"></a>set_union</h3><p>实现两个有序集合$\left[first1,last1\right)$和$\left[first2,last2\right)$的并集操作，并将结果（仍有序）保存在以<code>result</code>开始的数组中。</p><p>$\alpha \cup \beta$</p><blockquote><p> 与<code>merge</code>不同点在于，<code>set_union</code>遇到相同元素会去重。</p></blockquote><h3 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set_intersection"></a>set_intersection</h3><p>求两个集合$\left[first1,last1\right)$和$\left[first2,last2\right)$中相同的元素（或<code>comp(1,2)</code>与<code>comp(2,1)</code>均不满足的）。并将结果（仍有序）保存在以<code>result</code>开始的数组中。</p><p>$\alpha \cap \beta $</p><h3 id="set-difference"><a href="#set-difference" class="headerlink" title="set_difference"></a>set_difference</h3><p>求在$\left[first1,last1\right)$不在$\left[first2,last2\right)$中的元素。并将结果（仍有序）保存在以<code>result</code>开始的数组中。</p><p>$\alpha -\beta $</p><h3 id="set-symmetric-difference"><a href="#set-symmetric-difference" class="headerlink" title="set_symmetric_difference"></a>set_symmetric_difference</h3><p>$\left[first1,last1\right)$与$\left[first2,last2\right)$不重复的元素。</p><p>$\alpha \cup\beta - \alpha \cap\beta$</p><h3 id="max-element"><a href="#max-element" class="headerlink" title="max_element"></a>max_element</h3><p>返回$\left[first,last\right)$中元素值最大的元素的迭代器（重定义比较规则<code>comp</code>）</p><h3 id="min-element"><a href="#min-element" class="headerlink" title="min_element"></a>min_element</h3><p>返回$\left[first,last\right)$中元素值最小的元素的迭代器（重定义比较规则<code>comp</code>）</p><h3 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a>next_permutation</h3><p>由$\left[first,last\right)$中所有元素组成的排列中，按照从小到大排序后，当前的下一个排列。</p><h3 id="prev-permutation"><a href="#prev-permutation" class="headerlink" title="prev_permutation"></a>prev_permutation</h3><p>由$\left[first,last\right)$中所有元素组成的排列中，按照从小到大排序后，当前的上一个排列。</p><h3 id="find-first-of"><a href="#find-first-of" class="headerlink" title="find_first_of"></a>find_first_of</h3><p>寻找$\left[first2,last2\right)$中的（任意）字符在$\left[first1,last1\right)$中出现最早的位置。返回该位置的下一位置。（或$\left[first2,last2\right)$）中满足<code>__comp</code>条件的元素。</p><p>$\left[first1,last1\right)$中每读取一个元素便与$\left[first2,last2\right)$中所有元素比对一次。</p><h3 id="find-end"><a href="#find-end" class="headerlink" title="find_end"></a>find_end</h3><p>在$\left[first1,last1\right)$中寻找最后一个与$\left[first2,last2\right)$相等（或满足<code>__predicate</code>条件）的子数组，返回首个元素的位置。</p><h3 id="is-sorted"><a href="#is-sorted" class="headerlink" title="is_sorted"></a>is_sorted</h3><p>$\left[first,last\right)$是否有序(或 任意相邻元素满足<code>__comp</code>关系)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是在阅读SGI STL v3.3源码中关于&lt;code&gt;algorithm&lt;/code&gt;部分，遇到的一些问题及有意思的点。&lt;/p&gt;
&lt;p&gt;至此，STL六大件告一段落。（源码中，还有一些实现相应辅助功能的其他文件在此假装没有）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CPP" scheme="http://example.com/tags/CPP/"/>
    
    <category term="SGI_STL" scheme="http://example.com/tags/SGI-STL/"/>
    
  </entry>
  
  <entry>
    <title>STL源码-仿函数</title>
    <link href="http://example.com/STL%E6%BA%90%E7%A0%81-%E4%BB%BF%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/STL%E6%BA%90%E7%A0%81-%E4%BB%BF%E5%87%BD%E6%95%B0/</id>
    <published>2022-07-08T02:33:17.000Z</published>
    <updated>2022-08-24T14:08:24.475Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读<code>SGI STL</code>源码中关于<code>functor</code>部分的笔记</p><p>同样，本文仍然是建立在已经观看过<a href="https://endgame.cc/2022/06/23/STL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/">侯捷老师STL源码剖析课程</a>的基础上。是在阅读源码过程中，对其中的内容进行补充、修饰。</p><span id="more"></span><h2 id="functor"><a href="#functor" class="headerlink" title="functor"></a>functor</h2><p>仿函数的行为类似于函数，但其可以作为算法的比较策略（优化算法的使用）</p><p>仿函数是一种重载了<code>operator()</code>的模板类，主要用于STL中作为算法的判断条件。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>从<mark>操作数的个数</mark>上分，可以将仿函数划分为一元仿函数和二元仿函数。</p><h4 id="unary-function"><a href="#unary-function" class="headerlink" title="unary_function"></a>unary_function</h4><p>一元仿函数，呈现一元函数的参数类型和返回值类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg</span>, <span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">unary_function</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> _Arg argument_type;</span><br><span class="line">    <span class="keyword">typedef</span> _Result result_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="binary-function"><a href="#binary-function" class="headerlink" title="binary_function"></a>binary_function</h4><p>二元仿函数，呈现二元函数的第一参数类型、第二参数类型，以及返回值类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>, <span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binary_function</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> _Arg1 first_argument_type;</span><br><span class="line">    <span class="keyword">typedef</span> _Arg2 second_argument_type;</span><br><span class="line">    <span class="keyword">typedef</span> _Result result_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从所实现的功能上划分，可以分为算数类、逻辑运算类、关系运算类。</p></blockquote><ul><li>算数类  —  加法(plus)、减法(minus)、乘法(multiplies)、除法(divides)</li><li>逻辑运算类  —  与（logical_and）、或(logical_or)、非(logical_not)</li><li>关系运算类  —  等于（equal_to）、大于等于（greater_equal）、小于（less）</li></ul><p>下面具体介绍相关仿函数。</p><h4 id="算数类仿函数"><a href="#算数类仿函数" class="headerlink" title="算数类仿函数"></a>算数类仿函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">plus</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,_Tp&gt; &#123;</span><br><span class="line">    <span class="function">_Tp <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x + __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">minus</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,_Tp&gt; &#123;</span><br><span class="line">    <span class="function">_Tp <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x - __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">multiplies</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,_Tp&gt; &#123;</span><br><span class="line">    <span class="function">_Tp <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x * __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">divides</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,_Tp&gt; &#123;</span><br><span class="line">    <span class="function">_Tp <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x / __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//取余</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">modulus</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,_Tp&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">_Tp <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x % __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 取反</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">negate</span> :</span> <span class="keyword">public</span> unary_function&lt;_Tp,_Tp&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">_Tp <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> -__x; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="关系运算类仿函数"><a href="#关系运算类仿函数" class="headerlink" title="关系运算类仿函数"></a>关系运算类仿函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等于</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">equal_to</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x == __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等于</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">not_equal_to</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x != __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">greater</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x &gt; __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 小于</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">less</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x &lt; __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大于等于</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">greater_equal</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x &gt;= __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小于等于</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">less_equal</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt; </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x &lt;= __y; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="逻辑运算类仿函数"><a href="#逻辑运算类仿函数" class="headerlink" title="逻辑运算类仿函数"></a>逻辑运算类仿函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑与</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">logical_and</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x &amp;&amp; __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑或</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">logical_or</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Tp,<span class="keyword">bool</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x || __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑非</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">logical_not</span> :</span> <span class="keyword">public</span> unary_function&lt;_Tp,<span class="keyword">bool</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> !__x; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Functor-Adapter"><a href="#Functor-Adapter" class="headerlink" title="Functor Adapter"></a>Functor Adapter</h4><h5 id="not1"><a href="#not1" class="headerlink" title="not1"></a>not1</h5><p>创建返回传递的一元谓词的反义的函数对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Predicate</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">unary_negate</span> :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">typename</span> _Predicate::argument_type, <span class="keyword">bool</span>&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Predicate _M_pred;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">unary_negate</span><span class="params">(<span class="keyword">const</span> _Predicate&amp; __x)</span> : _M_pred(__x) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> _Predicate::argument_type&amp; __x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !_M_pred(__x);</span><br><span class="line">        <span class="comment">//operator()重载</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Predicate</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> unary_negate&lt;_Predicate&gt;  <span class="title">not1</span><span class="params">(<span class="keyword">const</span> _Predicate&amp; __pred)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unary_negate&lt;_Predicate&gt;(__pred);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="not2"><a href="#not2" class="headerlink" title="not2"></a>not2</h5><p>同理，创建返回传递的二元谓词的反义的函数对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Predicate</span>&gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">binary_negate</span> </span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> binary_function&lt;<span class="keyword">typename</span> _Predicate::first_argument_type,</span><br><span class="line">                           <span class="keyword">typename</span> _Predicate::second_argument_type,</span><br><span class="line">                           <span class="keyword">bool</span>&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Predicate _M_pred;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">binary_negate</span><span class="params">(<span class="keyword">const</span> _Predicate&amp; __x)</span> : _M_pred(__x) &#123;</span>&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> _Predicate::first_argument_type&amp; __x, </span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">const</span> <span class="keyword">typename</span> _Predicate::second_argument_type&amp; __y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !_M_pred(__x, __y); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Predicate</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> binary_negate&lt;_Predicate&gt;  <span class="title">not2</span><span class="params">(<span class="keyword">const</span> _Predicate&amp; __pred)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binary_negate&lt;_Predicate&gt;(__pred);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bind1st"><a href="#bind1st" class="headerlink" title="bind1st"></a>bind1st</h5><p>bind1st,bind2nd要求传入两个参数 第一参数为<code>functor</code>、第二参数为<code>value</code>。</p><p>将一个二元仿函数转化为一元，并将<code>value</code>绑定为<code>functor</code>的第一参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation</span>&gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">binder1st</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">typename</span> _Operation::second_argument_type,</span><br><span class="line">                          <span class="keyword">typename</span> _Operation::result_type&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Operation op;</span><br><span class="line">    <span class="keyword">typename</span> _Operation::first_argument_type value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">binder1st</span>(<span class="keyword">const</span> _Operation&amp; __x,</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">typename</span> _Operation::first_argument_type&amp; __y)</span><br><span class="line">      : <span class="built_in">op</span>(__x), <span class="built_in">value</span>(__y) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">typename</span> _Operation::result_type</span></span><br><span class="line"><span class="function">    <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> _Operation::second_argument_type&amp; __x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">op</span>(value, __x); </span><br><span class="line">        <span class="comment">//这里调用op和传入的值value，可见第一参数op应为仿函数</span></span><br><span class="line">        <span class="comment">//和仿函数一起传入的参数value，作为仿函数的第一参数。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation</span>, <span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> binder1st&lt;_Operation&gt; </span></span><br><span class="line"><span class="function"><span class="title">bind1st</span><span class="params">(<span class="keyword">const</span> _Operation&amp; __fn, <span class="keyword">const</span> _Tp&amp; __x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> _Operation::first_argument_type _Arg1_type;</span><br><span class="line">    <span class="keyword">return</span> binder1st&lt;_Operation&gt;(__fn, _Arg1_type(__x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bind2nd"><a href="#bind2nd" class="headerlink" title="bind2nd"></a>bind2nd</h5><p>将一个二元仿函数转化为一元，并将<code>value</code>绑定为<code>functor</code>的第二参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation</span>&gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">binder2nd</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">typename</span> _Operation::first_argument_type,</span><br><span class="line">                          <span class="keyword">typename</span> _Operation::result_type&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Operation op;</span><br><span class="line">    <span class="keyword">typename</span> _Operation::second_argument_type value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">binder2nd</span>(<span class="keyword">const</span> _Operation&amp; __x,</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">typename</span> _Operation::second_argument_type&amp; __y) </span><br><span class="line">      : <span class="built_in">op</span>(__x), <span class="built_in">value</span>(__y) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">typename</span> _Operation::result_type</span></span><br><span class="line"><span class="function">    <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> _Operation::first_argument_type&amp; __x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">op</span>(__x, value); </span><br><span class="line">        <span class="comment">//value作为仿函数的第二参数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation</span>, <span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> binder2nd&lt;_Operation&gt;  <span class="title">bind2nd</span><span class="params">(<span class="keyword">const</span> _Operation&amp; __fn, <span class="keyword">const</span> _Tp&amp; __x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> _Operation::second_argument_type _Arg2_type;</span><br><span class="line">    <span class="keyword">return</span> binder2nd&lt;_Operation&gt;(__fn, _Arg2_type(__x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bind1st</code>将操作数作为二元仿函数的第一个参数，<code>bind2nd</code>将操作数作为二元仿函数的第二个参数。</p><p>样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">auto</span> pos1 = <span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="built_in">bind1st</span>(less&lt;<span class="keyword">int</span>&gt;(), <span class="number">2</span>));</span><br><span class="line">    cout &lt;&lt; pos1 - vec.<span class="built_in">begin</span>() &lt;&lt; endl;<span class="comment">// 3</span></span><br><span class="line">    <span class="comment">//bind1st 作为第一参数，调用时为 2 &lt; vec[i] ?   角标3时满足条件，返回。</span></span><br><span class="line">    <span class="keyword">auto</span> pos2 = <span class="built_in">find_if</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="built_in">bind2nd</span>(less&lt;<span class="keyword">int</span>&gt;(), <span class="number">2</span>));</span><br><span class="line">    cout &lt;&lt; pos2 - vec.<span class="built_in">begin</span>() &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line">    <span class="comment">//bind2nd 作为第二参数，调用时为 vec[i] &lt; 2 ? 角标0即满足条件，返回。 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="compose1"><a href="#compose1" class="headerlink" title="compose1"></a>compose1</h5><p>一元组合仿函数适配器。将两个函数嵌套。</p><p>传入$f\left(x\right),g\left(x\right)$实现$f\left(g\left(x\right)\right)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation1</span>, <span class="keyword">class</span> _<span class="title">Operation2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">unary_compose</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">typename</span> _Operation2::argument_type,</span><br><span class="line">                          <span class="keyword">typename</span> _Operation1::result_type&gt; </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Operation1 _M_fn1;</span><br><span class="line">    _Operation2 _M_fn2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unary_compose</span>(<span class="keyword">const</span> _Operation1&amp; __x, <span class="keyword">const</span> _Operation2&amp; __y) </span><br><span class="line">        : _M_fn1(__x), _M_fn2(__y) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">typename</span> _Operation1::result_type</span></span><br><span class="line"><span class="function">    <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> _Operation2::argument_type&amp; __x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _M_fn1(_M_fn2(__x));<span class="comment">//实现f(g(x))</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation1</span>, <span class="keyword">class</span> _<span class="title">Operation2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> unary_compose&lt;_Operation1,_Operation2&gt; </span></span><br><span class="line"><span class="function"><span class="title">compose1</span><span class="params">(<span class="keyword">const</span> _Operation1&amp; __fn1, <span class="keyword">const</span> _Operation2&amp; __fn2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unary_compose&lt;_Operation1,_Operation2&gt;(__fn1, __fn2);<span class="comment">//传入两个一元仿函数f(x),g(x)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="compose2"><a href="#compose2" class="headerlink" title="compose2"></a>compose2</h5><p>传入三个参数$f\left(x,y\right),g\left(x\right),h\left(x\right)$实现$f\left(g\left(x\right),h\left(x\right)\right)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation1</span>, <span class="keyword">class</span> _<span class="title">Operation2</span>, <span class="keyword">class</span> _<span class="title">Operation3</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">binary_compose</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">typename</span> _Operation2::argument_type,</span><br><span class="line">                          <span class="keyword">typename</span> _Operation1::result_type&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Operation1 _M_fn1;</span><br><span class="line">    _Operation2 _M_fn2;</span><br><span class="line">    _Operation3 _M_fn3;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">binary_compose</span>(<span class="keyword">const</span> _Operation1&amp; __x, <span class="keyword">const</span> _Operation2&amp; __y, </span><br><span class="line">                 <span class="keyword">const</span> _Operation3&amp; __z) </span><br><span class="line">      : _M_fn1(__x), _M_fn2(__y), _M_fn3(__z) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">typename</span> _Operation1::result_type</span></span><br><span class="line"><span class="function">    <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> _Operation2::argument_type&amp; __x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _M_fn1(_M_fn2(__x), _M_fn3(__x));</span><br><span class="line">        实现<span class="built_in">fn1</span>(<span class="built_in">fn2</span>(x),<span class="built_in">fn3</span>(x));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Operation1</span>, <span class="keyword">class</span> _<span class="title">Operation2</span>, <span class="keyword">class</span> _<span class="title">Operation3</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> binary_compose&lt;_Operation1, _Operation2, _Operation3&gt; </span></span><br><span class="line"><span class="function"><span class="title">compose2</span><span class="params">(<span class="keyword">const</span> _Operation1&amp; __fn1, <span class="keyword">const</span> _Operation2&amp; __fn2, </span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="keyword">const</span> _Operation3&amp; __fn3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binary_compose&lt;_Operation1,_Operation2,_Operation3&gt;</span><br><span class="line">        (__fn1, __fn2, __fn3);<span class="comment">//传入三个仿函数，其中fn1为二元，fn2,fn3为一元</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ptr-fun"><a href="#ptr-fun" class="headerlink" title="ptr_fun"></a>ptr_fun</h5><p>c++11被弃用，被<code>std::function</code>替代。</p><p>用于将函数包装成仿函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装一元函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg</span>, <span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pointer_to_unary_function</span> :</span> <span class="keyword">public</span> unary_function&lt;_Arg, _Result&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    _Result (*_M_ptr)(_Arg);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">pointer_to_unary_function</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">pointer_to_unary_function</span><span class="params">(_Result (*__x)(_Arg))</span> : _M_ptr(__x) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Result <span class="title">operator</span><span class="params">()</span><span class="params">(_Arg __x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _M_ptr(__x); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg</span>, <span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> pointer_to_unary_function&lt;_Arg, _Result&gt; <span class="title">ptr_fun</span><span class="params">(_Result (*__x)(_Arg))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pointer_to_unary_function&lt;_Arg, _Result&gt;(__x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//包装二元函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>, <span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pointer_to_binary_function</span> :</span> </span><br><span class="line"><span class="keyword">public</span> binary_function&lt;_Arg1,_Arg2,_Result&gt; &#123;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    _Result (*_M_ptr)(_Arg1, _Arg2);</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">pointer_to_binary_function</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">pointer_to_binary_function</span><span class="params">(_Result (*__x)(_Arg1, _Arg2))</span> </span></span><br><span class="line"><span class="function">        : _M_ptr(__x) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Result <span class="title">operator</span><span class="params">()</span><span class="params">(_Arg1 __x, _Arg2 __y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _M_ptr(__x, __y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>, <span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> pointer_to_binary_function&lt;_Arg1,_Arg2,_Result&gt; </span></span><br><span class="line"><span class="function"><span class="title">ptr_fun</span><span class="params">(_Result (*__x)(_Arg1, _Arg2))</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pointer_to_binary_function&lt;_Arg1,_Arg2,_Result&gt;(__x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="identity"><a href="#identity" class="headerlink" title="identity"></a>identity</h5><p>将参数返回。接受任意类型的参数并使用完美转发，避免了在异构上下文中使用函数对象或带有右值参数时不必要的复制和转换。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Identity</span> :</span> <span class="keyword">public</span> unary_function&lt;_Tp,_Tp&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> _Tp&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">identity</span> :</span> <span class="keyword">public</span> _Identity&lt;_Tp&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="select1st-selece2nd"><a href="#select1st-selece2nd" class="headerlink" title="select1st/selece2nd"></a>select1st/selece2nd</h5><p>获取键值对中的第1/2个元素（map中获取<code>Key</code>  <code>Value</code>）<code>x.first /x.second</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select1st and select2nd are extensions: they are not part of the standard.</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Pair</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Select1st</span> :</span> <span class="keyword">public</span> unary_function&lt;_Pair, <span class="keyword">typename</span> _Pair::first_type&gt; &#123;</span><br><span class="line">        <span class="function"><span class="keyword">const</span> <span class="keyword">typename</span> _Pair::first_type&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Pair&amp; __x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> __x.first;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Pair</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Select2nd</span> :</span> <span class="keyword">public</span> unary_function&lt;_Pair, <span class="keyword">typename</span> _Pair::second_type&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">typename</span> _Pair::second_type&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Pair&amp; __x)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __x.second;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Pair</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">select1st</span> :</span> <span class="keyword">public</span> _Select1st&lt;_Pair&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Pair</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">select2nd</span> :</span> <span class="keyword">public</span> _Select2nd&lt;_Pair&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="project1st-project2nd"><a href="#project1st-project2nd" class="headerlink" title="project1st/project2nd"></a>project1st/project2nd</h5><p>获取第1/2个元素，<code>project1st/2nd(x,y)  ---  x/y</code> </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Project1st</span> :</span> <span class="keyword">public</span> binary_function&lt;_Arg1, _Arg2, _Arg1&gt; &#123;</span><br><span class="line">    <span class="function">_Arg1 <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Arg1&amp; __x, <span class="keyword">const</span> _Arg2&amp;)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Project2nd</span> :</span> <span class="keyword">public</span> binary_function&lt;_Arg1, _Arg2, _Arg2&gt; &#123;</span><br><span class="line">    <span class="function">_Arg2 <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Arg1&amp;, <span class="keyword">const</span> _Arg2&amp; __y)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> __y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>&gt;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">project1st</span> :</span> <span class="keyword">public</span> _Project1st&lt;_Arg1, _Arg2&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">project2nd</span> :</span> <span class="keyword">public</span> _Project2nd&lt;_Arg1, _Arg2&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="constant0-1-2"><a href="#constant0-1-2" class="headerlink" title="constant0/1/2"></a>constant0/1/2</h5><p>0/1/2元常(<code>const</code>)仿函数（只返回一个常量，与参数具体值无关。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Constant_void_fun</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> _Result result_type;</span><br><span class="line">    result_type _M_val;</span><br><span class="line"></span><br><span class="line">    _Constant_void_fun(<span class="keyword">const</span> result_type&amp; __v) : _M_val(__v) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> result_type&amp; <span class="title">operator</span><span class="params">()</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _M_val; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">constant_void_fun</span> :</span> <span class="keyword">public</span> _Constant_void_fun&lt;_Result&gt; &#123;</span><br><span class="line">    <span class="built_in">constant_void_fun</span>(<span class="keyword">const</span> _Result&amp; __v) : _Constant_void_fun&lt;_Result&gt;(__v) &#123;&#125;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> constant_void_fun&lt;_Result&gt; <span class="title">constant0</span><span class="params">(<span class="keyword">const</span> _Result&amp; __val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> constant_void_fun&lt;_Result&gt;(__val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//unary</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>, <span class="keyword">class</span> _<span class="title">Argument</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Constant_unary_fun</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> _Argument argument_type;</span><br><span class="line">    <span class="keyword">typedef</span>  _Result  result_type;</span><br><span class="line">    result_type _M_val;</span><br><span class="line"></span><br><span class="line">    _Constant_unary_fun(<span class="keyword">const</span> result_type&amp; __v) : _M_val(__v) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> result_type&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Argument&amp;)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> _M_val; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> _<span class="title">Argument</span> __<span class="title">STL_DEPENDENT_DEFAULT_TMPL</span>(_<span class="title">Result</span>)&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">constant_unary_fun</span> :</span> <span class="keyword">public</span> _Constant_unary_fun&lt;_Result, _Argument&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">constant_unary_fun</span>(<span class="keyword">const</span> _Result&amp; __v)</span><br><span class="line">    : _Constant_unary_fun&lt;_Result, _Argument&gt;(__v) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> constant_unary_fun&lt;_Result,_Result&gt; <span class="title">constant1</span><span class="params">(<span class="keyword">const</span> _Result&amp; __val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> constant_unary_fun&lt;_Result,_Result&gt;(__val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//binary</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>, <span class="keyword">class</span> _<span class="title">Arg1</span>, <span class="keyword">class</span> _<span class="title">Arg2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Constant_binary_fun</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span>  _Arg1   first_argument_type;</span><br><span class="line">    <span class="keyword">typedef</span>  _Arg2   second_argument_type;</span><br><span class="line">    <span class="keyword">typedef</span>  _Result result_type;</span><br><span class="line">    _Result _M_val;</span><br><span class="line"></span><br><span class="line">    _Constant_binary_fun(<span class="keyword">const</span> _Result&amp; __v) : _M_val(__v) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> result_type&amp; <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Arg1&amp;, <span class="keyword">const</span> _Arg2&amp;)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _M_val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>,</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> _<span class="title">Arg1</span> __<span class="title">STL_DEPENDENT_DEFAULT_TMPL</span>(_<span class="title">Result</span>),</span></span><br><span class="line"><span class="class">          <span class="keyword">class</span> _<span class="title">Arg2</span> __<span class="title">STL_DEPENDENT_DEFAULT_TMPL</span>(_<span class="title">Arg1</span>)&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">constant_binary_fun</span></span></span><br><span class="line"><span class="class">  :</span> <span class="keyword">public</span> _Constant_binary_fun&lt;_Result, _Arg1, _Arg2&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">constant_binary_fun</span>(<span class="keyword">const</span> _Result&amp; __v)</span><br><span class="line">    : _Constant_binary_fun&lt;_Result, _Arg1, _Arg2&gt;(__v) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Result</span>&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> constant_binary_fun&lt;_Result,_Result,_Result&gt; </span></span><br><span class="line"><span class="function">    <span class="title">constant2</span><span class="params">(<span class="keyword">const</span> _Result&amp; __val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> constant_binary_fun&lt;_Result,_Result,_Result&gt;(__val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="subtractive-rng"><a href="#subtractive-rng" class="headerlink" title="subtractive_rng"></a>subtractive_rng</h5><p>目前看来，传入一个随机种子，生成一个随机数。（具体作用不详）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">subtractive_rng</span> :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _M_table[<span class="number">55</span>];</span><br><span class="line">    <span class="keyword">size_t</span> _M_index1;</span><br><span class="line">    <span class="keyword">size_t</span> _M_index2;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> __limit)</span> </span>&#123;</span><br><span class="line">        _M_index1 = (_M_index1 + <span class="number">1</span>) % <span class="number">55</span>;</span><br><span class="line">        _M_index2 = (_M_index2 + <span class="number">1</span>) % <span class="number">55</span>;</span><br><span class="line">        _M_table[_M_index1] = _M_table[_M_index1] - _M_table[_M_index2];</span><br><span class="line">        <span class="keyword">return</span> _M_table[_M_index1] % __limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _M_initialize(<span class="keyword">unsigned</span> <span class="keyword">int</span> __seed)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> __k = <span class="number">1</span>;</span><br><span class="line">        _M_table[<span class="number">54</span>] = __seed;</span><br><span class="line">        <span class="keyword">size_t</span> __i;</span><br><span class="line">        <span class="keyword">for</span> (__i = <span class="number">0</span>; __i &lt; <span class="number">54</span>; __i++) &#123;</span><br><span class="line">            <span class="keyword">size_t</span> __ii = (<span class="number">21</span> * (__i + <span class="number">1</span>) % <span class="number">55</span>) - <span class="number">1</span>;</span><br><span class="line">            _M_table[__ii] = __k;</span><br><span class="line">            __k = __seed - __k;</span><br><span class="line">            __seed = _M_table[__ii];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> __loop = <span class="number">0</span>; __loop &lt; <span class="number">4</span>; __loop++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (__i = <span class="number">0</span>; __i &lt; <span class="number">55</span>; __i++)</span><br><span class="line">                _M_table[__i] = _M_table[__i] - _M_table[(<span class="number">1</span> + __i + <span class="number">30</span>) % <span class="number">55</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        _M_index1 = <span class="number">0</span>;</span><br><span class="line">        _M_index2 = <span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">subtractive_rng</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> __seed) &#123; _M_initialize(__seed); &#125;</span><br><span class="line">    <span class="built_in">subtractive_rng</span>() &#123; _M_initialize(<span class="number">161803398u</span>); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="const-mem-fun-1-t"><a href="#const-mem-fun-1-t" class="headerlink" title="(const_)mem_fun(1)_t"></a><code>(const_)mem_fun(1)_t</code></h5><p>允许使用指针参数初始化时不调用任何参数作为一元函数对象的成员函数。</p><p>（假定容器中所有的<mark>指针</mark>所指向的类都包含相同的函数，借此可以在算法中均调用相应函数。如for_each遍历时，执行一些函数。）</p><p>对外接口形式<code> mem_fun(1)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用的是不带参数的非const函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mem_fun_t</span> :</span> <span class="keyword">public</span> unary_function&lt;_Tp*,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">mem_fun_t</span><span class="params">(_Ret (_Tp::*__pf)())</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(_Tp* __p)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (__p-&gt;*_M_f)(); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//不带参数的const函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">const_mem_fun_t</span> :</span> <span class="keyword">public</span> unary_function&lt;<span class="keyword">const</span> _Tp*,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">const_mem_fun_t</span><span class="params">(_Ret (_Tp::*__pf)() <span class="keyword">const</span>)</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp* __p)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (__p-&gt;*_M_f)(); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)() <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//带一个参数是非const函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>, <span class="keyword">class</span> _<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mem_fun1_t</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp*,_Arg,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">mem_fun1_t</span><span class="params">(_Ret (_Tp::*__pf)(_Arg))</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(_Tp* __p, _Arg __x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (__p-&gt;*_M_f)(__x); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)(_Arg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//带一个参数的const函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>, <span class="keyword">class</span> _<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">const_mem_fun1_t</span> :</span> <span class="keyword">public</span> binary_function&lt;<span class="keyword">const</span> _Tp*,_Arg,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">const_mem_fun1_t</span><span class="params">(_Ret (_Tp::*__pf)(_Arg) <span class="keyword">const</span>)</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp* __p, _Arg __x)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> (__p-&gt;*_M_f)(__x); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)(_Arg) <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试样例如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;do something&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;A*&gt; vec;</span><br><span class="line">    A* a = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">    A *b = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">    A *c = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line"></span><br><span class="line">    vec.<span class="built_in">push_back</span>(a);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(b);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(c);</span><br><span class="line">    for_each(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), <span class="built_in">mem_fun</span>(&amp;A::DoSomething));</span><br><span class="line">    <span class="keyword">delete</span> a;</span><br><span class="line">    <span class="keyword">delete</span> b;</span><br><span class="line">    <span class="keyword">delete</span> c;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="const-mem-fun-1-ref-t"><a href="#const-mem-fun-1-ref-t" class="headerlink" title="(const_)mem_fun(1)_ref_t"></a><code>(const_)mem_fun(1)_ref_t</code></h5><p>与前文中<code>(const_)mem_fun(1)_t</code>所实现的功能相同。不同之处:前面(无<code>_ref</code>)在容器中存指针，这里(<code>_ref</code>)在容器里存引用。</p><p>最终对外接口形式<code>mem_fun(1)_ref</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mem_fun_ref_t</span> :</span> <span class="keyword">public</span> unary_function&lt;_Tp,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">mem_fun_ref_t</span><span class="params">(_Ret (_Tp::*__pf)())</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(_Tp&amp; __r)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (__r.*_M_f)(); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">const_mem_fun_ref_t</span> :</span> <span class="keyword">public</span> unary_function&lt;_Tp,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">const_mem_fun_ref_t</span><span class="params">(_Ret (_Tp::*__pf)() <span class="keyword">const</span>)</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __r)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (__r.*_M_f)(); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)() <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>, <span class="keyword">class</span> _<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mem_fun1_ref_t</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Arg,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">mem_fun1_ref_t</span><span class="params">(_Ret (_Tp::*__pf)(_Arg))</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(_Tp&amp; __r, _Arg __x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (__r.*_M_f)(__x); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)(_Arg);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> _<span class="title">Ret</span>, <span class="keyword">class</span> _<span class="title">Tp</span>, <span class="keyword">class</span> _<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">const_mem_fun1_ref_t</span> :</span> <span class="keyword">public</span> binary_function&lt;_Tp,_Arg,_Ret&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">const_mem_fun1_ref_t</span><span class="params">(_Ret (_Tp::*__pf)(_Arg) <span class="keyword">const</span>)</span> : _M_f(__pf) &#123;</span>&#125;</span><br><span class="line">    <span class="function">_Ret <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __r, _Arg __x)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> (__r.*_M_f)(__x); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    _Ret (_Tp::*_M_f)(_Arg) <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是阅读&lt;code&gt;SGI STL&lt;/code&gt;源码中关于&lt;code&gt;functor&lt;/code&gt;部分的笔记&lt;/p&gt;
&lt;p&gt;同样，本文仍然是建立在已经观看过&lt;a href=&quot;https://endgame.cc/2022/06/23/STL%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/&quot;&gt;侯捷老师STL源码剖析课程&lt;/a&gt;的基础上。是在阅读源码过程中，对其中的内容进行补充、修饰。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CPP" scheme="http://example.com/tags/CPP/"/>
    
    <category term="SGI_STL" scheme="http://example.com/tags/SGI-STL/"/>
    
  </entry>
  
</feed>
