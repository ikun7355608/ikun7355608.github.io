<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实习笔面试</title>
      <link href="/2022/04/14/%E5%AE%9E%E4%B9%A0%E7%AC%94%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/04/14/%E5%AE%9E%E4%B9%A0%E7%AC%94%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>本文用于记录本人投23实习岗的一些题目。</p><span id="more"></span><h2 id="1-字节飞书后端笔试-22-4-10"><a href="#1-字节飞书后端笔试-22-4-10" class="headerlink" title="1. 字节飞书后端笔试(22/4/10)"></a>1. 字节飞书后端笔试(22/4/10)</h2><p>$2h = 4 \times 编程题$</p><h3 id="1-1-涨潮（20）"><a href="#1-1-涨潮（20）" class="headerlink" title="1.1. 涨潮（20）"></a>1.1. 涨潮（20）</h3><p>一个矩阵0/1表示陆地/海洋。涨潮时，上下左右四方向和两个海洋相邻的陆地变为海洋。矩阵外默认全是陆地。求涨潮后的矩阵。</p><h3 id="1-2-跳格子（20）"><a href="#1-2-跳格子（20）" class="headerlink" title="1.2. 跳格子（20）"></a>1.2. 跳格子（20）</h3><p><a href="https://leetcode-cn.com/problems/jump-game/">力扣第55题跳跃游戏</a></p><h3 id="1-3-装网球（30）"><a href="#1-3-装网球（30）" class="headerlink" title="1.3. 装网球（30）"></a>1.3. 装网球（30）</h3><p>K个网球，标号为$1\to K$，N个球筒。从1开始依次将网球装入。给定N行输入表示网球在相应桶中的顺序，问顺序是否合法。</p><h3 id="1-4-凑卡组（30）"><a href="#1-4-凑卡组（30）" class="headerlink" title="1.4. 凑卡组（30）"></a>1.4. 凑卡组（30）</h3><p>m个卡组，每组3张牌。牌号$0\to 9$，至少要多少组牌，使得凑齐$\left[0,9\right]$。</p><h2 id="2-百度后端笔试-22-4-12"><a href="#2-百度后端笔试-22-4-12" class="headerlink" title="2. 百度后端笔试(22/4/12)"></a>2. 百度后端笔试(22/4/12)</h2><p>$2h = 3 \times 编程题 + 20\times选择$</p><h3 id="2-1-选择（3-20）"><a href="#2-1-选择（3-20）" class="headerlink" title="2.1. 选择（3*20）"></a>2.1. 选择（3*20）</h3><h4 id="2-1-1-算法"><a href="#2-1-1-算法" class="headerlink" title="2.1.1. 算法"></a>2.1.1. 算法</h4><ul><li>KMP给定两个串,需要多少次匹配</li><li>哈弗曼编码是否合法</li><li>中后序遍历构造二叉树</li><li>二分查找(哪个不是经历两次后的)</li></ul><h4 id="2-1-2-基础"><a href="#2-1-2-基础" class="headerlink" title="2.1.2. 基础"></a>2.1.2. 基础</h4><ul><li>重写</li><li>shell中{0..100..6}含义（$\left [0, 100\right]$中6的倍数）</li><li>std::funcional代替函数指针（写程序运行结果）</li><li><mark>函数</mark>传入三个变量a,b,c。指针初始指向b，<code>cout &lt;&lt; *(ptr-1)</code>的运行结果。</li><li>二维数组给定某个元素地址，问一个元素地址。</li></ul><h3 id="2-2-编程"><a href="#2-2-编程" class="headerlink" title="2.2. 编程"></a>2.2. 编程</h3><h4 id="2-2-1-坐标（10）"><a href="#2-2-1-坐标（10）" class="headerlink" title="2.2.1. 坐标（10）"></a>2.2.1. 坐标（10）</h4><p>初始在坐标轴原点 输入一个只包含UDLR（分别表示上、下、左、右移动）的字符串。问最终位置。</p><h4 id="2-2-2-迷宫（15）"><a href="#2-2-2-迷宫（15）" class="headerlink" title="2.2.2. 迷宫（15）"></a>2.2.2. 迷宫（15）</h4><p>输入一个包含”FS#.”（初始位置、最终位置、墙、路)的二维数组。其中有k个墙是特殊的，需要碰到（四方向相邻）后才能离开。问最少走多少步可以从F到达S。</p><h4 id="2-2-3-对应位置差值和最大（15）"><a href="#2-2-3-对应位置差值和最大（15）" class="headerlink" title="2.2.3. 对应位置差值和最大（15）"></a>2.2.3. 对应位置差值和最大（15）</h4><p>给定两个数组a和b，每次能够交换a中相邻两个元素$swap\left( a_i, a_{i+1}\right)$至少交换多少次使得 $\sum_{i = 0}^{size -1}\left | a_i-b_i \right |$最大。</p><h2 id="3-阿里CTO线后端笔试-22-4-15"><a href="#3-阿里CTO线后端笔试-22-4-15" class="headerlink" title="3. 阿里CTO线后端笔试(22/4/15)"></a>3. 阿里CTO线后端笔试(22/4/15)</h2><p>$1.5h = 6 \times 单选 + 6 \times 不定项 + 3\times 编程题$</p><h3 id="3-1-单选（6-1）"><a href="#3-1-单选（6-1）" class="headerlink" title="3.1. 单选（6*1）"></a>3.1. 单选（6*1）</h3><ul><li>shell多行输出</li><li>数据库 输出<strong>在Table1且不在Table2的元素</strong>。</li><li>给定一组数，存入哈希表。问碰撞次数</li><li>给定数组，插入排序6次结果</li></ul><h3 id="3-2-不定项（6-2，不全给2-3分）"><a href="#3-2-不定项（6-2，不全给2-3分）" class="headerlink" title="3.2. 不定项（6*2，不全给2/3分）"></a>3.2. 不定项（6*2，不全给2/3分）</h3><ul><li>ip子网划分</li><li>二叉树（先序、中序、兄弟节点）</li><li>三次握手目的</li></ul><ul><li>共n个元素（偶数个）入栈，第一次弹 $\frac{n}{2}$，第二次弹$n - 1$。第三次可能弹？</li></ul><h3 id="3-3-编程题"><a href="#3-3-编程题" class="headerlink" title="3.3. 编程题"></a>3.3. 编程题</h3><p>允许使用本地编译器。（故，有代码）</p><h4 id="3-3-1-手机键盘输入（24）"><a href="#3-3-1-手机键盘输入（24）" class="headerlink" title="3.3.1. 手机键盘输入（24）"></a>3.3.1. 手机键盘输入（24）</h4><p>手机九键，输入一个按键字符串。<mark>按到1</mark>或者<mark>其他按键</mark>输出本格的内容。（故，最后一个元素不是1不输出）</p><p>1.0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;string&gt; temp = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;ABC&quot;</span>, <span class="string">&quot;DEF&quot;</span>, <span class="string">&quot;GHI&quot;</span>, <span class="string">&quot;JKL&quot;</span>, <span class="string">&quot;MNO&quot;</span>, <span class="string">&quot;PQRS&quot;</span>, <span class="string">&quot;TUV&quot;</span>, <span class="string">&quot;WXYZ&quot;</span>&#125;;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    string str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="comment">// 按键与数组 差一</span></span><br><span class="line">        <span class="keyword">int</span> index = (str[i] - <span class="string">&#x27;0&#x27;</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!index)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; str.<span class="built_in">size</span>() &amp;&amp; str[i] == str[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            ++num;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = temp[index].<span class="built_in">size</span>();</span><br><span class="line">        res += temp[index][num % x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(str[str.<span class="built_in">size</span>() - <span class="number">1</span>] != <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        res.<span class="built_in">pop_back</span>();</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-四子棋（28）"><a href="#3-3-2-四子棋（28）" class="headerlink" title="3.3.2. 四子棋（28）"></a>3.3.2. 四子棋（28）</h4><p>输入m行n列字符串。包括<code>r p .</code>（A的、B的、空）。横、竖、斜连成4个，该玩家胜利。问谁赢（A胜、B胜、继续玩）。</p><p>暴力8/9</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;string&gt; str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        string temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        str.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m;++j) &#123;</span><br><span class="line">            <span class="comment">// 同行</span></span><br><span class="line">            <span class="keyword">if</span>(j + <span class="number">3</span> &lt; m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i][j] == str[i][j + <span class="number">1</span>] &amp;&amp; str[i][j + <span class="number">1</span>] == str[i][j + <span class="number">2</span>] &amp;&amp; str[i][j + <span class="number">2</span>] == str[i][j + <span class="number">3</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str[i][j] == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;kou&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;yukari&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 同列</span></span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">3</span> &lt; n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i][j] == str[i + <span class="number">1</span>][j] &amp;&amp; str[i + <span class="number">1</span>][j] == str[i + <span class="number">2</span>][j] &amp;&amp; str[i + <span class="number">2</span>][j] == str[i + <span class="number">3</span>][j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str[i][j] == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;kou&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;yukari&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对角线</span></span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">3</span> &lt; n &amp;&amp; j + <span class="number">3</span> &lt; m)&#123;</span><br><span class="line">                <span class="keyword">if</span> (str[i][j] == str[i + <span class="number">1</span>][j + <span class="number">1</span>] &amp;&amp; str[i + <span class="number">1</span>][j + <span class="number">1</span>] == str[i + <span class="number">2</span>][j + <span class="number">2</span>] &amp;&amp; str[i + <span class="number">2</span>][j + <span class="number">2</span>] == str[i + <span class="number">3</span>][j + <span class="number">3</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (str[i][j] == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;kou&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot;yukari&quot;</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;to be continued&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-3-二叉树最小权值差（30）"><a href="#3-3-3-二叉树最小权值差（30）" class="headerlink" title="3.3.3. 二叉树最小权值差（30）"></a>3.3.3. 二叉树最小权值差（30）</h4><p>给出含有n个节点，（n-1）个指向（数对）的二叉树的权值。每个节点的权值为其子树权值和。<br>求不是父子节点的最小权值差。<br>输入</p><ol><li>n（节点数）</li><li>$value_i\quad$(n个节点权值)</li><li>(n - 1)个数对（前者是后者的父节点）</li></ol><p>9/10</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 0.9</span></span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// n个节点</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">arr</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">father</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// n-1条边</span></span><br><span class="line">    vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">temp</span>(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; temp[i].first;</span><br><span class="line">        cin &gt;&gt; temp[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="comment">// 加权得出相应的值</span></span><br><span class="line">        arr[temp[i].first - <span class="number">1</span>] += arr[temp[i].second - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 父节点</span></span><br><span class="line">        father[temp[i].second - <span class="number">1</span>] = temp[i].first - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (father[j] != i)</span><br><span class="line">            &#123;</span><br><span class="line">                res = <span class="built_in">min</span>(res, <span class="built_in">abs</span>(arr[j] - arr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-360服务端端笔试（22-4-16）"><a href="#4-360服务端端笔试（22-4-16）" class="headerlink" title="4. 360服务端端笔试（22/4/16）"></a>4. 360服务端端笔试（22/4/16）</h2><p>$2h = 40\times选择 +2\times 编程$</p><h3 id="4-1-选择（40-1-5）"><a href="#4-1-选择（40-1-5）" class="headerlink" title="4.1. 选择（40* 1.5）"></a>4.1. 选择（40* 1.5）</h3><p>很杂，计网、数据库、操作系统、cpp（语法、运行结果）、java等啥都有。。。</p><ul><li>String 赋值、new  值相等 or 完全相同？</li><li>判断代码长度（char数组尾部插0，问角标）</li><li>给定递归表达式，问某一个要执行多少次</li><li>100条边将平面划分多少个区域</li><li>S锁的权限</li><li>linux文件夹复制</li><li>int * const || const int* || int const *</li><li>只有头节点的树（度？深度？前or中序相同？ 中or后续相同？）</li><li>cpp new的元素 初始值是 ？</li><li>cpp友元函数能否改对象的值？</li><li>堵车问题+交警 打破死锁的什么条件</li><li>html/web 传输层协议</li><li>数据库 游标</li><li>linux 下Apache服务器用的虚拟机地址，调用协议？？？（邮件收发、DNS、talnet）</li><li>凑硬币（1、2、5、10、20、50、100纸币各xx张，凑687元）</li><li>UML 椭圆柱表示？</li></ul><h3 id="4-2-编程"><a href="#4-2-编程" class="headerlink" title="4.2. 编程"></a>4.2. 编程</h3><h4 id="4-2-1-最大流（20）"><a href="#4-2-1-最大流（20）" class="headerlink" title="4.2.1. 最大流（20）"></a>4.2.1. 最大流（20）</h4><p>一个长度为n的数组，表示n个相邻格子的高低。从波峰浇水可以流到比他低的格子里。问一次浇水最多流几个格子。<br>（样例 5 1 2 1 5.从2浇水流中间3个）。<br>暴力 0.85<br>三次遍历</p><ol><li>第一次从左到右算左侧流几个。（left[i] = (left[i] &gt; left[i- 1] ? left[i - 1] + 1: 0); ）</li><li>第二次从右到左算右侧流几个。（right[i] = (right[i] &gt; right[i + 1] ? right[i + 1 ] + 1: 0);） </li><li>求最值（res = max(res,left[i] + right[i] + [1])<mark>左、右、本身</mark>。</li></ol><h4 id="4-2-2-最大体积差（20）"><a href="#4-2-2-最大体积差（20）" class="headerlink" title="4.2.2. 最大体积差（20）"></a>4.2.2. 最大体积差（20）</h4><p>给定一个长方体的体积V。边长假定为a、b、c，求(a+2)(b+2)(c+1) - V的最大值。</p><h2 id="5-京东后端笔试（22-4-16）"><a href="#5-京东后端笔试（22-4-16）" class="headerlink" title="5. 京东后端笔试（22/4/16）"></a>5. 京东后端笔试（22/4/16）</h2><p>$2h = 30 \times 选择 + 2\times 编程题$</p><h3 id="5-1-选择（30-2）"><a href="#5-1-选择（30-2）" class="headerlink" title="5.1. 选择（30*2）"></a>5.1. 选择（30*2）</h3><ul><li>结构体中一个变量为<code>char data[0]</code> 运行时？</li><li>图的邻接矩阵 BFS</li><li>linux文件权限<code>rw-r--r--</code>数字表示</li><li>delete 和delete[]区别</li><li>函数重载定义（给出定义了问这叫什么）</li><li>类成员变量通常以什么开头</li><li>const char *</li><li>ip类型区分（哪个和其他不一样）<ul><li>101.16.1.1</li><li>10.16.1.1</li><li>172.16.1.1</li><li>192.168.1.1</li></ul></li><li>linux path加路径 语句</li><li>结构体 union</li><li>shell获取某变量长度 怎么写</li><li>深拷贝or浅拷贝定义</li><li>域解析符是？</li><li>linux shell中 ctrl + c 用语句表示</li><li>堆栈、文件系统and so on 用到串的有？</li><li>以下哪个变量名在cpp合法</li><li>判断两个字符串是否相等，函数名</li></ul><h3 id="5-2-编程题"><a href="#5-2-编程题" class="headerlink" title="5.2. 编程题"></a>5.2. 编程题</h3><h4 id="5-2-1-语言是否合法（20）"><a href="#5-2-1-语言是否合法（20）" class="headerlink" title="5.2.1. 语言是否合法（20）"></a>5.2.1. 语言是否合法（20）</h4><p>某种语言，语句xxx 后要end xxx。给定一些输入 问是否合法 （Yes/No）<br>e.g.</p><ul><li>if</li><li>end if</li><li>while</li><li>if</li><li>end if</li><li>end while</li></ul><p>（一次输入可能进行多次测试）<br>0.45</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">my_substr</span><span class="params">(string&amp; str,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        res += str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="comment">// num次判断</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">loop:    <span class="keyword">while</span>(num--) &#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        vector&lt;string&gt; str;</span><br><span class="line">        <span class="keyword">if</span> (m % <span class="number">2</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            string temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            cin &gt;&gt; temp;</span><br><span class="line">            <span class="keyword">while</span>(temp == <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">                temp = <span class="string">&quot;end &quot;</span>;</span><br><span class="line">                string buffer;</span><br><span class="line">                cin &gt;&gt; buffer;</span><br><span class="line">                temp += buffer;</span><br><span class="line">            &#125;</span><br><span class="line">            str.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        stack&lt;string&gt; stk;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; ch : str) &#123;</span><br><span class="line">            <span class="comment">// 不能提子串 一定是开始</span></span><br><span class="line">            <span class="keyword">if</span>(ch.<span class="built_in">size</span>() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                string temp = <span class="string">&quot;end &quot;</span> + ch;</span><br><span class="line">                stk.<span class="built_in">push</span>(temp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    string buffer = <span class="built_in">my_substr</span>(ch, <span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">if</span>(buffer == <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(stk.<span class="built_in">empty</span>() || stk.<span class="built_in">top</span>()!=ch) &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">                        <span class="keyword">goto</span> loop;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(stk.<span class="built_in">top</span>() == ch) &#123;</span><br><span class="line">                        stk.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    string temp = <span class="string">&quot;end &quot;</span> + ch;</span><br><span class="line">                    stk.<span class="built_in">push</span>(temp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i !=res.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; res[i] &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; res[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-中位数"><a href="#5-2-2-中位数" class="headerlink" title="5.2.2. 中位数"></a>5.2.2. 中位数</h4><p>给定一个数组，在数组中提取子串。要求</p><ol><li>相邻两个元素至少选一个</li><li>中位数最大</li></ol><blockquote><p>卡样例（0.18）：当该数组升序时。中位数的角标越大，值越大。小于n/2的部分取越少越好，大于n/2的部分取越多越好。故小于n/2部分隔一个一取，大于n/2部分全取(共3/4n个元素)中位数在这个数组的中间位置。即，5/8n = 1/4n（前半部分未取的）+3/8n（子串中点）</p></blockquote><h2 id="6-华为云计算软件开发笔试-22-4-20"><a href="#6-华为云计算软件开发笔试-22-4-20" class="headerlink" title="6. 华为云计算软件开发笔试(22/4/20)"></a>6. 华为云计算软件开发笔试(22/4/20)</h2><p>$2h = 编程题 \times 3$</p><h3 id="6-1-得分情况（100）"><a href="#6-1-得分情况（100）" class="headerlink" title="6.1. 得分情况（100）"></a>6.1. 得分情况（100）</h3><p>一张100分试卷，判断$10\times 2$ +单选 $10\times 4$ + 多选 $5\times 8$。从前往后做，错三个离场。<br>给定一个分值，问有多少种情况</p><h3 id="6-2-二叉树插入（200）"><a href="#6-2-二叉树插入（200）" class="headerlink" title="6.2. 二叉树插入（200）"></a>6.2. 二叉树插入（200）</h3><p>第一行以$\left[1,2,3,4,5\right]$形式给出值，构造一颗二叉树。（原树）<br>第二行以<code>\1\2\5</code>给出从根节点递归找二叉树的节点“5”。（指定节点）<br>第三行同样以第一行的形式给出另外一根二叉树。（插入树）<br>将插入树插在原树的指定节点。<br>（结束后写的 能过多少样例不清楚）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 数据结构定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> val) : <span class="built_in">val</span>(val), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> val, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(val), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 建树</span></span><br><span class="line"><span class="function">TreeNode *<span class="title">CreateTree</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= nums.<span class="built_in">size</span>() || nums[index] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *node = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(nums[index]);</span><br><span class="line">    node-&gt;left = <span class="built_in">CreateTree</span>(nums, <span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">    node-&gt;right = <span class="built_in">CreateTree</span>(nums, <span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteTree</span><span class="params">(TreeNode * root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root-&gt;right);</span><br><span class="line">    <span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 层序遍历</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">printTree</span><span class="params">(TreeNode * root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    queue&lt;TreeNode *&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        TreeNode *node = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        temp.<span class="built_in">push_back</span>(node-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(node-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;right) &#123;</span><br><span class="line">            que.<span class="built_in">push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找节点</span></span><br><span class="line"><span class="function">TreeNode * <span class="title">findTree</span><span class="params">(TreeNode * root, vector&lt;<span class="keyword">int</span>&gt; target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 题目说 一定能找到 且唯一</span></span><br><span class="line">    <span class="comment">// 直接把新的树 替换其父节点的子节点  故返回父节点</span></span><br><span class="line">    <span class="keyword">while</span>(index &lt;target.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left-&gt;val == target[index]) &#123;</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        ++index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    string str;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    <span class="comment">// 题目给出节点的值为个位数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ch:str) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            vec.<span class="built_in">push_back</span>(ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *root = <span class="built_in">CreateTree</span>(vec, <span class="number">0</span>);</span><br><span class="line">    str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ch:str) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            tmp.<span class="built_in">push_back</span>(ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *in = <span class="built_in">findTree</span>(root, tmp);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">getline</span>(cin, str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ch:str) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode *node = <span class="built_in">CreateTree</span>(res, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    <span class="keyword">if</span>(in-&gt;left-&gt;val == tmp.<span class="built_in">back</span>()) &#123;</span><br><span class="line">        in-&gt;left = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        in-&gt;right = node;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="built_in">clear</span>();</span><br><span class="line">    res = <span class="built_in">printTree</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        cout &lt;&lt; res[i];</span><br><span class="line">        <span class="keyword">if</span>(i != res.<span class="built_in">size</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    <span class="built_in">DeleteTree</span>(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-权值路径数（300）"><a href="#6-3-权值路径数（300）" class="headerlink" title="6.3. 权值路径数（300）"></a>6.3. 权值路径数（300）</h3><p>给出一个二叉树及 经过每个节点消耗的能量，从一个节点到父、子节点需要消耗差值的能量。从任一节点开始到任一节点结束，能量恰好耗完。（原题描述挺复杂，简而言之就是这样子。）（比如从值为1的节点走向其值为5的父节点 共消耗$1 + 5 + |5 -1| = 10$）<br>第一行给出节点数<br>第二行给出每个节点的权<br>第三行给出每个节点所耗能量<br>第四行给出能量数。<br>问有多少种走法。</p><h2 id="7-美团后端笔试-22-4-23"><a href="#7-美团后端笔试-22-4-23" class="headerlink" title="7. 美团后端笔试(22/4/23)"></a>7. 美团后端笔试(22/4/23)</h2><p>$2h = 5\times 编程题$</p><h3 id="7-1-考试座位（20）"><a href="#7-1-考试座位（20）" class="headerlink" title="7.1. 考试座位（20）"></a>7.1. 考试座位（20）</h3><p>第一行给出n个参加考试的人。<br>第二行给出这n个人分别使用的语言<code>C or J</code><br>每次交换相邻两个元素<br>问，最少多少次交换，保证无作弊（相邻两个人使用同一语言会作弊）。 不能避免 <code>返回 -1</code>。<br>0.64</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    string str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="keyword">int</span> Cnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Jnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;ch : str) &#123;</span><br><span class="line">        ch == <span class="string">&#x27;C&#x27;</span> ? Cnum++ : Jnum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(Cnum - Jnum) &gt; <span class="number">1</span>) </span><br><span class="line">        res = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> length = str.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(str[index]==str[<span class="number">0</span>]) &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += (index - <span class="number">1</span>);</span><br><span class="line">            str.<span class="built_in">erase</span>(str.<span class="built_in">begin</span>() + index);</span><br><span class="line">            str.<span class="built_in">erase</span>(str.<span class="built_in">begin</span>());</span><br><span class="line">            length -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-买卖股票的最佳时机（20）"><a href="#7-2-买卖股票的最佳时机（20）" class="headerlink" title="7.2. 买卖股票的最佳时机（20）"></a>7.2. 买卖股票的最佳时机（20）</h3><p>初始1000块，第一行给出n天，第二行给出n天股票的价格。持仓超一百万不能再买。<br>问，最后会有多少钱。</p><h3 id="7-3-带颜色的数字排序（20）"><a href="#7-3-带颜色的数字排序（20）" class="headerlink" title="7.3. 带颜色的数字排序（20）"></a>7.3. 带颜色的数字排序（20）</h3><p>给出一组数字及每个数字的颜色，每次可以交换相邻两个元素（不同色），问最终能否排好序</p><h3 id="7-4-画板染色（20）"><a href="#7-4-画板染色（20）" class="headerlink" title="7.4. 画板染色（20）"></a>7.4. 画板染色（20）</h3><p>给定$m\times n$大小的画板，每次染色$2\times 2$大小的方块。同一个方格的后一次染色会覆盖前一次染色。问最终能否出现给出的画板颜色状况。</p><h3 id="7-5-时间片轮转法（20）"><a href="#7-5-时间片轮转法（20）" class="headerlink" title="7.5. 时间片轮转法（20）"></a>7.5. 时间片轮转法（20）</h3><p>给出每个时间片大小 及输入行数<br>每一行有如下几个语句： <code>ADD x num</code>添加需要num时长且编号为x的进程、<code>类似于wait x</code>（原题中不是wait x）等待x秒,<code>select</code> （原题中也不是这个）查询现在在运行的进程（空闲即-1）。</p><h2 id="8-网易雷火游戏研发-22-4-23"><a href="#8-网易雷火游戏研发-22-4-23" class="headerlink" title="8. 网易雷火游戏研发(22/4/23)"></a>8. 网易雷火游戏研发(22/4/23)</h2><p>$3h = 4\times 编程题$</p><h3 id="8-1-六宫格（10）"><a href="#8-1-六宫格（10）" class="headerlink" title="8.1. 六宫格（10）"></a>8.1. 六宫格（10）</h3><p>类似于数独，每次验证输入一个$6\times6$大小的矩阵，保证每行、列、$2\times3$大小的矩阵（只有六个）。验证是否符合规则。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">JudgeRow</span><span class="params">(vector&lt;string&gt; &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>;++j) &#123;</span><br><span class="line">            sum += str[i][j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">21</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">JudgeCol</span><span class="params">(vector&lt;string&gt; &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>;++j) &#123;</span><br><span class="line">            sum += str[j][i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">21</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">JudgeMatrix</span><span class="params">(vector&lt;string&gt; &amp;str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>;++i ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            sum += str[<span class="number">2</span> * i][<span class="number">3</span> * j] - <span class="string">&#x27;0&#x27;</span> + str[<span class="number">2</span> * i][<span class="number">3</span> * j + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> + str[<span class="number">2</span> * i][<span class="number">3</span> * j + <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            sum += str[<span class="number">2</span> * i + <span class="number">1</span>][<span class="number">3</span> * j] - <span class="string">&#x27;0&#x27;</span> + str[<span class="number">2</span> * i + <span class="number">1</span>][<span class="number">3</span> * j + <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> + str[<span class="number">2</span> * i + <span class="number">1</span>][<span class="number">3</span> * j + <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(sum == <span class="number">21</span>) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Judge</span><span class="params">(vector&lt;string&gt; &amp;str)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断行</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">JudgeRow</span>(str) == <span class="number">6</span> &amp;&amp; <span class="built_in">JudgeCol</span>(str) == <span class="number">6</span> &amp;&amp; <span class="built_in">JudgeMatrix</span>(str) == <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string temp;</span><br><span class="line">    <span class="built_in">getline</span>(cin, temp);</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">str</span>(n, vector&lt;string&gt;(<span class="number">6</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; ++j) &#123;</span><br><span class="line">            temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="built_in">getline</span>(cin, temp);</span><br><span class="line">            str[i][j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Judge</span>(str[i])) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-虚弱状态（25）"><a href="#8-2-虚弱状态（25）" class="headerlink" title="8.2. 虚弱状态（25）"></a>8.2. 虚弱状态（25）</h3><p>给定一个血量，虚弱状态的临界值（上、下临界）。以及n个技能的伤害。问至少几次攻击让小怪进入虚弱状态</p><h3 id="8-3-rpc（25）"><a href="#8-3-rpc（25）" class="headerlink" title="8.3. rpc（25）"></a>8.3. rpc（25）</h3><p>n行输入n个rpc函数。（以 <code>编号 函数名 参数类型</code>给出两两之间有空格） 参数类型包括<code>i</code>(int)和<code>s</code>(string)<br>最后一行给定16进制字符串，还原出调用函数的过程。<br>一个不太恰当的例子。</p><ul><li>比如<code>0 ADD ii</code><br>读取时，前两位对应标号，接下来每8位对应一个16进制表示的int(补码表示)。（s的读取没读懂）<h3 id="8-4-模拟助手（40）"><a href="#8-4-模拟助手（40）" class="headerlink" title="8.4. 模拟助手（40）"></a>8.4. 模拟助手（40）</h3>给出m个问助手的查询语句，n个规则库。<br>问这m个语句分别匹配什么规则。（and优先级高于or）、（有歧义时，保留最长的）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B树</title>
      <link href="/2022/03/06/B%E6%A0%91/"/>
      <url>/2022/03/06/B%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>AVL 树 和红黑树，都假设所有的数据放在主存当中。而当数据量达到亿级，主存当中根本存储不下，我们只能以块的形式从磁盘读取数据，与主存的访问时间相比，磁盘的 I/O 操作相当耗时，而提出 B-树的主要目的就是减少磁盘的 I/O 操作。</p><span id="more"></span><p> B树的一个节点$x$如果包含$n$个$key$，则其有$n+1$个孩子。（$n$个key将其余数据划分为$n+1$个区间，每个孩子介于相应的区间中）</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>B树所具有的的性质人如下:</p><ol><li>每个节点$x$应具有如下属性：<ol><li>$x.n$即，存储在$x$节点的$key$个数</li><li>节点$x$的n个key以<strong style="color:red;">非降序</strong>排列。$x.key_1 \le x.key_2 \le \cdots \le x.key_{x.n}$</li><li>$ x.leaf$，布尔值。用来表示x是(true)否(false)为叶子节点</li></ol></li><li>每个<strong style="color:red;">非叶子节点</strong>还包括$x.n + 1$个指向其孩子的指针:$x.c_1,x.c_2,x.c_3\cdots,x.c_{x.n +1}$。<mark>叶子节点没有该定义</mark>。</li><li>$x.key_i$对其子节点进行分割。假设$k_i$为其子节点的$key$值。则有 </li></ol><p>$$<br>k_1 \le x.key_1 \le k_2 \le x.key_2 \le \cdots \le x.key_{x.n} \le k_{x.n +1}<br>$$<br>4. 所有的<strong style="color:red;">叶子节点深度相同</strong><br>5. B树的<strong>最小度数</strong>$t \ge 2$以限制每个节点所包含$key$值的个数(上下限)。<br>    1. 除根节点外，每个节点必须<strong>至少</strong>有$t-1$个$key$。（除叶子节点外，每个节点至少有$t$个孩子）<br>    2. 每个节点至多有$2t-1$个key。（除叶子节点外，每个节点至多有$2t$个孩子）当B树恰好拥有$2t-1$个$key$时，称该节点为满的。（结合性质5.1即B树要求半满）</p><p>一个B树的样例如下：<br><img src="/2022/03/06/B%E6%A0%91/BTreeExp.png" alt="B树样例"><br>一个较为简单的B树定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTreeNode</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    <span class="keyword">int</span> *keys; <span class="comment">// 存储key值</span></span><br><span class="line">    <span class="keyword">int</span> t;  <span class="comment">// 最小度 </span></span><br><span class="line">    BTreeNode **C; <span class="comment">// 子节点</span></span><br><span class="line">    <span class="keyword">int</span> n;  <span class="comment">// key的个数</span></span><br><span class="line">    <span class="keyword">bool</span> leaf; <span class="comment">// 是否为叶子节点</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><p><strong>B树的高度</strong><br>B树大部分操作的磁盘存取次数与B树的高度成正比。对于任意一个包含$n$个$key$,高度为$h$,最小度为$t$的B树，有</p><p>$$<br>    h \le \log_{t}{\frac{n+1}{2} }<br>$$</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>在此假定：B树始终在主存中，无需读取磁盘。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>B树的搜索，不过是在二叉搜索树的基础上，每个节点有多个$key$值。<br>以上述的样例图中查找33为例。</p><ol><li>首先，访问根节点。先和第一个$key$值20比较，发现 $37&gt;20$。然后与第二个$key$值40比较，此时$37&lt;40$。于是递归到20与40之间的子节点去查找。<br><img src="/2022/03/06/B%E6%A0%91/BTreeSearch1.png" alt="B树搜索样例1_1"></li><li>接着，访问$\left[24,35\right]$节点。先和第一个$key$ 24比较，发现$37&gt;24$。然后与第二个$key$ 35比较,发现$37 &gt; 35$。访问该节点的最后一个子节点。<br><img src="/2022/03/06/B%E6%A0%91/BTreeSearch2.png" alt="B树搜索样例1_2"></li><li>最后在叶子节点$\left[ 37,39\right]$中，查找到37,结束。<br><img src="/2022/03/06/B%E6%A0%91/BTreeSearch3.png" alt="B树查找样例1_3"><br>相关过程代码如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BTreeNode *<span class="title">BTreeNode::search</span><span class="params">(<span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"> <span class="comment">// 找到第一个大于待查找k 的key值</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n &amp;&amp; k &gt; keys[i]) &#123;</span><br><span class="line">    i++; </span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">// 相等即找到 </span></span><br><span class="line"> <span class="keyword">if</span> (keys[i] == k) </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 如果没有找到，且当前结点为叶子结点则无解</span></span><br><span class="line"> <span class="keyword">if</span> (leaf == <span class="literal">true</span>) </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nullptr</span>; </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 递归访问恰当的子代</span></span><br><span class="line"> <span class="keyword">return</span> C[i]-&gt;<span class="built_in">search</span>(k); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>插入、删除。过于复杂，先略了，有空再写。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构&amp;算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/01/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/01/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>虽然，Carl的<a href="https://programmercarl.com/">《代码随想录》</a>和labuladong的<a href="https://labuladong.gitee.io/algo/">《算法小抄》</a>对“动态规划”类问题有着详尽且优质的解答，但仍然想在这里简单啰嗦一下<strong>动态规划</strong>。在这里，并不想以《算法导论》中较为晦涩且难懂的<code>「矩阵连乘」</code>、<code>「最优二叉搜索树」</code>等为样例进行讲解。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>动态规划，英文名：Dynamic Programming，简称DP。其算法的基本思想是：将待求解的问题<strong>分解成若干个子问题</strong>，先求解子问题，再<strong>由子问题的解得到原问题的解</strong>。换句话说，将一个复杂的问题，分解为多个相互联系的较为简单的子问题，对每个子问题进行求解，复杂问题的答案蕴含在子问题中（<strong>具备「最优子结构」</strong>）。</p><span id="more"></span><p>通常，可以用动态规划求解的问题也可以用<strong style="color:red;">穷举</strong>来解决问题。但在穷举的过程中会<strong>存在「重叠子问题」</strong>。即，在暴力穷举求解时，一些中间值会进行多次的重复计算，严重影响效率。以斐波那契数列为例:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">2</span>) ? n: <span class="built_in">Fib</span>(n - <span class="number">1</span>) + <span class="built_in">Fib</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归树如下:</p><p><img src="/2022/01/13/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/DPFib.png" alt="斐波那契数列"></p><center>随着递归的进行，$Fib(n)\quad n \in \left[ 2,18\right]$均计算了多次</center><p>我们知道，这些进行<strong style="color:red;">重复计算的值</strong>如果<strong style="color:red;">只计算一次</strong>的话，求解问题的<strong style="color:red;">效率</strong>会有一定的<strong style="color:red;">提高</strong>。</p><p>为解决该问题，引入了「备忘录方法」。即，其在<strong style="color:red;">自顶向下</strong>递归过程中<strong style="color:#e67c86;">用一个表来保存已解决问题的答案</strong>，在求解时先查表，表中有的直接用，没有的再递归。上述斐波那契数列在每次递归求解$Fib(n-1)+Fib(n-2)$时，$Fib(n-2)$的值在求解$Fib(n-1)$时已经求过，直接从表中引用。</p><p>我们发现，在利用「备忘录方法」进行求解时，我们是每求解一个问题记录一次，当<strong>并非所有子问题都需要求解时</strong>，「备忘录方法」可以严格的只求解需要的问题，而当所有子问题都需要求解一次或多次时，考虑使用动态规划。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt;= <span class="number">1</span>) <span class="keyword">return</span> N;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h1><p>动态规划三个基本要素分别为：最优子结构、重叠子问题、状态转移方程。</p><ol><li>最优子结构：当<strong>问题的最优解包含了其子问题的最优解</strong>时，称该问题具有最优子结构性质。分析最优子结构性质时，一般假设由问题的最优解导出的子问题不是最优的，然后再设法说明在这个假设下可以构造出一个比原问题更优解更好的解，从而导出矛盾。</li><li>重叠子问题：在用递归算法自顶向下解此问题时，每次产生的子问题并不总是新问题，<strong>有些子问题被反复计算多次</strong>。动态规划算法对每个问题只解一次，而后将其解保存在一个表格中，当再次需要解此问题时，用常数时间查看一下结果。因此，用动态规划算法通常只需要多项式时间。</li><li>状态转移方程：动态规划中，一个状态向另一个状态转变时的规则。实际的算法问题中，列出状态转移方程往往较为困难。在列相应的状态转移方程时，我们需要注意：确定状态数组<code>dp</code>中角标的含义、初始化时已确定的状态及递归公式。</li></ol><h1 id="求解步骤"><a href="#求解步骤" class="headerlink" title="求解步骤"></a>求解步骤</h1><ol><li>找出最优解的性质，并刻划最优解的结构特征。</li><li> 递归地定义最优值。</li><li> 以自底向上的方式计算出最优值。</li><li> 根据计算最优值时得到的信息，构造最优解。</li></ol><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>首先，<strong style="color:red;">动态规划和分治法</strong>都是分解成子问题，由子问题的解得到原问题的解。但需要将二者进行区分：动态规划中除了有诸多的重叠子问题外，各子问题之间还存在着一定的关联(通过状态转移方程递推其他状态)。而分治法中，各子问题相对独立。</p><p>再者，<strong style="color:red;">贪心算法和动态规划</strong>也同样的都需要分解子问题来求解。二者所不同的是：<strong style="color:#9b2ebd;">动态规划</strong>在求解问题时需要<strong style="color:#9b2ebd;">遍历所有的可能</strong>情况。而<strong style="color:rgb(0, 191, 166);">贪心算法</strong>在每个子问题求解时<strong style="color:rgb(0, 191, 166);">只考虑局部最优解</strong>的情况。语言介绍较为苍白无力，接下来用<strong style="color:#e67c86;">「拼凑面额问题」</strong>来对比二者的区别。在此，我们将会引入一些面额的纸币以方便举例。</p><h2 id="能否凑出面额"><a href="#能否凑出面额" class="headerlink" title="能否凑出面额"></a>能否凑出面额</h2><p>假设，我们去商店买东西。已知，口袋里有如下几种面额的纸币各<strong>一张</strong>：<code>1</code>,<code>2</code>,<code>5</code>,<code>10</code>,<code>13</code>，我们需要支付的金额为<code>17</code>。而由于种种原因，商店并没有零钱。即，我们需要用上述五个数字中的部分进行加和，让值恰好为17。</p><ul><li><strong style="color:#c04851;">贪心算法</strong><ol><li>首先拿出面值为<code>13</code>的纸币。由于<code>13&lt;17</code>，面值<code>13</code>的纸币<strong>一定要使用</strong>。接下来，我们需要用<code>1</code>,<code>2</code>,<code>5</code>,<code>10</code>四张纸币支付<code>4</code>。</li><li>面值为<code>10</code>的纸币超过了要支付的金额，不予使用。</li><li>面值为<code>5</code>的纸币超过了要支付的金额，不予使用。</li><li>由于<code>2 &lt; 4</code>，面值为<code>2</code>的纸币也一定使用。</li><li>最后，剩下一张面值为<code>1</code>的纸币，不足以支付剩余的金额<code>2</code>。则贪心算法的结果是不能支付。</li></ol></li><li><strong>动态规划</strong><ol><li>我们假设在此按照自顶向下(最大面值开始)求解该问题时，同样的也会经历上述步骤。但，上述步骤执行完时并不直接返回<code>false</code>，而是继续考虑。</li><li>这一次，我们将考虑不需要面值为<code>13</code>的纸币。而是使用面值为<code>10</code>的纸币。这一次，我们需要利用剩下的面值为<code>1</code>,<code>2</code>,<code>5</code>面值的纸币凑出<code>7</code>。</li><li>由于<code>5 &lt; 7</code>，使用面值为<code>5</code>的纸币，我们需要利用剩下的面值为<code>1</code>和<code>2</code>的纸币凑够金额2。显然这是可以的。因此利用动态规划得到的结果是可以支付。</li></ol></li></ul><h2 id="最少纸币数量"><a href="#最少纸币数量" class="headerlink" title="最少纸币数量"></a>最少纸币数量</h2><p>这一次，我们有面值为<code>2</code>,<code>8</code>,<code>10</code>的纸币，假设每种纸币的数量<strong>足够多</strong>。我们需要做的是拼凑出金额<code>16</code>。我们所做的是怎么用较少的纸币数量拼凑出相应的金额。</p><ul><li><strong>贪心算法</strong><ol><li>首先，我们拿出面值为<code>10</code>的纸币，一张即可（<code>10 &lt; 16 &lt; 2 * 10</code>）。接下来，需要利用面值为<code>2</code>和<code>8</code>的纸币凑够金额<code>6</code></li><li>面值为<code>8</code>的纸币超过了要支付的金额，不予使用。</li><li><code>3 * 2 = 6</code>。故需要4张纸币。</li></ol></li><li><strong>动态规划</strong><ul><li>在上述基础上，动态规划还会去考虑不使用面值为<code>10</code>时候的其他情况，分别<code>2 * 8</code>，<code>8 + 4 * 2</code>，<code>8 * 2</code>三种方案，最终确定为使用2张面值<code>8</code>的纸币所用纸币数量最少。</li></ul></li></ul><p>最后，需要声明的是，以上样例中动态规划的解法是为方便理解，效率上有着改进的空间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构&amp;算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p>由于二叉搜索树很不平衡，很容易退化为一条类似链表的结构，从而造成时间复杂度从$O(lgN)$降低为$O(N)$。</p><p>为解决这一问题，引入了<strong>“平衡”二叉搜索树</strong>，红黑树就是其中的一种。红黑树在树的基础上，为每个节点增加了一个<strong>颜色位</strong>，可以是<code>RED</code>，也可以是<code>BLACK</code>。通过对每条路径的颜色进行约束，保证红黑树处于<strong style="color:#e67c86;">近似平衡</strong>的状态，从而保证了查找最坏情况为$O(lgN)$。</p><span id="more"></span><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>红黑树除了本身是<strong style="color:rgb(0, 191, 166);">二叉搜索树</strong>外，还满足以下条件：</p><ol><li>每个节点<strong style="color:red;">要么是红色</strong>的，<strong style="color:red;">要么是黑色</strong>的。</li><li><strong style="color:red;">根节点</strong>是<strong style="color:red;">黑色</strong>的。</li><li>每个空节点(<strong style="color:red;">NIL</strong>)都是<strong style="color:red;">黑色</strong>的。</li><li><strong style="color:red;">红色节点</strong>的两个<strong style="color:red;">子节点</strong>都是<strong style="color:red;">黑色</strong>的。</li><li><strong style="color:red;">每个节点</strong><strong>到</strong>其后代<strong style="color:red;">叶子节点</strong>的路径上包含的<strong style="color:red;">黑色节点数目相同</strong>。</li></ol><p>红黑树的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RBTColor</span>&#123;</span>RED, BLACK&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RBTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    T key;</span><br><span class="line">        RBTColor color;</span><br><span class="line">        RBTNode *left;</span><br><span class="line">        RBTNode *right;</span><br><span class="line">        RBTNode *parent;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>样例如图：</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RedBlackTree.png" alt="红黑树样例"></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>由于结点的插入、删除操作对树进行了修改。修改后的红黑树可能<strong style="color:red;">不再满足</strong>上面所列出的<strong style="color:red;">红黑性质</strong>，故需要对树的某些结点进行<strong style="color:pink;">旋转</strong>或<strong style="color:pink;">变色</strong>使其自平衡。</p><p>忽略红黑特性，以一个二叉搜索树为例进行演示旋转。样例如下：</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeRotate.png" alt="红黑树旋转"></p><p>图中<code>x y</code>是两个节点，<code>a b c</code>表示任意子树。</p><p>不难看出，图中的旋转仍然保持了二叉搜索树的性质：a子树所有节点的key值小于<code>x.key</code>;c子树所有节点的key值大于<code>y.key</code>;b子树key值介于<code>x.key</code>与<code>y.key</code>之间。伪代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左旋</span></span><br><span class="line">LEFT-<span class="built_in">ROTATE</span>(T, x)</span><br><span class="line">y = x.right</span><br><span class="line">x.right = y.left<span class="comment">//上图中，b子树的移动</span></span><br><span class="line"><span class="keyword">if</span> y.left != <span class="literal">nullptr</span></span><br><span class="line">    y.left.parent = x<span class="comment">//过继过去的b子树父节点改变</span></span><br><span class="line">y.parent = x.parent</span><br><span class="line">    <span class="comment">//改变x的父节点的指向</span></span><br><span class="line"><span class="keyword">if</span> x.parent == <span class="literal">nullptr</span></span><br><span class="line">    T.root = y<span class="comment">//x父节点为空，证明x为根节点 即左旋后的y节点变为根节点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> x == x.parent.left</span><br><span class="line">    x.parent.left = x</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    x.parent.right = y</span><br><span class="line">y.left = x<span class="comment">//将x链接在y的左侧</span></span><br><span class="line">x.parent = y</span><br><span class="line"></span><br><span class="line"><span class="comment">//右旋</span></span><br><span class="line">RIGHT-<span class="built_in">ROTATE</span>(T, y)</span><br><span class="line">x = y.left</span><br><span class="line">y.left = x.right</span><br><span class="line"><span class="keyword">if</span> x.right != <span class="literal">nullptr</span></span><br><span class="line">    x.right.parent = y</span><br><span class="line">x.parent = y.parent</span><br><span class="line"><span class="keyword">if</span> y.parent == <span class="literal">nullptr</span></span><br><span class="line">    T.root = x</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> y == y.parent.left</span><br><span class="line">    y.parent.left = x</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    y.parent.right = x</span><br><span class="line">x.right = y</span><br><span class="line">y.parent = x</span><br></pre></td></tr></table></figure><p>旋转操作只改变所旋转元素附近的指针，其他属性均未改变。可以在常数时间$O(1)$内完成。</p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>由于红黑树对黑色节点的要求较为苛刻，新插入的节点<strong>默认为红色</strong>。</p><p>将某个节点插入到红黑树，详细过程如下：</p><ol><li>首先，红黑树本身是一个<strong>二叉搜索树</strong>，依据其性质可以找到相应的插入位置，保证节点<strong>插入后</strong>key仍<strong>有序</strong>。</li><li>插入后，进行一系列的<strong style="color:red;">旋转</strong>、<strong style="color:red;">着色</strong>使其继续<strong style="color:red;">保持红黑特性</strong>。</li></ol><p>正常情况下(排除红黑树从0开始构建的情况)，当我们插入一个节点后如果违反了红黑树的红黑特性，那么所违反的应该为特性4(红节点的两个子节点均为黑色)。我们需要<strong>从当前节点向根节点</strong>逐层向上判断是否调整并作出相应的<strong>调整</strong>。相关调整方案如下：</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeInsert.png" alt="RBTreeInsert"></p><p>最后，<strong style="color:red;">根节点</strong>恒<strong style="color:red;">染为黑色</strong>。</p><p>下面给出一个范例，显示一个红黑树上的调整操作。</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeInsertExp.png" alt="RBTreeInsertExp"></p><p>在上图中，初始状态<code>x</code>为插入的节点，其父节点(<code>key = 5</code>)违背红黑规则4，需要进行调整：</p><ol><li>由于<code>x</code>的父节点和叔节点都是红色（调整方案1.2），调整时需要将其父节点(<code>key = 5</code>)和叔节点(<code>key = 8</code>)染成黑色，将其祖父节点(<code>key = 7</code>)染成红色，然后考虑其祖父节点。<code>x节点</code>上移为其祖父节点(<code>key = 7</code>)，此时<code>x节点</code>的父节点(<code>key = 2</code>)违背红黑规则4</li><li>叔节点不为红色，调整策略对应为1.1。观察到<strong style="color:pink;">父节点是祖父节点的左子树，自己是父节点的右节点</strong>(1.1.1.1)。当前节点上移为其父节点(<code>key = 2</code>)然后左旋。左旋后的<code>x节点</code>执行调整方案1.1.1.2</li><li>父节点(<code>key = 7</code>)染成黑色，祖父节点(<code>key = 11</code>)染成红色，将祖父节点右旋。<code>x节点</code>的父节点(<code>key = 11</code>)不再是红色，退出循环。此时当前红黑树不再违背红黑规则。</li><li>循环退出后，将其<strong style="color:red;">根节点染成黑色</strong>。</li></ol><p>调整方案对应的伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> x.parent.color == RED<span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">if</span> x.parent == x.parent.parent.left</span><br><span class="line">        y = x.parent.parent.right<span class="comment">//叔节点</span></span><br><span class="line">        <span class="keyword">if</span> y.color == RED<span class="comment">//1.2</span></span><br><span class="line">            x.parent.color = BLACK</span><br><span class="line">            y.color = BLACK</span><br><span class="line">            x.parent.parent.color = RED</span><br><span class="line">            x = x.parent.parent</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> x == x.parent.right<span class="comment">//1.1.1.1</span></span><br><span class="line">                <span class="comment">//父节点左旋并置为当前</span></span><br><span class="line">                x = x.parent</span><br><span class="line">                LEFT-<span class="built_in">ROTATE</span>(T, x)</span><br><span class="line">            <span class="comment">//1.1.1.2</span></span><br><span class="line">            x.parent.color = BLACK</span><br><span class="line">            x.parent.parent.color = RED</span><br><span class="line">            RIGHT-<span class="built_in">ROTATE</span>(T, x.parent.parent)</span><br><span class="line">    <span class="comment">//父节点为右</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        y = x.parent.parent.left</span><br><span class="line">        <span class="keyword">if</span> y.color == RED</span><br><span class="line">            x.parent.color = BLACK</span><br><span class="line">            y.color = BLACK</span><br><span class="line">            x.parent.parent.color = RED</span><br><span class="line">            x = x.parent.parent</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> x == x.parent.left <span class="comment">//1.1.2.2</span></span><br><span class="line">                x = x.parent</span><br><span class="line">                RIGHT-<span class="built_in">ROTATE</span>(T, x)</span><br><span class="line">            <span class="comment">//1.1.2.1</span></span><br><span class="line">            x.parent.color = BLACK</span><br><span class="line">            x.parent.parent.color = RED</span><br><span class="line">            LEFT-<span class="built_in">ROTATE</span>(T, x.parent.parent)</span><br><span class="line">T.root.color = BLACK</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除和插入操作类似，也分为两个步骤：</p><ol><li>红黑树本身是一个<strong>二叉搜索树</strong>，根据其性质<strong style="color:red;">寻找到对应节点并删除</strong>掉。删除的情况如下<ul><li>若该节点是<strong style="color:red;">叶子节点</strong>，则<strong>直接删除</strong>。</li><li>若<strong style="color:red;">只有一个子树</strong>，则用子树<strong>替代当前节点</strong>。</li><li>若<strong style="color:red;">有两个子树</strong>，则用<strong>右子树的最小值</strong>(大于被删除元素的最小值)替代当前节点。</li></ul></li><li>通过旋转、着色等操作将红黑树修正，使之成为新的红黑树。</li></ol><p>根据所替代节点的相关信息来进行调整：</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeDelete.png" alt="RBTreeDelete"></p><p>同样的，在循环结束之后，将<strong style="color:red;">当前节点染成黑色</strong>。</p><p>下面给出几个具体样例进行分析：</p><ul><li><p>例一</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeDeleteExp1.png" alt="RBTreeDeleteExp1"></p><p>在该样例中，A<strong>节点为黑色</strong>，且是其<strong>父节点的左节点</strong>，<strong>兄弟节点D为红色</strong>，满足调整方案1.1.1。所做出的调整为将其父节点<code>B</code>染成红色，兄弟节点<code>D</code>染成黑色。然后将其父节点<code>B</code>进行左旋。此后均满足条件。</p></li><li><p>例二</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeDeleteExp2.png" alt="RBTreeDeleteExp2"></p><p>在该样例中，A<strong>节点为黑色</strong>，且是其<strong>父节点的左节点</strong>，<strong>兄弟节点D为黑色</strong>，两个<strong>侄子节点</strong><code>C</code>和<code>E</code><strong>均为黑色</strong>，满足调整方案1.1.2.1。调整时，将其兄弟结点<code>D</code>染成红色，<code>x</code>已上移为根节点<code>B</code>，循环结束。需要特别注意的是，此刻应再将节点<code>B</code>染成黑色。</p></li><li><p>例三</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeDeleteExp3.png" alt="RBTreeDeleteExp3"></p><p>在该样例中，A<strong>节点为黑色</strong>，且是其<strong>父节点的左节点</strong>，<strong>兄弟节点D为黑色</strong>，左侄子<code>C</code>为红色,右侄子<code>E</code>为黑色，满足调整方案1.1.2.2。调整时，将其左侄子<code>C</code>染成黑色，兄弟节点<code>D</code>染成红色，并将兄弟节点D右旋，然后再按照调整方案1.1.2.3进行调整，在此略过。</p></li><li><p>例四</p><p><img src="/2022/01/05/%E7%BA%A2%E9%BB%91%E6%A0%91/RBTreeDeleteExp4.png" alt="RBTreeDeleteExp4"></p><p>在该样例中，A<strong>节点为黑色</strong>，且是其<strong>父节点的左节点</strong>，<strong>兄弟节点D为黑色</strong>，右侄子<code>E</code>为红色，满足调整方案1.1.2.3。调整时，兄弟节点<code>D</code>颜色随父节点<code>B</code>，右侄子<code>E</code>和父节点<code>B</code>染成黑色，将父节点<code>B</code>左旋。</p></li></ul><p>调整方案对应伪代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> x != T.root <span class="keyword">and</span> x.color == BLACK</span><br><span class="line">    <span class="keyword">if</span> x == x.parent.left</span><br><span class="line">w = x.parent.right<span class="comment">//兄弟节点</span></span><br><span class="line">        <span class="keyword">if</span> w.color == RED<span class="comment">// 1.1.1</span></span><br><span class="line">            w.color = BLACK</span><br><span class="line">            x.parent.color = RED</span><br><span class="line">            LEFT-<span class="built_in">ROTATE</span>(T, x.parent)</span><br><span class="line">            w = x.parent.right</span><br><span class="line">        <span class="keyword">if</span> w.left.color == BLACK <span class="keyword">and</span> w.right.color == BLACK<span class="comment">//1.1.2.1</span></span><br><span class="line">            w.color = RED</span><br><span class="line">            x = x.parent</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> w.right.color == BLACK<span class="comment">//1.1.2.2</span></span><br><span class="line">            w.left.color = BLACK</span><br><span class="line">                w.color = RED</span><br><span class="line">                RIGHT-<span class="built_in">ROTATE</span>(T, w)</span><br><span class="line">               w = x.parent.right</span><br><span class="line">            w.color = x.parent.color<span class="comment">//1.1.2.3</span></span><br><span class="line">            x.parent.color = BLACK</span><br><span class="line">            w.right.color = BLACK</span><br><span class="line">            LEFT-<span class="built_in">ROTATE</span>(T, x.parent)</span><br><span class="line">            x = T.root</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        w = x.parent.left</span><br><span class="line">        <span class="keyword">if</span> w.color == RED<span class="comment">//1.2.2</span></span><br><span class="line">            w.color = BLACK</span><br><span class="line">            x.parent.color = RED</span><br><span class="line">            RIGHT-<span class="built_in">ROTATE</span>(T, x.parent)</span><br><span class="line">            w = x.parent.left</span><br><span class="line">        <span class="keyword">if</span> w.right.color == BLACK <span class="keyword">and</span> w.left.color == BLACK<span class="comment">//1.2.1.1</span></span><br><span class="line">            w.color =RED</span><br><span class="line">            x = x.parent</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> w.left.color == BLACK<span class="comment">//1.2.1.2</span></span><br><span class="line">                w.right.color = BLACK</span><br><span class="line">                w.color = RED</span><br><span class="line">                LEFT-<span class="built_in">ROTATE</span>(T, w)</span><br><span class="line">            w.color = x.parent.color<span class="comment">//1.2.1.3</span></span><br><span class="line">            x.parent.color = BLACK</span><br><span class="line">            w.left.color = BLACK</span><br><span class="line">   RIGHT-<span class="built_in">ROTATE</span>(T, x.parent)</span><br><span class="line">            x = T.root</span><br><span class="line">x.color = BLACK</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>红黑树插入、删除节点的情况虽然复杂，但基本处于<strong>对称</strong>情况，且有一个模型通过拼凑其他模型来实现。本文中的伪代码、样例均选自《算法导论》，红黑树的图采用<a href="https://draw.io/">drawio</a>绘制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构&amp;算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左孩子右兄弟树</title>
      <link href="/2022/01/04/%E5%B7%A6%E5%AD%A9%E5%AD%90%E5%8F%B3%E5%85%84%E5%BC%9F%E6%A0%91/"/>
      <url>/2022/01/04/%E5%B7%A6%E5%AD%A9%E5%AD%90%E5%8F%B3%E5%85%84%E5%BC%9F%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>在二叉树的基础上，我们可以扩展出任意多个叉的树。即，多叉树。然而，此时又面临着另外一个问题：</p><ul><li>当孩子结点无限制时，我们并不知道<strong>预先要分配多少个属性</strong>，且当<strong>仅有少数元素拥有多个子节点</strong>时，将会造成大量的空间浪费。</li></ul><p>此时，提出了一种新的表示形式:</p><p>$left-child \quad right-sibling \quad representation$。</p><span id="more"></span><h1 id="左孩子右兄弟表示法"><a href="#左孩子右兄弟表示法" class="headerlink" title="左孩子右兄弟表示法"></a>左孩子右兄弟表示法</h1><p>对于任意一个结点T，其仅包含两个指针：</p><ol><li><code>T.left-child</code>，指向T结点的最左侧子节点。</li><li><code>T.right-sibling</code>，指向T右侧最邻近的兄弟结点。</li></ol><p>特别的，当二者不存在时，相应的指针皆为空，即<code>NIL</code>。该方法只需要$O(n)$空间来存储含$n$个结点的树。</p><p>由于其与二叉树的相似性，故又叫<code>树的二叉树表示法</code>。</p><p>在此，给出一个样例：</p><p><img src="/2022/01/04/%E5%B7%A6%E5%AD%A9%E5%AD%90%E5%8F%B3%E5%85%84%E5%BC%9F%E6%A0%91/LchildRsiblingTree.png" alt="LchildRsiblingTree"></p><p>该样例旨在为下述算法提供一个参考。</p><h1 id="相关算法"><a href="#相关算法" class="headerlink" title="相关算法"></a>相关算法</h1><h2 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h2><p>对于该种树而言，任意一个节点和其右节点的深度相同。也就意味着对于一个节点T，其高度为要么<strong>和右子树高度相同</strong>，要么<strong>比左子树低一层</strong>。从叶子节点向上递归，即可得出最大深度。即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Height</span><span class="params">(Tree&amp; t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Height</span>(t-&gt;left) + <span class="number">1</span> &gt; <span class="built_in">Height</span>(t-&gt;right) ? <span class="built_in">Height</span>(t-&gt;left) + <span class="number">1</span> : <span class="built_in">Height</span>(t-&gt;right);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="叶子节点数"><a href="#叶子节点数" class="headerlink" title="叶子节点数"></a>叶子节点数</h2><p>基于二叉树中的定义，<strong>叶子节点</strong>是没有子节点的节点。在该种表示方法中，即<strong>左指针为空</strong>的节点（某一层的最后一个叶子节点右子树也为空，故只看左指针就行）。对于一个节点的叶子节点数，即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count</span><span class="params">(Tree&amp; t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;left == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Count</span>(t-&gt;left) + <span class="built_in">Count</span>(t-&gt;right); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>先序遍历，对于某个节点而言，其<strong>左指针</strong>为<strong>第一个子节点</strong>。向左指针递归即寻找孩子，回溯时输出右指针的兄弟。与二叉树的先序遍历完全一致。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Tree&amp; t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">cout&lt;&lt;t-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//输出值</span></span><br><span class="line">TreeNode* p = t-&gt;left;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line"><span class="built_in">preOrder</span>(p);</span><br><span class="line">p = p-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历过程中，对于一个节点，应该打印其左指针和全部右侧的节点后才打印该节点，即回溯时才打印当前节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Tree&amp; t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">TreeNode* p = t-&gt;left;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line"><span class="built_in">PostOrder</span>(p); <span class="comment">//递归找“根”</span></span><br><span class="line">p = p-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;t-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>层序遍历，即类似于广度优先算法。对于一个节点，当打印左节点时，应将其右侧所有兄弟节点都打印再去下一层。打印其兄弟节点时，保留其左节点，即其子节点的兄弟。基于此，也可统计出每层的<strong>宽度</strong>。有注释的几行即为相应的宽度统计。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(Tree&amp; t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">queue&lt;TreeNode*&gt; q;</span><br><span class="line">TreeNode* p;</span><br><span class="line">    <span class="keyword">int</span> max = INT_MIN; <span class="comment">//宽度</span></span><br><span class="line">q.<span class="built_in">push</span>(t);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">int</span> width = q.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; width;i ++)&#123;</span><br><span class="line">p = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">cout&lt;&lt;p-&gt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;left;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(p);</span><br><span class="line">p = p-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        max = max &gt; width ? max: width;        <span class="comment">//一层遍历结束 统计宽度</span></span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> max;<span class="comment">//返回宽度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构&amp;算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/29/hello-world/"/>
      <url>/2021/12/29/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正如学编程语言时首个程序是<code>Hello World!</code>一样，本blog亦是如此。</p><p>该网站旨在分享一些生活的点滴及秋招的经历。最初是在微信公众号分享，奈何修改、发表过于繁琐。后来尝试过csdn，但一些不可描述的原因又将我劝退，最终决定自己搭建网站。</p><p>当然了，建站还有一个很重要的原因是——装逼。</p><span id="more"></span><h2 id="残局"><a href="#残局" class="headerlink" title="残局"></a>残局</h2><p>endgame,残局。</p><p>csgo可谓是电子竞技中最精彩的赛事之一，他的精彩就表现在残局众多。残局，是一场比赛中最精彩、最充满期待同时也是有着最多遗憾的时刻。精彩在会有一个力挽狂澜、扭转乾坤的人出现；遗憾在纵使他的某次发挥再流传千古，可终究改变不了逆局。而此时此刻，恰如彼时彼刻。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>钱都花了，也该有点相应的规划。预想着在本网站发布一些算法刷题的经历、八股、面经以及将来实习、工作的经历，还有一些日常生活中的点滴（许久没学习的时候，水个内容）。当然了，还有另外一种可能——几天之后，<strong style="color:#e67c86;">删库跑路</strong>。</p><p>另外，还建了个<a href="https://qm.qq.com/cgi-bin/qm/qr?k=s6ItnVGSSFQaS53il_Oc3490nQvfrs6S&jump_from=webapi">QQ群</a>来分享一些相关的书籍，有兴趣的话可以来逛逛。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>奈何，本人才疏学浅，能力有限再加上语言表达能力不是很好，文章中难免会有些地方表达欠缺难以理解，甚至与事实相悖。遇到这种情况时，还望您能轻点骂，骂完能帮忙指出错误，避免我这一己之见误导了他人。网站里，留下了我的<a href="mailto:lyong000919@163.com">邮箱</a>及<a href="tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1992018857&website=www.oicqzone.com">QQ</a>，如果您在阅读时有疑问、发现了错误又或者觉得这个人写的还可以，想交个朋友，欢迎联系我。</p><p>最后，为给您带来的不良阅读体验致歉。(本人亲测在<code>DARK REDAER</code>插件下图片阅读感极差，代码块的兼容性也较差)</p><hr><h2 id="22-4-19更新"><a href="#22-4-19更新" class="headerlink" title="22/4/19更新"></a>22/4/19更新</h2><p>关于技术性的文章，我觉得已有心无力。因为网上有着太多太多的资源，有着太多太多的博主们他们理解的比我深、讲的也比我更通透。以后，本blog更偏向于分享一些照片、读书笔记、沙雕日常亦或是吐槽。当然了，如果有我学的比较透彻的知识点（大概率是没有了），也会分享给大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
